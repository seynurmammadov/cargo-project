function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
export function clone(jsonObject) {
    let jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if ((columnName != "formGroup")) {
                if (Array.isArray(jsonObject[columnName])) {
                    jObject[columnName] = [];
                    for (let row of jsonObject[columnName]) {
                        if (isObject(row))
                            jObject[columnName].push(clone(row));
                        else
                            jObject[columnName].push(row);
                    }
                }
                else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
                    jObject[columnName] = clone(jsonObject[columnName]);
                else
                    jObject[columnName] = jsonObject[columnName];
            }
        }
        return jObject;
    }
    else
        return jsonObject;
}
export function merge(firstObject, secondObject) {
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            for (let row of secondObject[columnName])
                firstObject[columnName].push(clone(row));
        }
        else if (typeof firstObject[columnName] == "object" && !(firstObject[columnName] instanceof RegExp))
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
export function isMatched(jsonObject, compareObject) {
    let isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic2VydmljZXMvZW50aXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsU0FBUyxZQUFZLENBQUMsS0FBUztJQUMzQixPQUFPLENBQUMsQ0FBQyxPQUFPLEtBQUssSUFBSSxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLFlBQVksSUFBSSxDQUFDLENBQUM7QUFDM0gsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEtBQVU7SUFDeEIsT0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssaUJBQWlCLENBQUM7QUFDdkUsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLLENBQUMsVUFBa0M7SUFDcEQsSUFBSSxPQUFPLEdBQVEsRUFBRSxDQUFDO0lBQ3RCLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzFCLEtBQUssSUFBSSxVQUFVLElBQUksVUFBVSxFQUFFO1lBQy9CLElBQUksQ0FBQyxVQUFVLElBQUssV0FBVyxDQUFDLEVBQUU7Z0JBQzlCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtvQkFDdkMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFDekIsS0FBSyxJQUFJLEdBQUcsSUFBSSxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUU7d0JBQ3BDLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQzs0QkFDYixPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBOzs0QkFFcEMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQTtxQkFDcEM7aUJBQ0o7cUJBQU0sSUFBSSxPQUFPLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsWUFBWSxNQUFNLENBQUM7b0JBQy9GLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7O29CQUVwRCxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFBO2FBQ25EO1NBQ0o7UUFDRCxPQUFPLE9BQU8sQ0FBQztLQUNsQjs7UUFFRyxPQUFPLFVBQVUsQ0FBQztBQUN0QixDQUFDO0FBRUwsTUFBTSxVQUFVLEtBQUssQ0FBQyxXQUFtQyxFQUFFLFlBQW9DO0lBQ3ZGLEtBQUssSUFBSSxVQUFVLElBQUksWUFBWSxFQUFFO1FBQ2pDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN6QyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQztnQkFDeEIsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNqQyxLQUFLLElBQUksR0FBRyxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7Z0JBQ3BDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDL0M7YUFBTSxJQUFJLE9BQU8sV0FBVyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFVBQVUsQ0FBQyxZQUFZLE1BQU0sQ0FBQztZQUNqRyxXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsRUFBRSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQTs7WUFFbEYsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUMxRDtJQUNELE9BQU8sV0FBVyxDQUFDO0FBQzNCLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLFVBQWtDLEVBQUUsYUFBcUM7SUFDL0YsSUFBSSxVQUFVLEdBQVksS0FBSyxDQUFDO0lBQ2hDLEtBQUssSUFBSSxVQUFVLElBQUksYUFBYSxFQUFFO1FBQzlCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRTtZQUN2QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDcEQsVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDbEY7U0FDSjthQUFNLElBQUksT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFlBQVksTUFBTSxDQUFDO1lBQy9GLFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDOztZQUUxRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUN4RSxJQUFJLFVBQVU7WUFDVixNQUFNO0tBQ2pCO0lBQ0csT0FBTyxVQUFVLENBQUM7QUFDMUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuZnVuY3Rpb24gaXNPYmplY3RUeXBlKHZhbHVlOmFueSkge1xyXG4gICAgcmV0dXJuICEodHlwZW9mIHZhbHVlID09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCIgfHwgdmFsdWUgaW5zdGFuY2VvZiBEYXRlKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaXNPYmplY3QodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2xvbmUoanNvbk9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgbGV0IGpPYmplY3Q6IGFueSA9IHt9O1xyXG4gICAgaWYgKGlzT2JqZWN0VHlwZShqc29uT2JqZWN0KSkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbHVtbk5hbWUgaW4ganNvbk9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoKGNvbHVtbk5hbWUgICE9IFwiZm9ybUdyb3VwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgb2YganNvbk9iamVjdFtjb2x1bW5OYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3Qocm93KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0ucHVzaChjbG9uZShyb3cpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdLnB1c2gocm93KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gXCJvYmplY3RcIiAmJiAhKGpzb25PYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBSZWdFeHApKVxyXG4gICAgICAgICAgICAgICAgICAgIGpPYmplY3RbY29sdW1uTmFtZV0gPSBjbG9uZShqc29uT2JqZWN0W2NvbHVtbk5hbWVdKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0ganNvbk9iamVjdFtjb2x1bW5OYW1lXVxyXG4gICAgICAgICAgICB9IFxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gak9iamVjdDtcclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICByZXR1cm4ganNvbk9iamVjdDtcclxuICAgIH1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZShmaXJzdE9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgc2Vjb25kT2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgZm9yICh2YXIgY29sdW1uTmFtZSBpbiBzZWNvbmRPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgcm93IG9mIHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXSlcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKGNsb25lKHJvdykpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIgJiYgIShmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIFJlZ0V4cCkpXHJcbiAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IG1lcmdlKGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdLCBzZWNvbmRPYmplY3RbY29sdW1uTmFtZV0pXHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGZpcnN0T2JqZWN0W2NvbHVtbk5hbWVdID0gc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmlyc3RPYmplY3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpc01hdGNoZWQoanNvbk9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY29tcGFyZU9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgbGV0IGlzTW9kaWZpZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuICAgIGZvciAodmFyIGNvbHVtbk5hbWUgaW4gY29tcGFyZU9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqc29uT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBqc29uT2JqZWN0W2NvbHVtbk5hbWVdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXNNb2RpZmllZCA9IGlzTWF0Y2hlZChqc29uT2JqZWN0W2NvbHVtbk5hbWVdW2ldLCBjb21wYXJlT2JqZWN0W2NvbHVtbk5hbWVdW2ldKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uT2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIgJiYgIShqc29uT2JqZWN0W2NvbHVtbk5hbWVdIGluc3RhbmNlb2YgUmVnRXhwKSlcclxuICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSBpc01hdGNoZWQoanNvbk9iamVjdFtjb2x1bW5OYW1lXSwgY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSAhKGpzb25PYmplY3RbY29sdW1uTmFtZV0gPT0gY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgIGlmIChpc01vZGlmaWVkKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICAgICAgcmV0dXJuIGlzTW9kaWZpZWQ7XHJcbn1cclxuIl19