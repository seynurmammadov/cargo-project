import * as tslib_1 from "tslib";
import { RegExRule } from "./regex-rules";
var ALPHABET = "alphabet";
var DIGIT = "digit";
var CONTAINS = "contains";
var LOWERCASE = "lowerCase";
var UPPERCASE = "upperCase";
var SPECIAL_CHARACTER = "specialCharacter";
var MIN_LENGTH = "minLength";
var MAX_LENGTH = "maxLength";
var RegexValidator = /** @class */ (function () {
    function RegexValidator() {
    }
    RegexValidator.isExits = function (value, regex) {
        return value.match(regex) != null;
    };
    RegexValidator.isValid = function (value, regex) {
        return regex.test(value);
    };
    RegexValidator.isNotBlank = function (value, isRemoveSpace) {
        if (isRemoveSpace === void 0) { isRemoveSpace = false; }
        return !isRemoveSpace ?
            (value === 0) || (value !== undefined && value !== null && value !== "") :
            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== "");
    };
    RegexValidator.isValidPassword = function (passwordValidation, value) {
        var e_1, _a;
        var isValid = false;
        var jObject = {};
        var keyName = "status";
        var objectProperties = Object.getOwnPropertyNames(passwordValidation);
        try {
            for (var objectProperties_1 = tslib_1.__values(objectProperties), objectProperties_1_1 = objectProperties_1.next(); !objectProperties_1_1.done; objectProperties_1_1 = objectProperties_1.next()) {
                var propertyName = objectProperties_1_1.value;
                switch (propertyName) {
                    case ALPHABET:
                        isValid = RegexValidator.isExits(value, RegExRule.alphaExits);
                        keyName = ALPHABET;
                        break;
                    case DIGIT:
                        isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);
                        keyName = DIGIT;
                        break;
                    case CONTAINS:
                        isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                        keyName = CONTAINS;
                        break;
                    case LOWERCASE:
                        isValid = RegexValidator.isValid(value, RegExRule.lowerCase);
                        keyName = LOWERCASE;
                        break;
                    case UPPERCASE:
                        isValid = RegexValidator.isValid(value, RegExRule.upperCase);
                        keyName = UPPERCASE;
                        break;
                    case SPECIAL_CHARACTER:
                        isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);
                        keyName = SPECIAL_CHARACTER;
                        break;
                    case MIN_LENGTH:
                        isValid = value.length >= passwordValidation[propertyName];
                        keyName = MIN_LENGTH;
                        break;
                    case MAX_LENGTH:
                        isValid = value.length <= passwordValidation[propertyName];
                        keyName = MAX_LENGTH;
                        break;
                }
                if (!isValid)
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (objectProperties_1_1 && !objectProperties_1_1.done && (_a = objectProperties_1.return)) _a.call(objectProperties_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return { isValid: isValid, keyName: keyName };
    };
    RegexValidator.isZero = function (value) {
        return value == 0;
    };
    RegexValidator.commaRegex = function () {
        return new RegExp(",", "g");
    };
    return RegexValidator;
}());
export { RegexValidator };
//# sourceMappingURL=data:application/json;base64,