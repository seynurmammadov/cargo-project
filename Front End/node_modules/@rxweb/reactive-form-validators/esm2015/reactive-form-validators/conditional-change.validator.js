import { ObjectMaker } from "../util/object-maker";
import { ApplicationUtil } from "../util/app-util";
import { FormProvider } from "../util/form-provider";
const DISABLED_EXPRESSION = "disableExpression";
export function conditionalChangeValidator(conditionalValidationProps) {
    var timeOuts = [];
    var oldValue = undefined;
    var setTimeOut = (control, config) => {
        if (control[DISABLED_EXPRESSION])
            runDisabledExpression(control, config);
        var timeOut = setTimeout(t => {
            clearTimeout(timeOut);
            control.updateValueAndValidity({ onlySelf: true });
        }, 100);
    };
    return (control) => {
        let value = control.value;
        if (control.parent && oldValue != value) {
            const rootFormGroup = ApplicationUtil.getRootFormGroup(control);
            const parentFormGroup = control.parent;
            oldValue = value;
            timeOuts = [];
            let controlName = ApplicationUtil.getFormControlName(control);
            let disabledConfig = { [controlName]: value };
            conditionalValidationProps.forEach(t => {
                let a = control;
                if (t.indexOf("[]") != -1) {
                    var splitText = t.split("[]");
                    var formArray = rootFormGroup.get([splitText[0]]);
                    if (formArray)
                        formArray.controls.forEach(formGroup => {
                            var abstractControl = formGroup.get(splitText[1]);
                            if (abstractControl) {
                                setTimeOut(abstractControl, disabledConfig);
                            }
                        });
                }
                else {
                    let splitText = t.split('.');
                    if (splitText.length > 1) {
                        var control = null;
                        t.split('.').forEach((name, index) => { control = (index == 0) ? rootFormGroup.controls[name] : control.controls[name]; });
                    }
                    else {
                        control = parentFormGroup.controls[t];
                    }
                    if (control) {
                        setTimeOut(control, disabledConfig);
                    }
                }
            });
        }
        return ObjectMaker.null();
    };
}
function runDisabledExpression(control, config) {
    let isDisabled = FormProvider.ProcessRule(control, { conditionalExpression: control[DISABLED_EXPRESSION], disableConfig: config });
    if (isDisabled && !control.disabled)
        control.disable();
    else if (control.disabled)
        control.enable();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJyZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvY29uZGl0aW9uYWwtY2hhbmdlLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGtCQUFrQixDQUFBO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQTtBQUNwRCxNQUFNLG1CQUFtQixHQUFXLG1CQUFtQixDQUFDO0FBQ3hELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQywwQkFBb0M7SUFDM0UsSUFBSSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzVCLElBQUksUUFBUSxHQUFXLFNBQVMsQ0FBQztJQUNqQyxJQUFJLFVBQVUsR0FBRyxDQUFDLE9BQXdCLEVBQUUsTUFBVyxFQUFFLEVBQUU7UUFDdkQsSUFBSSxPQUFPLENBQUMsbUJBQW1CLENBQUM7WUFDNUIscUJBQXFCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzNDLElBQUksT0FBTyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUN6QixZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDdEIsT0FBTyxDQUFDLHNCQUFzQixDQUFDLEVBQUUsUUFBUSxFQUFDLElBQUksRUFBRSxDQUFDLENBQUE7UUFDckQsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ1gsQ0FBQyxDQUFBO0lBQ0QsT0FBTyxDQUFDLE9BQXdCLEVBQTBCLEVBQUU7UUFDeEQsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMxQixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksUUFBUSxJQUFJLEtBQUssRUFBRTtZQUNyQyxNQUFNLGFBQWEsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEUsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztZQUN2QyxRQUFRLEdBQUcsS0FBSyxDQUFDO1lBQ2pCLFFBQVEsR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLFdBQVcsR0FBRyxlQUFlLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUQsSUFBSSxjQUFjLEdBQUcsRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQzlDLDBCQUEwQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbkMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO2dCQUNoQixJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7b0JBQ3ZCLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzlCLElBQUksU0FBUyxHQUFjLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUM3RCxJQUFJLFNBQVM7d0JBQ1QsU0FBUyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7NEJBQ25DLElBQUksZUFBZSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7NEJBQ2xELElBQUksZUFBZSxFQUFFO2dDQUNqQixVQUFVLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDOzZCQUMvQzt3QkFDTCxDQUFDLENBQUMsQ0FBQTtpQkFDVDtxQkFBTTtvQkFFSCxJQUFJLFNBQVMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO29CQUM3QixJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO3dCQUN0QixJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUM7d0JBQ25CLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsT0FBTyxHQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7cUJBQzdIO3lCQUNJO3dCQUNELE9BQU8sR0FBRyxlQUFlLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUN6QztvQkFFRCxJQUFJLE9BQU8sRUFBRTt3QkFFVCxVQUFVLENBQUMsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO3FCQUN2QztpQkFDSjtZQUNMLENBQUMsQ0FBQyxDQUFBO1NBQ0w7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QixDQUFDLENBQUE7QUFDTCxDQUFDO0FBQ0QsU0FBUyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsTUFBTTtJQUMxQyxJQUFJLFVBQVUsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxFQUFFLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ25JLElBQUksVUFBVSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVE7UUFDL0IsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2pCLElBQUksT0FBTyxDQUFDLFFBQVE7UUFDckIsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQ3pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgVmFsaWRhdG9yRm4sXHJcbiAgICBBYnN0cmFjdENvbnRyb2wsXHJcblxyXG4gICAgRm9ybUFycmF5XHJcbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcblxyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuLi91dGlsL29iamVjdC1tYWtlclwiO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tIFwiLi4vdXRpbC9hcHAtdXRpbFwiXHJcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gXCIuLi91dGlsL2Zvcm0tcHJvdmlkZXJcIlxyXG5jb25zdCBESVNBQkxFRF9FWFBSRVNTSU9OOiBzdHJpbmcgPSBcImRpc2FibGVFeHByZXNzaW9uXCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBjb25kaXRpb25hbENoYW5nZVZhbGlkYXRvcihjb25kaXRpb25hbFZhbGlkYXRpb25Qcm9wczogc3RyaW5nW10pOiBWYWxpZGF0b3JGbiB7XHJcbiAgICB2YXIgdGltZU91dHM6IG51bWJlcltdID0gW107XHJcbiAgICB2YXIgb2xkVmFsdWU6IHN0cmluZyA9IHVuZGVmaW5lZDtcclxuICAgIHZhciBzZXRUaW1lT3V0ID0gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgY29uZmlnOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoY29udHJvbFtESVNBQkxFRF9FWFBSRVNTSU9OXSlcclxuICAgICAgICAgICAgcnVuRGlzYWJsZWRFeHByZXNzaW9uKGNvbnRyb2wsIGNvbmZpZyk7XHJcbiAgICAgICAgdmFyIHRpbWVPdXQgPSBzZXRUaW1lb3V0KHQgPT4ge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZU91dCk7XHJcbiAgICAgICAgICAgIGNvbnRyb2wudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IG9ubHlTZWxmOnRydWUgfSlcclxuICAgICAgICB9LCAxMDApXHJcbiAgICB9XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPT4ge1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IGNvbnRyb2wudmFsdWU7XHJcbiAgICAgICAgaWYgKGNvbnRyb2wucGFyZW50ICYmIG9sZFZhbHVlICE9IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvb3RGb3JtR3JvdXAgPSBBcHBsaWNhdGlvblV0aWwuZ2V0Um9vdEZvcm1Hcm91cChjb250cm9sKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50Rm9ybUdyb3VwID0gY29udHJvbC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIG9sZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIHRpbWVPdXRzID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sTmFtZSA9IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbE5hbWUoY29udHJvbCk7XHJcbiAgICAgICAgICAgIGxldCBkaXNhYmxlZENvbmZpZyA9IHsgW2NvbnRyb2xOYW1lXTogdmFsdWUgfTtcclxuICAgICAgICAgICAgY29uZGl0aW9uYWxWYWxpZGF0aW9uUHJvcHMuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBhID0gY29udHJvbDtcclxuICAgICAgICAgICAgICAgIGlmICh0LmluZGV4T2YoXCJbXVwiKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcGxpdFRleHQgPSB0LnNwbGl0KFwiW11cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1BcnJheSA9IDxGb3JtQXJyYXk+cm9vdEZvcm1Hcm91cC5nZXQoW3NwbGl0VGV4dFswXV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtQXJyYXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1BcnJheS5jb250cm9scy5mb3JFYWNoKGZvcm1Hcm91cCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJzdHJhY3RDb250cm9sID0gZm9ybUdyb3VwLmdldChzcGxpdFRleHRbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFic3RyYWN0Q29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVPdXQoYWJzdHJhY3RDb250cm9sLCBkaXNhYmxlZENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BsaXRUZXh0ID0gdC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFRleHQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3BsaXQoJy4nKS5mb3JFYWNoKChuYW1lLCBpbmRleCkgPT4geyBjb250cm9sID0gKGluZGV4ID09IDApID8gcm9vdEZvcm1Hcm91cC5jb250cm9sc1tuYW1lXSA6IGNvbnRyb2wuY29udHJvbHNbbmFtZV07IH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sID0gcGFyZW50Rm9ybUdyb3VwLmNvbnRyb2xzW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVPdXQoY29udHJvbCwgZGlzYWJsZWRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBydW5EaXNhYmxlZEV4cHJlc3Npb24oY29udHJvbCwgY29uZmlnKSB7XHJcbiAgICBsZXQgaXNEaXNhYmxlZCA9IEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLCB7IGNvbmRpdGlvbmFsRXhwcmVzc2lvbjogY29udHJvbFtESVNBQkxFRF9FWFBSRVNTSU9OXSwgZGlzYWJsZUNvbmZpZzogY29uZmlnIH0pO1xyXG4gICAgaWYgKGlzRGlzYWJsZWQgJiYgIWNvbnRyb2wuZGlzYWJsZWQpXHJcbiAgICAgICAgY29udHJvbC5kaXNhYmxlKCk7XHJcbiAgICBlbHNlIGlmIChjb250cm9sLmRpc2FibGVkKVxyXG4gICAgICAgIGNvbnRyb2wuZW5hYmxlKCk7XHJcbn1cclxuIl19