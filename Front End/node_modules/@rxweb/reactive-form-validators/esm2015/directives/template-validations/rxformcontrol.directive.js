import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, forwardRef, Renderer2 } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from '../../const/app-validators.const';
import { BaseValidator } from './base-validator.directive';
import { ELEMENT_VALUE, BLUR, FOCUS, BLANK } from "../../const";
import { TEMPLATE_VALIDATION_CONFIG, CONDITIONAL_VALIDATOR, VALIDATOR_CONFIG } from '../../const/app.const';
import { ApplicationUtil } from '../../util/app-util';
import { DecimalProvider } from "../../domain/element-processor/decimal.provider";
import { RegexValidator } from '../../util';
import { MaskProvider } from '../../domain/element-processor/mask.provider';
const NGMODEL_BINDING = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef(() => RxFormControlDirective),
    multi: true
};
const ALLOW_VALIDATOR_WITHOUT_CONFIG = ['required', 'notEmpty', 'alpha', 'alphaNumeric', 'ascii', 'dataUri', 'digit', 'email', 'even', 'hexColor', 'json', 'latitude', 'latLong', 'leapYear', 'longitude', 'lowerCase', 'mac', 'odd', 'port', 'primeNumber', 'time', 'upperCase', 'url', 'unique', 'cusip', 'gird'];
const NUMERIC = "numeric";
const IS_FORMAT = "isFormat";
const DIGITS_INFO = "digitsInfo";
let RxFormControlDirective = class RxFormControlDirective extends BaseValidator {
    constructor(elementRef, renderer, decimalProvider) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.decimalProvider = decimalProvider;
        this.eventListeners = [];
        this.isNumericSubscribed = false;
        this.isFocusCalled = false;
        this.isMasked = false;
        this.element = elementRef.nativeElement;
        this.setEventName();
    }
    set validationControls(value) {
        this.controls = value;
    }
    get validationControls() {
        return this.controls;
    }
    ngOnInit() {
        let validators = [];
        Object.keys(APP_VALIDATORS).forEach(validatorName => {
            if ((this[`rx${validatorName}`]) || (ALLOW_VALIDATOR_WITHOUT_CONFIG.indexOf(validatorName) != -1 && this[`rx${validatorName}`] == BLANK)) {
                validators.push(APP_VALIDATORS[validatorName](this[`rx${validatorName}`]));
                if (this.name && !(this.formControlName && this.formControl)) {
                    ApplicationUtil.configureControl(this.controlConfig, this[`rx${validatorName}`], validatorName);
                }
            }
        });
        if (validators.length > 0)
            this.validators = validators;
        if (this.rxnumeric && (this.rxnumeric.isFormat || this.rxnumeric.digitsInfo)) {
            this.bindNumericElementEvent();
        }
    }
    blurEvent() {
        if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric)) {
            if (this.formControl.value !== null && this.formControl.value !== undefined) {
                let value = this.decimalProvider.transFormDecimal(this.formControl.value, this.rxnumeric.digitsInfo);
                value = (!this.rxnumeric.isFormat) ? this.decimalProvider.replacer(value) : value;
                this.setValueOnElement(value);
            }
            this.isFocusCalled = false;
        }
    }
    bindNumericElementEvent(config) {
        if (config)
            this.rxnumeric = config;
        let listener = this.renderer.listen(this.element, BLUR, this.blurEvent.bind(this));
        this.eventListeners.push(listener);
        listener = this.renderer.listen(this.element, FOCUS, (event) => {
            this.isFocusCalled = true;
            if (!(this.formControl && this.formControl.errors && this.formControl.errors.numeric) && this.formControl.value != null) {
                let value = this.decimalProvider.replacer(this.element.value);
                this.setValueOnElement(value);
            }
        });
        this.eventListeners.push(listener);
    }
    bindValueChangeEvent() {
        if (this.eventName != BLANK) {
            let listener = this.renderer.listen(this.element, this.eventName, () => {
                Object.keys(this.validationControls).forEach(fieldName => {
                    this.validationControls[fieldName].updateValueAndValidity();
                });
            });
            this.eventListeners.push(listener);
        }
    }
    subscribeNumericFormatter() {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG][NUMERIC] && (this.formControl[VALIDATOR_CONFIG][NUMERIC][IS_FORMAT] || this.formControl[VALIDATOR_CONFIG][NUMERIC][DIGITS_INFO])) {
            if (!this.isNumericSubscribed) {
                this.bindNumericElementEvent(this.formControl[VALIDATOR_CONFIG][NUMERIC]);
                this.isNumericSubscribed = true;
            }
            if (!this.isFocusCalled && RegexValidator.isNotBlank(this.formControl.value)) {
                this.blurEvent();
            }
        }
    }
    subscribeMaskValidator() {
        if (this.formControl[VALIDATOR_CONFIG] && this.formControl[VALIDATOR_CONFIG]["mask"] && !this.isMasked) {
            let config = this.formControl[VALIDATOR_CONFIG]["mask"];
            this.maskProvider = new MaskProvider(this.element, config.mask, this.renderer, this.formControl, config);
            this.isMasked = true;
        }
    }
    setValueOnElement(value) {
        this.renderer.setProperty(this.element, ELEMENT_VALUE, value);
    }
    setTemplateValidators(control) {
        for (let validatorName in control[VALIDATOR_CONFIG]) {
            this[validatorName] = control[VALIDATOR_CONFIG][validatorName];
        }
        delete control[TEMPLATE_VALIDATION_CONFIG];
        delete control[VALIDATOR_CONFIG];
        this.ngOnInit();
    }
    updateOnElementClass(element) {
        var previousClassName = '';
        return function (className) {
            if (previousClassName)
                element.classList.remove(previousClassName);
            if (className)
                element.classList.add(className);
            previousClassName = className;
        };
    }
    setValidatorConfig(control) {
        if (!this.formControl) {
            this.formControl = control;
            let rxFormControl = this.formControl;
            if (rxFormControl.updateOnElementClass)
                rxFormControl.updateOnElementClass = this.updateOnElementClass(this.element);
        }
        this.subscribeMaskValidator();
        this.subscribeNumericFormatter();
        if (control[TEMPLATE_VALIDATION_CONFIG])
            this.setTemplateValidators(control);
        if (control[CONDITIONAL_VALIDATOR]) {
            this.conditionalValidator = control[CONDITIONAL_VALIDATOR];
            delete control[CONDITIONAL_VALIDATOR];
        }
    }
    validate(control) {
        this.setValidatorConfig(control);
        if (this.conditionalValidator)
            this.conditionalValidator(control);
        if (!this.isProcessed)
            this.setModelConfig(control);
        return ((this.validators && this.validators.length > 0) || this.maskProvider) ? this.validation(control) : null;
    }
    ngOnDestroy() {
        this.controls = undefined;
        let eventCount = this.eventListeners.length;
        for (var i = 0; i < eventCount; i++) {
            this.eventListeners[0]();
            this.eventListeners.splice(0, 1);
        }
        this.eventListeners = [];
        if (this.maskProvider)
            this.maskProvider.onDestroy();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxalpha", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxalphaNumeric", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxascii", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxcompare", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxcompose", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxcontains", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxcreditCard", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxdataUri", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxdifferent", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxdigit", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxemail", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxendsWith", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxeven", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxextension", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxfactor", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxfileSize", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxgreaterThanEqualTo", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxgreaterThan", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxhexColor", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxjson", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxlatitude", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxlatLong", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxleapYear", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxlessThan", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxlessThanEqualTo", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxlongitude", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxlowerCase", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxmac", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxmaxDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxmaxLength", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxmaxNumber", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxminDate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxminLength", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxminNumber", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxnumeric", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxodd", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxpassword", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxport", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxprimeNumber", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxrequired", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxrange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxrule", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxstartsWith", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxtime", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxupperCase", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxurl", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxunique", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxnotEmpty", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxcusip", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxgrid", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], RxFormControlDirective.prototype, "rxdate", void 0);
RxFormControlDirective = tslib_1.__decorate([
    Directive({
        selector: '[ngModel],[formControlName],[formControl]',
        providers: [NGMODEL_BINDING],
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        Renderer2, DecimalProvider])
], RxFormControlDirective);
export { RxFormControlDirective };
//# sourceMappingURL=data:application/json;base64,