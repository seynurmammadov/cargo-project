import { DateProvider } from "./date-provider";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { ObjectMaker } from "./object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { OPERATORS } from "../const/operators.const";
import { getConfigObject } from "../util/config-provider";
function runCondition(leftValue, rightValue, operator) {
    var result = false;
    switch (operator) {
        case OPERATORS.lessThan:
        case OPERATORS.greaterThan:
            result = leftValue > rightValue;
            break;
        case OPERATORS.lessThanEqualTo:
        case OPERATORS.greaterThanEqualTo:
            result = leftValue >= rightValue;
            break;
    }
    return result;
}
export function dateChecker(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (dateProvider.isDate(control.value) || dateProvider.isValid(control.value, config)) {
                var checkDate = dateProvider.getCompareDate(config, control);
                var currentControlValue = dateProvider.getDate(control.value);
                var isValid = operationType == AnnotationTypes.minDate ? runCondition(currentControlValue, checkDate, config.operator || OPERATORS.greaterThanEqualTo) : runCondition(checkDate, currentControlValue, config.operator || OPERATORS.lessThanEqualTo);
                if (!isValid)
                    return ObjectMaker.toJson(operationType, config, [control.value]);
            }
            else
                return ObjectMaker.toJson(operationType, config, [control.value]);
        }
    }
    return ObjectMaker.null();
}
export function validateDate(control, config, operationType) {
    config = getConfigObject(config, control);
    var dateProvider = new DateProvider();
    if (FormProvider.ProcessRule(control, config)) {
        if (RegexValidator.isNotBlank(control.value)) {
            if (!dateProvider.isDate(control.value) && !dateProvider.isValid(control.value, config)) {
                return ObjectMaker.toJson(operationType, config, [control.value]);
            }
        }
    }
    return ObjectMaker.null();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvZGF0ZS1jaGVja2VyLmZ1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLDBCQUEwQixDQUFBO0FBQ2xELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxTQUFTLFlBQVksQ0FBQyxTQUFjLEVBQUMsVUFBZSxFQUFDLFFBQWU7SUFDaEUsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFDO0lBQzVCLFFBQU8sUUFBUSxFQUFDO1FBQ1osS0FBSyxTQUFTLENBQUMsUUFBUSxDQUFDO1FBQ3hCLEtBQUssU0FBUyxDQUFDLFdBQVc7WUFDekIsTUFBTSxHQUFHLFNBQVMsR0FBRyxVQUFVLENBQUM7WUFDakMsTUFBTTtRQUNOLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxrQkFBa0I7WUFDaEMsTUFBTSxHQUFHLFNBQVMsSUFBSSxVQUFVLENBQUM7WUFDbEMsTUFBTTtLQUNUO0lBQ0QsT0FBTyxNQUFNLENBQUM7QUFDbEIsQ0FBQztBQUVELE1BQU0sVUFBVSxXQUFXLENBQUMsT0FBd0IsRUFBQyxNQUFVLEVBQUMsYUFBb0I7SUFDaEYsTUFBTSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUMsT0FBTyxDQUFDLENBQUM7SUFDekMsSUFBSSxZQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUNwQyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQzVDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xGLElBQUksU0FBUyxHQUFHLFlBQVksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM1RCxJQUFJLG1CQUFtQixHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM5RCxJQUFJLE9BQU8sR0FBRyxhQUFhLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFDLFNBQVMsRUFBQyxNQUFNLENBQUMsUUFBUSxJQUFJLFNBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBLENBQUMsQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFBO2dCQUM5TyxJQUFJLENBQUMsT0FBTztvQkFDUixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO2FBQ3hFOztnQkFDRyxPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1NBQ3hFO0tBQ0o7SUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxPQUF3QixFQUFDLE1BQVUsRUFBQyxhQUFvQjtJQUNqRixNQUFNLEdBQUcsZUFBZSxDQUFDLE1BQU0sRUFBQyxPQUFPLENBQUMsQ0FBQztJQUN6QyxJQUFJLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBQ3BDLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUMsTUFBTSxDQUFDLEVBQUU7UUFDNUMsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3BGLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUE7YUFDeEU7U0FDSjtLQUNKO0lBQ0csT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBEYXRlUHJvdmlkZXIgfSBmcm9tIFwiLi9kYXRlLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IEZvcm1Qcm92aWRlciB9IGZyb20gXCIuL2Zvcm0tcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQge09QRVJBVE9SU30gZnJvbSBcIi4uL2NvbnN0L29wZXJhdG9ycy5jb25zdFwiXHJcbmltcG9ydCB7Z2V0Q29uZmlnT2JqZWN0fSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuZnVuY3Rpb24gcnVuQ29uZGl0aW9uKGxlZnRWYWx1ZTpEYXRlLHJpZ2h0VmFsdWU6RGF0ZSxvcGVyYXRvcjpzdHJpbmcpOmJvb2xlYW57XHJcbiAgICBsZXQgcmVzdWx0OmJvb2xlYW4gID0gZmFsc2U7XHJcbiAgICBzd2l0Y2gob3BlcmF0b3Ipe1xyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmxlc3NUaGFuOlxyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuOlxyXG4gICAgICAgICByZXN1bHQgPSBsZWZ0VmFsdWUgPiByaWdodFZhbHVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgT1BFUkFUT1JTLmxlc3NUaGFuRXF1YWxUbzpcclxuICAgICAgICBjYXNlIE9QRVJBVE9SUy5ncmVhdGVyVGhhbkVxdWFsVG86XHJcbiAgICAgICAgIHJlc3VsdCA9IGxlZnRWYWx1ZSA+PSByaWdodFZhbHVlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVDaGVja2VyKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxjb25maWc6YW55LG9wZXJhdGlvblR5cGU6c3RyaW5nKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnLGNvbnRyb2wpO1xyXG4gICAgdmFyIGRhdGVQcm92aWRlciA9IG5ldyBEYXRlUHJvdmlkZXIoKTtcclxuICAgICAgaWYgKEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLGNvbmZpZykpIHtcclxuICAgICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhjb250cm9sLnZhbHVlKSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0ZVByb3ZpZGVyLmlzRGF0ZShjb250cm9sLnZhbHVlKSB8fCBkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlLGNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBjaGVja0RhdGUgPSBkYXRlUHJvdmlkZXIuZ2V0Q29tcGFyZURhdGUoY29uZmlnLGNvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRDb250cm9sVmFsdWUgPSBkYXRlUHJvdmlkZXIuZ2V0RGF0ZShjb250cm9sLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIGxldCBpc1ZhbGlkID0gb3BlcmF0aW9uVHlwZSA9PSBBbm5vdGF0aW9uVHlwZXMubWluRGF0ZSA/IHJ1bkNvbmRpdGlvbihjdXJyZW50Q29udHJvbFZhbHVlLGNoZWNrRGF0ZSxjb25maWcub3BlcmF0b3IgfHwgT1BFUkFUT1JTLmdyZWF0ZXJUaGFuRXF1YWxUbyk6IHJ1bkNvbmRpdGlvbihjaGVja0RhdGUsY3VycmVudENvbnRyb2xWYWx1ZSxjb25maWcub3BlcmF0b3IgfHwgT1BFUkFUT1JTLmxlc3NUaGFuRXF1YWxUbylcclxuICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKG9wZXJhdGlvblR5cGUsIGNvbmZpZywgW2NvbnRyb2wudmFsdWVdKVxyXG4gICAgICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ob3BlcmF0aW9uVHlwZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlRGF0ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsY29uZmlnOmFueSxvcGVyYXRpb25UeXBlOnN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZyxjb250cm9sKTtcclxuICAgIHZhciBkYXRlUHJvdmlkZXIgPSBuZXcgRGF0ZVByb3ZpZGVyKCk7XHJcbiAgICAgIGlmIChGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjb25maWcpKSB7XHJcbiAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgaWYgKCFkYXRlUHJvdmlkZXIuaXNEYXRlKGNvbnRyb2wudmFsdWUpICYmICFkYXRlUHJvdmlkZXIuaXNWYWxpZChjb250cm9sLnZhbHVlLGNvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24ob3BlcmF0aW9uVHlwZSwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG59Il19