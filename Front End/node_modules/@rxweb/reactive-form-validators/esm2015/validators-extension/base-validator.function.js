import { defaultContainer } from "../core/defaultContainer";
import { STRING } from '../const/validator.const';
import { ApplicationUtil } from '../util/app-util';
import { RX_WEB_VALIDATOR } from "../const";
export function baseValidator(config, type, validator) {
    var rxwebValidator = (control, target) => {
        if (typeof control == STRING)
            defaultContainer.init(target, 0, control, type, config, false);
        else {
            if (config && (!control.validatorConfig || !control.validatorConfig[type]))
                ApplicationUtil.configureControl(control, config, type);
            return validator(control);
        }
        return null;
    };
    Object.defineProperty(rxwebValidator, "name", { value: RX_WEB_VALIDATOR });
    return rxwebValidator;
}
export function baseAsyncValidatorExtension(config, type, validator) {
    var rxwebValidator = (control, target) => {
        if (typeof control == STRING)
            defaultContainer.init(target, 0, control, type, config, true);
        else {
            if (config && (!control.validatorConfig || !control.validatorConfig[type]))
                ApplicationUtil.configureControl(control, config, type);
            return validator(control);
        }
        return null;
    };
    Object.defineProperty(rxwebValidator, "name", { value: RX_WEB_VALIDATOR });
    return rxwebValidator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12YWxpZGF0b3IuZnVuY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsidmFsaWRhdG9ycy1leHRlbnNpb24vYmFzZS12YWxpZGF0b3IuZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDM0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFHNUMsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFXLEVBQUUsSUFBUyxFQUFFLFNBQW1CO0lBQ3JFLElBQUksY0FBYyxHQUFHLENBQUMsT0FBWSxFQUFFLE1BQWUsRUFBMEIsRUFBRTtRQUMzRSxJQUFJLE9BQU8sT0FBTyxJQUFJLE1BQU07WUFDeEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUMsS0FBSyxDQUFDLENBQUM7YUFDOUQ7WUFDQSxJQUFJLE1BQU0sSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGVBQWUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3RFLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzVELE9BQVEsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzlCO1FBQ0QsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDLENBQUE7SUFDRCxNQUFNLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRSxNQUFNLEVBQUUsRUFBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQzNFLE9BQU8sY0FBYyxDQUFDO0FBQzFCLENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsTUFBVyxFQUFFLElBQVMsRUFBRSxTQUFtQjtJQUNuRixJQUFJLGNBQWMsR0FBRyxDQUFDLE9BQVksRUFBRSxNQUFlLEVBQXNDLEVBQUU7UUFDdkYsSUFBSSxPQUFPLE9BQU8sSUFBSSxNQUFNO1lBQ3hCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQzdEO1lBQ0QsSUFBSSxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN0RSxlQUFlLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM1RCxPQUFPLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM3QjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQyxDQUFBO0lBQ0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLENBQUMsQ0FBQztJQUMzRSxPQUFPLGNBQWMsQ0FBQztBQUMxQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIFZhbGlkYXRvckZuLCBBc3luY1ZhbGlkYXRvckZuXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IGRlZmF1bHRDb250YWluZXIgfSBmcm9tIFwiLi4vY29yZS9kZWZhdWx0Q29udGFpbmVyXCJcclxuaW1wb3J0IHsgU1RSSU5HIH0gZnJvbSAnLi4vY29uc3QvdmFsaWRhdG9yLmNvbnN0JztcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSAnLi4vdXRpbC9hcHAtdXRpbCc7XHJcbmltcG9ydCB7IFJYX1dFQl9WQUxJREFUT1IgfSBmcm9tIFwiLi4vY29uc3RcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmFzZVZhbGlkYXRvcihjb25maWc6IGFueSwgdHlwZTogYW55LCB2YWxpZGF0b3I6IEZ1bmN0aW9uKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgdmFyIHJ4d2ViVmFsaWRhdG9yID0gKGNvbnRyb2w6IGFueSwgdGFyZ2V0Pzogb2JqZWN0KTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb250cm9sID09IFNUUklORylcclxuICAgICAgICAgICAgZGVmYXVsdENvbnRhaW5lci5pbml0KHRhcmdldCwgMCwgY29udHJvbCwgdHlwZSwgY29uZmlnLGZhbHNlKTtcclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnICYmICghY29udHJvbC52YWxpZGF0b3JDb25maWcgfHwgIWNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3R5cGVdKSlcclxuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uVXRpbC5jb25maWd1cmVDb250cm9sKGNvbnRyb2wsIGNvbmZpZywgdHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiAgdmFsaWRhdG9yKGNvbnRyb2wpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJ4d2ViVmFsaWRhdG9yLCBcIm5hbWVcIiwgeyB2YWx1ZTogUlhfV0VCX1ZBTElEQVRPUiB9KTtcclxuICAgIHJldHVybiByeHdlYlZhbGlkYXRvcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGJhc2VBc3luY1ZhbGlkYXRvckV4dGVuc2lvbihjb25maWc6IGFueSwgdHlwZTogYW55LCB2YWxpZGF0b3I6IEZ1bmN0aW9uKTogQXN5bmNWYWxpZGF0b3JGbiB7XHJcbiAgICB2YXIgcnh3ZWJWYWxpZGF0b3IgPSAoY29udHJvbDogYW55LCB0YXJnZXQ/OiBvYmplY3QpOiBPYnNlcnZhYmxlPHsgW2tleTogc3RyaW5nXTogYW55IH0+ID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbnRyb2wgPT0gU1RSSU5HKVxyXG4gICAgICAgICAgICBkZWZhdWx0Q29udGFpbmVyLmluaXQodGFyZ2V0LCAwLCBjb250cm9sLCB0eXBlLCBjb25maWcsIHRydWUpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoY29uZmlnICYmICghY29udHJvbC52YWxpZGF0b3JDb25maWcgfHwgIWNvbnRyb2wudmFsaWRhdG9yQ29uZmlnW3R5cGVdKSlcclxuICAgICAgICAgICAgICAgIEFwcGxpY2F0aW9uVXRpbC5jb25maWd1cmVDb250cm9sKGNvbnRyb2wsIGNvbmZpZywgdHlwZSk7XHJcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0b3IoY29udHJvbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsXHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocnh3ZWJWYWxpZGF0b3IsIFwibmFtZVwiLCB7IHZhbHVlOiBSWF9XRUJfVkFMSURBVE9SIH0pO1xyXG4gICAgcmV0dXJuIHJ4d2ViVmFsaWRhdG9yO1xyXG59XHJcbiJdfQ==