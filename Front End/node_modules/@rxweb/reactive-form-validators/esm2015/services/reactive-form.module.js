var RxReactiveFormsModule_1, ReactiveTypedFormsModule_1;
import * as tslib_1 from "tslib";
import { NgModule } from "@angular/core";
import { CommonModule, DecimalPipe } from "@angular/common";
import { FormsModule, ReactiveFormsModule, FormBuilder } from "@angular/forms";
import { RxFormBuilder } from "./rx-form-builder";
import { RxwebFormDirective } from "../directives/rx-form.directive";
import { DecimalProvider } from "../domain/element-processor/decimal.provider";
import { HtmlControlTemplateDirective } from '../directives/html-control-template.directive';
import { ControlHostDirective } from '../directives/control-host.directive';
import { RxFormControlDirective } from "../directives/template-validations/rxformcontrol.directive";
import { FileControlDirective } from "../directives/template-validations/file-control.directive";
import { ImageFileControlDirective } from "../directives/template-validations/image-file-control.directive";
import { AsyncValidationDirective } from "../directives/template-validations/async-validation.directive";
import { defaultContainer } from "../core/defaultContainer";
import { TypedFormBuilder } from "./typed-form-builder";
import { ReactiveFormConfig } from "../util/reactive-form-config";
let RxReactiveFormsModule = RxReactiveFormsModule_1 = class RxReactiveFormsModule {
    static forRoot() { return { ngModule: RxReactiveFormsModule_1, providers: [] }; }
};
RxReactiveFormsModule = RxReactiveFormsModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [RxwebFormDirective, HtmlControlTemplateDirective, ControlHostDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective, AsyncValidationDirective],
        imports: [CommonModule, FormsModule, ReactiveFormsModule],
        providers: [RxFormBuilder, DecimalProvider, DecimalPipe],
        exports: [AsyncValidationDirective, RxwebFormDirective, HtmlControlTemplateDirective, RxFormControlDirective, FileControlDirective, ImageFileControlDirective]
    })
], RxReactiveFormsModule);
export { RxReactiveFormsModule };
// Experimental
let ReactiveTypedFormsModule = ReactiveTypedFormsModule_1 = class ReactiveTypedFormsModule {
    constructor() {
        defaultContainer.isExperimental = true;
        ReactiveFormConfig.autoInstancePush = true;
    }
    static forRoot() { return { ngModule: ReactiveTypedFormsModule_1, providers: [] }; }
};
ReactiveTypedFormsModule = ReactiveTypedFormsModule_1 = tslib_1.__decorate([
    NgModule({
        declarations: [],
        imports: [CommonModule, FormsModule, ReactiveFormsModule, RxReactiveFormsModule.forRoot()],
        providers: [{ provide: FormBuilder, useClass: TypedFormBuilder }, TypedFormBuilder],
        exports: [ReactiveFormsModule, FormsModule, ReactiveFormsModule]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], ReactiveTypedFormsModule);
export { ReactiveTypedFormsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhY3RpdmUtZm9ybS5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic2VydmljZXMvcmVhY3RpdmUtZm9ybS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDL0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQTtBQUM5RSxPQUFPLEVBQUUsNEJBQTRCLEVBQUMsTUFBTSwrQ0FBK0MsQ0FBQTtBQUMzRixPQUFPLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSxzQ0FBc0MsQ0FBQTtBQUMxRSxPQUFPLEVBQUMsc0JBQXNCLEVBQUcsTUFBTSw0REFBNEQsQ0FBQTtBQUNuRyxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsTUFBTSwyREFBMkQsQ0FBQTtBQUMvRixPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxpRUFBaUUsQ0FBQTtBQUMzRyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrREFBK0QsQ0FBQTtBQUN4RyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQU9qRSxJQUFhLHFCQUFxQiw2QkFBbEMsTUFBYSxxQkFBcUI7SUFDOUIsTUFBTSxDQUFDLE9BQU8sS0FBaUQsT0FBTyxFQUFFLFFBQVEsRUFBRSx1QkFBcUIsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQzlILENBQUE7QUFGWSxxQkFBcUI7SUFOakMsUUFBUSxDQUFDO1FBQ04sWUFBWSxFQUFFLENBQUMsa0JBQWtCLEVBQUUsNEJBQTRCLEVBQUUsb0JBQW9CLEVBQUUsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUUseUJBQXlCLEVBQUUsd0JBQXdCLENBQUc7UUFDM0wsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFDLFdBQVcsRUFBRSxtQkFBbUIsQ0FBQztRQUN4RCxTQUFTLEVBQUUsQ0FBQyxhQUFhLEVBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQztRQUN2RCxPQUFPLEVBQUUsQ0FBQyx3QkFBd0IsRUFBQyxrQkFBa0IsRUFBQyw0QkFBNEIsRUFBQyxzQkFBc0IsRUFBQyxvQkFBb0IsRUFBRSx5QkFBeUIsQ0FBRTtLQUM5SixDQUFDO0dBQ1cscUJBQXFCLENBRWpDO1NBRlkscUJBQXFCO0FBSWxDLGVBQWU7QUFPZixJQUFhLHdCQUF3QixnQ0FBckMsTUFBYSx3QkFBd0I7SUFDakM7UUFDSSxnQkFBZ0IsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBQ3ZDLGtCQUFrQixDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztJQUMvQyxDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU8sS0FBb0QsT0FBTyxFQUFFLFFBQVEsRUFBRSwwQkFBd0IsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ3BJLENBQUE7QUFOWSx3QkFBd0I7SUFOcEMsUUFBUSxDQUFDO1FBQ04sWUFBWSxFQUFFLEVBQUU7UUFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxRixTQUFTLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLEVBQUUsZ0JBQWdCLENBQUM7UUFDbkYsT0FBTyxFQUFFLENBQUMsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixDQUFDO0tBQ25FLENBQUM7O0dBQ1csd0JBQXdCLENBTXBDO1NBTlksd0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIERlY2ltYWxQaXBlIH0gZnJvbSBcIkBhbmd1bGFyL2NvbW1vblwiXHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlLCBGb3JtQnVpbGRlciB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyBSeEZvcm1CdWlsZGVyIH0gZnJvbSBcIi4vcngtZm9ybS1idWlsZGVyXCI7XHJcbmltcG9ydCB7IFJ4d2ViRm9ybURpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3J4LWZvcm0uZGlyZWN0aXZlXCI7XHJcbmltcG9ydCB7IERlY2ltYWxQcm92aWRlciB9IGZyb20gXCIuLi9kb21haW4vZWxlbWVudC1wcm9jZXNzb3IvZGVjaW1hbC5wcm92aWRlclwiXHJcbmltcG9ydCB7IEh0bWxDb250cm9sVGVtcGxhdGVEaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvaHRtbC1jb250cm9sLXRlbXBsYXRlLmRpcmVjdGl2ZSdcclxuaW1wb3J0IHsgQ29udHJvbEhvc3REaXJlY3RpdmV9IGZyb20gJy4uL2RpcmVjdGl2ZXMvY29udHJvbC1ob3N0LmRpcmVjdGl2ZSdcclxuaW1wb3J0IHtSeEZvcm1Db250cm9sRGlyZWN0aXZlICB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL3J4Zm9ybWNvbnRyb2wuZGlyZWN0aXZlXCJcclxuaW1wb3J0IHtGaWxlQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ZpbGUtY29udHJvbC5kaXJlY3RpdmVcIlxyXG5pbXBvcnQgeyBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZXMvdGVtcGxhdGUtdmFsaWRhdGlvbnMvaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZVwiXHJcbmltcG9ydCB7IEFzeW5jVmFsaWRhdGlvbkRpcmVjdGl2ZSB9IGZyb20gXCIuLi9kaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2FzeW5jLXZhbGlkYXRpb24uZGlyZWN0aXZlXCJcclxuaW1wb3J0IHsgZGVmYXVsdENvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL2RlZmF1bHRDb250YWluZXJcIjtcclxuaW1wb3J0IHsgVHlwZWRGb3JtQnVpbGRlciB9IGZyb20gXCIuL3R5cGVkLWZvcm0tYnVpbGRlclwiO1xyXG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1Db25maWcgfSBmcm9tIFwiLi4vdXRpbC9yZWFjdGl2ZS1mb3JtLWNvbmZpZ1wiXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtSeHdlYkZvcm1EaXJlY3RpdmUsIEh0bWxDb250cm9sVGVtcGxhdGVEaXJlY3RpdmUsIENvbnRyb2xIb3N0RGlyZWN0aXZlLCBSeEZvcm1Db250cm9sRGlyZWN0aXZlLCBGaWxlQ29udHJvbERpcmVjdGl2ZSwgSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSwgQXN5bmNWYWxpZGF0aW9uRGlyZWN0aXZlICBdLFxyXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSxGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZV0sXHJcbiAgICBwcm92aWRlcnM6IFtSeEZvcm1CdWlsZGVyLERlY2ltYWxQcm92aWRlciwgRGVjaW1hbFBpcGVdLFxyXG4gICAgZXhwb3J0czogW0FzeW5jVmFsaWRhdGlvbkRpcmVjdGl2ZSxSeHdlYkZvcm1EaXJlY3RpdmUsSHRtbENvbnRyb2xUZW1wbGF0ZURpcmVjdGl2ZSxSeEZvcm1Db250cm9sRGlyZWN0aXZlLEZpbGVDb250cm9sRGlyZWN0aXZlICxJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIFJ4UmVhY3RpdmVGb3Jtc01vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPFJ4UmVhY3RpdmVGb3Jtc01vZHVsZT4geyByZXR1cm4geyBuZ01vZHVsZTogUnhSZWFjdGl2ZUZvcm1zTW9kdWxlLCBwcm92aWRlcnM6IFtdIH07IH1cclxufVxyXG5cclxuLy8gRXhwZXJpbWVudGFsXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtdLFxyXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGUsIFJ4UmVhY3RpdmVGb3Jtc01vZHVsZS5mb3JSb290KCldLFxyXG4gICAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBGb3JtQnVpbGRlciwgdXNlQ2xhc3M6IFR5cGVkRm9ybUJ1aWxkZXIgfSwgVHlwZWRGb3JtQnVpbGRlcl0sXHJcbiAgICBleHBvcnRzOiBbUmVhY3RpdmVGb3Jtc01vZHVsZSwgRm9ybXNNb2R1bGUsIFJlYWN0aXZlRm9ybXNNb2R1bGVdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZWFjdGl2ZVR5cGVkRm9ybXNNb2R1bGUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgZGVmYXVsdENvbnRhaW5lci5pc0V4cGVyaW1lbnRhbCA9IHRydWU7XHJcbiAgICAgICAgUmVhY3RpdmVGb3JtQ29uZmlnLmF1dG9JbnN0YW5jZVB1c2ggPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGZvclJvb3QoKTogTW9kdWxlV2l0aFByb3ZpZGVyczxSZWFjdGl2ZVR5cGVkRm9ybXNNb2R1bGU+IHsgcmV0dXJuIHsgbmdNb2R1bGU6IFJlYWN0aXZlVHlwZWRGb3Jtc01vZHVsZSwgcHJvdmlkZXJzOiBbXSB9OyB9XHJcbn1cclxuIl19