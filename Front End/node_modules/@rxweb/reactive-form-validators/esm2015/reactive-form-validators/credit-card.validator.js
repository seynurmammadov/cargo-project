import { RegexValidator } from "../util/regex-validator";
import { ObjectMaker } from "../util/object-maker";
import { getConfigObject } from "../util/config-provider";
import { AnnotationTypes } from "../core/validator.static";
import { FormProvider } from '../util/form-provider';
import { checkLength } from '../util/check-length';
import { calculate } from '../algorithm/luhn-algorithm';
export function creditCardValidator(configModel) {
    let cardDigits = {
        AmericanExpress: [15],
        DinersClub: [14, 16, 19],
        Discover: [16, 19],
        JCB: [16, 19],
        Maestro: [12, 16, 19],
        MasterCard: [16],
        Visa: [13, 16, 19]
    };
    function validate(creditCardNumber) {
        var digit = parseInt(creditCardNumber.substring(creditCardNumber.length - 1, creditCardNumber.length));
        return calculate(creditCardNumber.substring(0, creditCardNumber.length - 1)) == parseInt(String(digit)) ? !0 : !1;
    }
    function getCardProviderName(cardNumber) {
        var cardProviderName = "";
        return /^(5018|5020|5038|5612|5893|6304|6759|6761|6762|6763|0604|6390)\d+$/.test(cardNumber) ? cardProviderName = "Maestro" : /^5[1-5]/.test(cardNumber) ? cardProviderName = "MasterCard" : /^4/.test(cardNumber) ? cardProviderName = "Visa" : /^3[47]/.test(cardNumber) ? cardProviderName = "AmericanExpress" : /^(?:2131|1800|35)/.test(cardNumber) ? cardProviderName = "JCB" : /^3(?:0[0-5]|[68])/.test(cardNumber) ? cardProviderName = "DinersClub" : /^6(?:011|5)/.test(cardNumber) && (cardProviderName = "Discover"), cardProviderName;
    }
    return (control) => {
        const controlValue = control.value;
        let config = getConfigObject(configModel, control);
        const parentObject = (control.parent) ? control.parent.value : undefined;
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(controlValue)) {
                let isValid = false;
                let cardTypes = config.fieldName && parentObject[config.fieldName] ? [parentObject[config.fieldName]] : config.creditCardTypes;
                let cardType = '';
                for (let creditCardType of cardTypes) {
                    isValid = checkLength(controlValue.length, cardDigits[creditCardType]) && getCardProviderName(controlValue) == creditCardType && validate(controlValue);
                    cardType = creditCardType;
                    if (isValid)
                        break;
                }
                if (!isValid)
                    return ObjectMaker.toJson(AnnotationTypes.creditCard, config, [controlValue, cardType]);
            }
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlZGl0LWNhcmQudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInJlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9jcmVkaXQtY2FyZC52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUE7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDbEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBRXZELE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxXQUE2QjtJQUM3RCxJQUFJLFVBQVUsR0FBZ0M7UUFDMUMsZUFBZSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3JCLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3hCLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUM7UUFDbEIsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQztRQUNiLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBQ3JCLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUNoQixJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUNyQixDQUFBO0lBQ0QsU0FBUyxRQUFRLENBQUMsZ0JBQXdCO1FBQ3RDLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3ZHLE9BQU8sU0FBUyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDckgsQ0FBQztJQUVELFNBQVMsbUJBQW1CLENBQUMsVUFBaUI7UUFDMUMsSUFBSSxnQkFBZ0IsR0FBRyxFQUFFLENBQUM7UUFDMUIsT0FBTyxvRUFBb0UsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEdBQUcsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsRUFBRSxnQkFBZ0IsQ0FBQztJQUN2aEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUF3QixFQUEwQixFQUFFO1FBQ3hELE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7UUFDbkMsSUFBSSxNQUFNLEdBQUcsZUFBZSxDQUFDLFdBQVcsRUFBQyxPQUFPLENBQUMsQ0FBQztRQUNsRCxNQUFNLFlBQVksR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUN6RSxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQzNDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDekMsSUFBSSxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUNwQixJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFBO2dCQUM5SCxJQUFJLFFBQVEsR0FBVyxFQUFFLENBQUM7Z0JBQzFCLEtBQUssSUFBSSxjQUFjLElBQUksU0FBUyxFQUFFO29CQUNsQyxPQUFPLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksbUJBQW1CLENBQUMsWUFBWSxDQUFDLElBQUksY0FBYyxJQUFJLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztvQkFDeEosUUFBUSxHQUFHLGNBQWMsQ0FBQztvQkFDMUIsSUFBSSxPQUFPO3dCQUNQLE1BQU07aUJBQ2I7Z0JBQ0QsSUFBSSxDQUFDLE9BQU87b0JBQ1IsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7YUFDOUY7U0FDSjtRQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBRTlCLENBQUMsQ0FBQTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgVmFsaWRhdG9yRm4sXHJcbiAgICBBYnN0cmFjdENvbnRyb2xcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4uL3V0aWwvb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IENyZWRpdENhcmRDb25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9jcmVkaXQtY2FyZC1jb25maWdcIjtcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiXHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIH0gZnJvbSAnLi4vdXRpbC9mb3JtLXByb3ZpZGVyJztcclxuaW1wb3J0IHsgY2hlY2tMZW5ndGggfSBmcm9tICcuLi91dGlsL2NoZWNrLWxlbmd0aCdcclxuaW1wb3J0IHsgY2FsY3VsYXRlIH0gZnJvbSAnLi4vYWxnb3JpdGhtL2x1aG4tYWxnb3JpdGhtJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWRpdENhcmRWYWxpZGF0b3IoY29uZmlnTW9kZWw6IENyZWRpdENhcmRDb25maWcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICBsZXQgY2FyZERpZ2l0czogeyBba2V5OiBzdHJpbmddOiBudW1iZXJbXSB9ID0ge1xyXG4gICAgICAgIEFtZXJpY2FuRXhwcmVzczogWzE1XSxcclxuICAgICAgICBEaW5lcnNDbHViOiBbMTQsIDE2LCAxOV0sXHJcbiAgICAgICAgRGlzY292ZXI6IFsxNiwgMTldLFxyXG4gICAgICAgIEpDQjogWzE2LCAxOV0sXHJcbiAgICAgICAgTWFlc3RybzogWzEyLCAxNiwgMTldLFxyXG4gICAgICAgIE1hc3RlckNhcmQ6IFsxNl0sXHJcbiAgICAgICAgVmlzYTogWzEzLCAxNiwgMTldXHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZShjcmVkaXRDYXJkTnVtYmVyOiBzdHJpbmcpIHtcclxuICAgICAgICB2YXIgZGlnaXQgPSBwYXJzZUludChjcmVkaXRDYXJkTnVtYmVyLnN1YnN0cmluZyhjcmVkaXRDYXJkTnVtYmVyLmxlbmd0aCAtIDEsIGNyZWRpdENhcmROdW1iZXIubGVuZ3RoKSk7XHJcbiAgICAgICAgcmV0dXJuIGNhbGN1bGF0ZShjcmVkaXRDYXJkTnVtYmVyLnN1YnN0cmluZygwLCBjcmVkaXRDYXJkTnVtYmVyLmxlbmd0aCAtIDEpKSA9PSBwYXJzZUludChTdHJpbmcoZGlnaXQpKSA/ICEwIDogITFcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBnZXRDYXJkUHJvdmlkZXJOYW1lKGNhcmROdW1iZXI6c3RyaW5nKSB7XHJcbiAgICAgICAgdmFyIGNhcmRQcm92aWRlck5hbWUgPSBcIlwiO1xyXG4gICAgICAgIHJldHVybiAvXig1MDE4fDUwMjB8NTAzOHw1NjEyfDU4OTN8NjMwNHw2NzU5fDY3NjF8Njc2Mnw2NzYzfDA2MDR8NjM5MClcXGQrJC8udGVzdChjYXJkTnVtYmVyKSA/IGNhcmRQcm92aWRlck5hbWUgPSBcIk1hZXN0cm9cIiA6IC9eNVsxLTVdLy50ZXN0KGNhcmROdW1iZXIpID8gY2FyZFByb3ZpZGVyTmFtZSA9IFwiTWFzdGVyQ2FyZFwiIDogL140Ly50ZXN0KGNhcmROdW1iZXIpID8gY2FyZFByb3ZpZGVyTmFtZSA9IFwiVmlzYVwiIDogL14zWzQ3XS8udGVzdChjYXJkTnVtYmVyKSA/IGNhcmRQcm92aWRlck5hbWUgPSBcIkFtZXJpY2FuRXhwcmVzc1wiIDogL14oPzoyMTMxfDE4MDB8MzUpLy50ZXN0KGNhcmROdW1iZXIpID8gY2FyZFByb3ZpZGVyTmFtZSA9IFwiSkNCXCIgOiAvXjMoPzowWzAtNV18WzY4XSkvLnRlc3QoY2FyZE51bWJlcikgPyBjYXJkUHJvdmlkZXJOYW1lID0gXCJEaW5lcnNDbHViXCIgOiAvXjYoPzowMTF8NSkvLnRlc3QoY2FyZE51bWJlcikgJiYgKGNhcmRQcm92aWRlck5hbWUgPSBcIkRpc2NvdmVyXCIpLCBjYXJkUHJvdmlkZXJOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udHJvbFZhbHVlID0gY29udHJvbC52YWx1ZTtcclxuICAgICAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZ01vZGVsLGNvbnRyb2wpO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudE9iamVjdCA9IChjb250cm9sLnBhcmVudCkgPyBjb250cm9sLnBhcmVudC52YWx1ZSA6IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoRm9ybVByb3ZpZGVyLlByb2Nlc3NSdWxlKGNvbnRyb2wsIGNvbmZpZykpIHtcclxuICAgICAgICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGlzVmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCBjYXJkVHlwZXMgPSBjb25maWcuZmllbGROYW1lICYmIHBhcmVudE9iamVjdFtjb25maWcuZmllbGROYW1lXSA/IFtwYXJlbnRPYmplY3RbY29uZmlnLmZpZWxkTmFtZV1dIDogY29uZmlnLmNyZWRpdENhcmRUeXBlc1xyXG4gICAgICAgICAgICAgICAgbGV0IGNhcmRUeXBlOiBzdHJpbmcgPSAnJztcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNyZWRpdENhcmRUeXBlIG9mIGNhcmRUeXBlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBjaGVja0xlbmd0aChjb250cm9sVmFsdWUubGVuZ3RoLCBjYXJkRGlnaXRzW2NyZWRpdENhcmRUeXBlXSkgJiYgZ2V0Q2FyZFByb3ZpZGVyTmFtZShjb250cm9sVmFsdWUpID09IGNyZWRpdENhcmRUeXBlICYmIHZhbGlkYXRlKGNvbnRyb2xWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZFR5cGUgPSBjcmVkaXRDYXJkVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihBbm5vdGF0aW9uVHlwZXMuY3JlZGl0Q2FyZCwgY29uZmlnLCBbY29udHJvbFZhbHVlLCBjYXJkVHlwZV0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuXHJcbiAgICB9XHJcbn1cclxuIl19