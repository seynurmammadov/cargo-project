import { FormGroup, AbstractControl, AsyncValidatorFn } from "@angular/forms";
import { ResetFormType } from "../enums/reset-type";
import { FormDataConfig } from "../models/interface/form-data-config";
export declare class RxFormGroup extends FormGroup {
    private model;
    private entityObject;
    private baseObject;
    private formDataProvider;
    private _submitted;
    private _modified;
    private _isModified;
    changing: boolean;
    constructor(model: any, entityObject: {
        [key: string]: any;
    }, controls: {
        [key: string]: AbstractControl;
    }, validatorOrOpts?: any, asyncValidator?: AsyncValidatorFn | AsyncValidatorFn[] | null);
    bindPrimaryKey(modelInstance: any, jObject: {
        [key: string]: any;
    }): void;
    readonly modifiedValue: {
        [key: string]: any;
    };
    readonly isModified: boolean;
    patch(controlName?: string): void;
    isDirty(): boolean;
    resetForm(options?: {
        resetType?: ResetFormType;
        with?: string[];
        value?: {
            [key: string]: any;
        };
    }): void;
    commit(): void;
    patchModelValue(value: {
        [key: string]: any;
    }, options?: {
        onlySelf?: boolean;
        emitEvent?: boolean;
    }): void;
    getErrorSummary(onlyMessage: boolean): {
        [key: string]: any;
    };
    valueChangedSync(): void;
    refreshDisable(): void;
    bindErrorMessages(): void;
    submitted: boolean;
    readonly modelInstanceValue: any;
    readonly modelInstance: {
        [key: string]: any;
    };
    readonly controlsError: {
        [key: string]: any;
    };
    toFormData(options?: FormDataConfig): FormData;
    private processModified;
    private nestedArrayIsModified;
    setBackEndErrors(errors: {
        [key: string]: any;
    }): void;
    clearBackEndErrors(errors?: {
        [key: string]: any;
    }): void;
    private nestedFormsModification;
}
