import { defaultContainer } from '../core/defaultContainer';
import { clone, merge } from '../services/entity.service';
export function instanceProvider(instanceFunc, entityObject) {
    var instance = defaultContainer.get(instanceFunc);
    var prototype = entityObject ? entityObject.__proto__ : getInstance(instanceFunc, []).__proto__;
    if (prototype.__proto__) {
        var isLoop = false;
        do {
            isLoop = prototype.__proto__.constructor != Object;
            if (isLoop) {
                var extendClassInstance = defaultContainer.get(prototype.__proto__.constructor);
                instance = merge(clone(instance), clone(extendClassInstance));
                prototype = prototype.__proto__;
            }
        } while (isLoop);
    }
    return instance;
}
export function getInstance(model, objectArguments) {
    var classInstance = Object.create(model.prototype);
    try {
        model.apply(classInstance, objectArguments);
    }
    catch (ex) {
        ///resolution of issue https://github.com/rxweb/rxweb/issues/188
        classInstance = Reflect.construct(model, objectArguments);
    }
    return classInstance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5zdGFuY2UtcHJvdmlkZXIuZnVuY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsidXRpbC9pbnN0YW5jZS1wcm92aWRlci5mdW5jdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTFELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxZQUFpQixFQUFFLFlBQWtCO0lBQ2xFLElBQUksUUFBUSxHQUFRLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN2RCxJQUFJLFNBQVMsR0FBUSxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxZQUFZLEVBQUUsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDO0lBQ3JHLElBQUksU0FBUyxDQUFDLFNBQVMsRUFBRTtRQUNyQixJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDbkIsR0FBRztZQUNDLE1BQU0sR0FBRyxTQUFTLENBQUMsU0FBUyxDQUFDLFdBQVcsSUFBSSxNQUFNLENBQUM7WUFDbkQsSUFBSSxNQUFNLEVBQUU7Z0JBQ1IsSUFBSSxtQkFBbUIsR0FBUSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDckYsUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUUsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQTtnQkFDN0QsU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUM7YUFDbkM7U0FDSixRQUFRLE1BQU0sRUFBQztLQUVuQjtJQUNELE9BQU8sUUFBUSxDQUFDO0FBQ3BCLENBQUM7QUFHRCxNQUFNLFVBQVUsV0FBVyxDQUFDLEtBQVUsRUFBRSxlQUFzQjtJQUMxRCxJQUFJLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNsRCxJQUFHO1FBQ0MsS0FBSyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7S0FDL0M7SUFBQSxPQUFNLEVBQUUsRUFBQztRQUNOLGdFQUFnRTtRQUNoRSxhQUFhLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUMsZUFBZSxDQUFDLENBQUM7S0FDNUQ7SUFDRCxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5zdGFuY2VDb250YWluZXIgfSBmcm9tICcuLi9jb3JlL3ZhbGlkYXRvci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBkZWZhdWx0Q29udGFpbmVyIH0gZnJvbSAnLi4vY29yZS9kZWZhdWx0Q29udGFpbmVyJztcclxuaW1wb3J0IHsgY2xvbmUsIG1lcmdlIH0gZnJvbSAnLi4vc2VydmljZXMvZW50aXR5LnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluc3RhbmNlUHJvdmlkZXIoaW5zdGFuY2VGdW5jOiBhbnksIGVudGl0eU9iamVjdD86IGFueSk6IEluc3RhbmNlQ29udGFpbmVyIHtcclxuICAgIGxldCBpbnN0YW5jZTogYW55ID0gZGVmYXVsdENvbnRhaW5lci5nZXQoaW5zdGFuY2VGdW5jKTtcclxuICAgIGxldCBwcm90b3R5cGU6IGFueSA9IGVudGl0eU9iamVjdCA/IGVudGl0eU9iamVjdC5fX3Byb3RvX18gOiBnZXRJbnN0YW5jZShpbnN0YW5jZUZ1bmMsIFtdKS5fX3Byb3RvX187XHJcbiAgICBpZiAocHJvdG90eXBlLl9fcHJvdG9fXykge1xyXG4gICAgICAgIGxldCBpc0xvb3AgPSBmYWxzZTtcclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIGlzTG9vcCA9IHByb3RvdHlwZS5fX3Byb3RvX18uY29uc3RydWN0b3IgIT0gT2JqZWN0O1xyXG4gICAgICAgICAgICBpZiAoaXNMb29wKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZXh0ZW5kQ2xhc3NJbnN0YW5jZTogYW55ID0gZGVmYXVsdENvbnRhaW5lci5nZXQocHJvdG90eXBlLl9fcHJvdG9fXy5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZSA9IG1lcmdlKGNsb25lKGluc3RhbmNlKSwgY2xvbmUoZXh0ZW5kQ2xhc3NJbnN0YW5jZSkpXHJcbiAgICAgICAgICAgICAgICBwcm90b3R5cGUgPSBwcm90b3R5cGUuX19wcm90b19fO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSB3aGlsZSAoaXNMb29wKVxyXG5cclxuICAgIH1cclxuICAgIHJldHVybiBpbnN0YW5jZTtcclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnN0YW5jZShtb2RlbDogYW55LCBvYmplY3RBcmd1bWVudHM6IGFueVtdKSB7XHJcbiAgICBsZXQgY2xhc3NJbnN0YW5jZSA9IE9iamVjdC5jcmVhdGUobW9kZWwucHJvdG90eXBlKVxyXG4gICAgdHJ5e1xyXG4gICAgICAgIG1vZGVsLmFwcGx5KGNsYXNzSW5zdGFuY2UsIG9iamVjdEFyZ3VtZW50cyk7XHJcbiAgICB9Y2F0Y2goZXgpe1xyXG4gICAgICAgIC8vL3Jlc29sdXRpb24gb2YgaXNzdWUgaHR0cHM6Ly9naXRodWIuY29tL3J4d2ViL3J4d2ViL2lzc3Vlcy8xODhcclxuICAgICAgICBjbGFzc0luc3RhbmNlID0gUmVmbGVjdC5jb25zdHJ1Y3QobW9kZWwsb2JqZWN0QXJndW1lbnRzKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjbGFzc0luc3RhbmNlO1xyXG59Il19