import { FormProvider } from "./form-provider";
import { clone } from "../services/entity.service";
import { CONFIG_REQUIRED_FIELDS } from "../const/config-required-fields.const";
export function getConfigObject(config, control, configName) {
    if (configName === void 0) { configName = ''; }
    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};
}
function configProvider(control, config, configName) {
    if (config.dynamicConfig) {
        var currentConfig_1 = FormProvider.ProcessRule(control, clone(config), true);
        if (typeof currentConfig_1 != "boolean") {
            currentConfig_1.conditionalExpression = config.conditionalExpression;
            currentConfig_1.dynamicConfig = config.dynamicConfig;
            Object.keys(config).forEach(function (t) {
                if ((t != "conditionalExpression" && t != "dynamicConfig") || currentConfig_1[t] === undefined) {
                    currentConfig_1[t] = config[t];
                }
            });
            return currentConfig_1;
        }
        else
            return config;
    }
    return checkRequiredProps(config, configName);
}
function checkRequiredProps(config, configName) {
    var props = CONFIG_REQUIRED_FIELDS[configName];
    if (configName) {
        props.forEach(function (prop) {
            if (config[prop] === undefined)
                throw new Error("Pass the property of '" + prop + "' with value in the " + configName + ", otherwise it won't work.");
        });
    }
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvY29uZmlnLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQTtBQUU1QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDbEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFXLEVBQUMsT0FBVyxFQUFDLFVBQXNCO0lBQXRCLDJCQUFBLEVBQUEsZUFBc0I7SUFDMUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxTQUFTLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BHLENBQUM7QUFDRCxTQUFTLGNBQWMsQ0FBQyxPQUF1QixFQUFDLE1BQVUsRUFBQyxVQUFpQjtJQUN4RSxJQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUM7UUFDcEIsSUFBSSxlQUFhLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3hFLElBQUcsT0FBTyxlQUFhLElBQUksU0FBUyxFQUFDO1lBQzdCLGVBQWEsQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUM7WUFDbkUsZUFBYSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztnQkFDekIsSUFBRyxDQUFDLENBQUMsSUFBSSx1QkFBdUIsSUFBSSxDQUFDLElBQUksZUFBZSxDQUFDLElBQUksZUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFNLFNBQVMsRUFBQztvQkFDekYsZUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDaEM7WUFDTCxDQUFDLENBQUMsQ0FBQTtZQUNOLE9BQU8sZUFBYSxDQUFDO1NBQ3hCOztZQUNHLE9BQU8sTUFBTSxDQUFDO0tBQ3JCO0lBQ0csT0FBTyxrQkFBa0IsQ0FBQyxNQUFNLEVBQUMsVUFBVSxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUdELFNBQVMsa0JBQWtCLENBQUMsTUFBVSxFQUFDLFVBQWlCO0lBQ3BELElBQUksS0FBSyxHQUFHLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQy9DLElBQUcsVUFBVSxFQUFDO1FBQ1YsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFBLElBQUk7WUFDZCxJQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxTQUFTO2dCQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLDJCQUF5QixJQUFJLDRCQUF1QixVQUFVLCtCQUE0QixDQUFDLENBQUM7UUFDeEgsQ0FBQyxDQUFDLENBQUE7S0FDTDtJQUNELE9BQU8sTUFBTSxDQUFBO0FBQ2pCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Zvcm1Qcm92aWRlcn0gZnJvbSBcIi4vZm9ybS1wcm92aWRlclwiXHJcbmltcG9ydCB7IEFic3RyYWN0Q29udHJvbCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiXHJcbmltcG9ydCB7IGNsb25lIH0gZnJvbSBcIi4uL3NlcnZpY2VzL2VudGl0eS5zZXJ2aWNlXCJcclxuaW1wb3J0IHsgQ09ORklHX1JFUVVJUkVEX0ZJRUxEUyB9IGZyb20gXCIuLi9jb25zdC9jb25maWctcmVxdWlyZWQtZmllbGRzLmNvbnN0XCI7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRDb25maWdPYmplY3QoY29uZmlnOiBhbnksY29udHJvbDphbnksY29uZmlnTmFtZTpzdHJpbmcgPSAnJyk6IGFueSB7XHJcbiAgICByZXR1cm4gKGNvbmZpZyAhPSB1bmRlZmluZWQgJiYgY29uZmlnICE9IHRydWUpID8gY29uZmlnUHJvdmlkZXIoY29udHJvbCxjb25maWcsY29uZmlnTmFtZSkgOiB7fTtcclxufVxyXG5mdW5jdGlvbiBjb25maWdQcm92aWRlcihjb250cm9sOkFic3RyYWN0Q29udHJvbCxjb25maWc6YW55LGNvbmZpZ05hbWU6c3RyaW5nKTphbnl7XHJcbiAgICBpZihjb25maWcuZHluYW1pY0NvbmZpZyl7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRDb25maWcgPSBGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCxjbG9uZShjb25maWcpLHRydWUpXHJcbiAgICAgICAgaWYodHlwZW9mIGN1cnJlbnRDb25maWcgIT0gXCJib29sZWFuXCIpe1xyXG4gICAgICAgICAgICAgICAgY3VycmVudENvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb24gPSBjb25maWcuY29uZGl0aW9uYWxFeHByZXNzaW9uO1xyXG4gICAgICAgICAgICAgICAgY3VycmVudENvbmZpZy5keW5hbWljQ29uZmlnID0gY29uZmlnLmR5bmFtaWNDb25maWc7IFxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY29uZmlnKS5mb3JFYWNoKHQ9PntcclxuICAgICAgICAgICAgICAgICAgICBpZigodCAhPSBcImNvbmRpdGlvbmFsRXhwcmVzc2lvblwiICYmIHQgIT0gXCJkeW5hbWljQ29uZmlnXCIpIHx8IGN1cnJlbnRDb25maWdbdF0gID09PSB1bmRlZmluZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Q29uZmlnW3RdID0gY29uZmlnW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pICAgXHJcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50Q29uZmlnO1xyXG4gICAgICAgIH1lbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBjb25maWc7XHJcbiAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNoZWNrUmVxdWlyZWRQcm9wcyhjb25maWcsY29uZmlnTmFtZSk7XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBjaGVja1JlcXVpcmVkUHJvcHMoY29uZmlnOmFueSxjb25maWdOYW1lOnN0cmluZyl7XHJcbiAgICBsZXQgcHJvcHMgPSBDT05GSUdfUkVRVUlSRURfRklFTERTW2NvbmZpZ05hbWVdO1xyXG4gICAgaWYoY29uZmlnTmFtZSl7XHJcbiAgICAgICAgcHJvcHMuZm9yRWFjaChwcm9wID0+IHtcclxuICAgICAgICAgICAgaWYoY29uZmlnW3Byb3BdID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBQYXNzIHRoZSBwcm9wZXJ0eSBvZiAnJHtwcm9wfScgd2l0aCB2YWx1ZSBpbiB0aGUgJHtjb25maWdOYW1lfSwgb3RoZXJ3aXNlIGl0IHdvbid0IHdvcmsuYCk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiBjb25maWdcclxufSJdfQ==