import { RegExRule } from "./regex-rules";
const ALPHABET = "alphabet";
const DIGIT = "digit";
const CONTAINS = "contains";
const LOWERCASE = "lowerCase";
const UPPERCASE = "upperCase";
const SPECIAL_CHARACTER = "specialCharacter";
const MIN_LENGTH = "minLength";
const MAX_LENGTH = "maxLength";
export class RegexValidator {
    static isExits(value, regex) {
        return value.match(regex) != null;
    }
    static isValid(value, regex) {
        return regex.test(value);
    }
    static isNotBlank(value, isRemoveSpace = false) {
        return !isRemoveSpace ?
            (value === 0) || (value !== undefined && value !== null && value !== "") :
            (value === 0) || (value !== undefined && value !== null && String(value).trim() !== "");
    }
    static isValidPassword(passwordValidation, value) {
        let isValid = false;
        let jObject = {};
        let keyName = "status";
        let objectProperties = Object.getOwnPropertyNames(passwordValidation);
        for (let propertyName of objectProperties) {
            switch (propertyName) {
                case ALPHABET:
                    isValid = RegexValidator.isExits(value, RegExRule.alphaExits);
                    keyName = ALPHABET;
                    break;
                case DIGIT:
                    isValid = RegexValidator.isValid(value, RegExRule.isDigitExits);
                    keyName = DIGIT;
                    break;
                case CONTAINS:
                    isValid = value.indexOf(passwordValidation[CONTAINS]) != -1;
                    keyName = CONTAINS;
                    break;
                case LOWERCASE:
                    isValid = RegexValidator.isValid(value, RegExRule.lowerCase);
                    keyName = LOWERCASE;
                    break;
                case UPPERCASE:
                    isValid = RegexValidator.isValid(value, RegExRule.upperCase);
                    keyName = UPPERCASE;
                    break;
                case SPECIAL_CHARACTER:
                    isValid = RegexValidator.isExits(value, RegExRule.specialCharacter);
                    keyName = SPECIAL_CHARACTER;
                    break;
                case MIN_LENGTH:
                    isValid = value.length >= passwordValidation[propertyName];
                    keyName = MIN_LENGTH;
                    break;
                case MAX_LENGTH:
                    isValid = value.length <= passwordValidation[propertyName];
                    keyName = MAX_LENGTH;
                    break;
            }
            if (!isValid)
                break;
        }
        return { isValid: isValid, keyName: keyName };
    }
    static isZero(value) {
        return value == 0;
    }
    static commaRegex() {
        return new RegExp(",", "g");
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnZXgtdmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvcmVnZXgtdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUMsTUFBTSxRQUFRLEdBQVcsVUFBVSxDQUFDO0FBQ3BDLE1BQU0sS0FBSyxHQUFXLE9BQU8sQ0FBQztBQUM5QixNQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFDcEMsTUFBTSxTQUFTLEdBQVcsV0FBVyxDQUFDO0FBQ3RDLE1BQU0sU0FBUyxHQUFXLFdBQVcsQ0FBQztBQUN0QyxNQUFNLGlCQUFpQixHQUFXLGtCQUFrQixDQUFDO0FBQ3JELE1BQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQztBQUN2QyxNQUFNLFVBQVUsR0FBVyxXQUFXLENBQUM7QUFHdkMsTUFBTSxPQUFPLGNBQWM7SUFDdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFVLEVBQUUsS0FBYTtRQUNwQyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ3RDLENBQUM7SUFDRCxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQVUsRUFBRSxLQUFhO1FBQ3BDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUgsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFVLEVBQUUsZ0JBQXlCLEtBQUs7UUFDMUQsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzFFLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQTtJQUMzRixDQUFDO0lBQ0MsTUFBTSxDQUFDLGVBQWUsQ0FBQyxrQkFBc0MsRUFBRSxLQUFhO1FBQ3hFLElBQUksT0FBTyxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLE9BQU8sR0FBMkIsRUFBRSxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN2QixJQUFJLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1FBQ3JFLEtBQUssSUFBSSxZQUFZLElBQUksZ0JBQWdCLEVBQUU7WUFDdkMsUUFBUSxZQUFZLEVBQUU7Z0JBQ2xCLEtBQUssUUFBUTtvQkFDVCxPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUM5RCxPQUFPLEdBQUcsUUFBUSxDQUFDO29CQUNuQixNQUFNO2dCQUNWLEtBQUssS0FBSztvQkFDTixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUNoRSxPQUFPLEdBQUcsS0FBSyxDQUFDO29CQUNoQixNQUFNO2dCQUNWLEtBQUssUUFBUTtvQkFDVCxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUM1RCxPQUFPLEdBQUcsUUFBUSxDQUFDO29CQUNuQixNQUFNO2dCQUNWLEtBQUssU0FBUztvQkFDVixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM3RCxPQUFPLEdBQUcsU0FBUyxDQUFDO29CQUNwQixNQUFNO2dCQUNWLEtBQUssU0FBUztvQkFDVixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM3RCxPQUFPLEdBQUcsU0FBUyxDQUFDO29CQUNwQixNQUFNO2dCQUNWLEtBQUssaUJBQWlCO29CQUNsQixPQUFPLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7b0JBQ3BFLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQztvQkFDNUIsTUFBTTtnQkFDVixLQUFLLFVBQVU7b0JBQ1gsT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksa0JBQWtCLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzNELE9BQU8sR0FBRyxVQUFVLENBQUM7b0JBQ3JCLE1BQU07Z0JBQ1YsS0FBSyxVQUFVO29CQUNYLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO29CQUMzRCxPQUFPLEdBQUcsVUFBVSxDQUFDO29CQUNyQixNQUFNO2FBQ2I7WUFDRCxJQUFJLENBQUMsT0FBTztnQkFDUixNQUFNO1NBQ2I7UUFDRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUE7SUFDakQsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBVTtRQUNwQixPQUFPLEtBQUssSUFBSSxDQUFDLENBQUM7SUFDdEIsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVO1FBQ2IsT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFzc3dvcmRWYWxpZGF0aW9uIH0gZnJvbSBcIi4uL21vZGVscy9wYXNzd29yZC12YWxpZGF0aW9uLm1vZGVsXCI7XHJcbmltcG9ydCB7IFJlZ0V4UnVsZSB9IGZyb20gXCIuL3JlZ2V4LXJ1bGVzXCI7XHJcblxyXG5jb25zdCBBTFBIQUJFVDogc3RyaW5nID0gXCJhbHBoYWJldFwiO1xyXG5jb25zdCBESUdJVDogc3RyaW5nID0gXCJkaWdpdFwiO1xyXG5jb25zdCBDT05UQUlOUzogc3RyaW5nID0gXCJjb250YWluc1wiO1xyXG5jb25zdCBMT1dFUkNBU0U6IHN0cmluZyA9IFwibG93ZXJDYXNlXCI7XHJcbmNvbnN0IFVQUEVSQ0FTRTogc3RyaW5nID0gXCJ1cHBlckNhc2VcIjtcclxuY29uc3QgU1BFQ0lBTF9DSEFSQUNURVI6IHN0cmluZyA9IFwic3BlY2lhbENoYXJhY3RlclwiO1xyXG5jb25zdCBNSU5fTEVOR1RIOiBzdHJpbmcgPSBcIm1pbkxlbmd0aFwiO1xyXG5jb25zdCBNQVhfTEVOR1RIOiBzdHJpbmcgPSBcIm1heExlbmd0aFwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBSZWdleFZhbGlkYXRvciB7XHJcbiAgICBzdGF0aWMgaXNFeGl0cyh2YWx1ZTogYW55LCByZWdleDogUmVnRXhwKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hdGNoKHJlZ2V4KSAhPSBudWxsO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzVmFsaWQodmFsdWU6IGFueSwgcmVnZXg6IFJlZ0V4cCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiByZWdleC50ZXN0KHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgc3RhdGljIGlzTm90QmxhbmsodmFsdWU6IGFueSwgaXNSZW1vdmVTcGFjZTogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gIWlzUmVtb3ZlU3BhY2UgP1xyXG4gICAgICAodmFsdWUgPT09IDApIHx8ICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSBcIlwiKSA6XHJcbiAgICAgICh2YWx1ZSA9PT0gMCkgfHwgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgU3RyaW5nKHZhbHVlKS50cmltKCkgIT09IFwiXCIpXHJcbiAgfVxyXG4gICAgc3RhdGljIGlzVmFsaWRQYXNzd29yZChwYXNzd29yZFZhbGlkYXRpb246IFBhc3N3b3JkVmFsaWRhdGlvbiwgdmFsdWU6IHN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgICAgIGxldCBpc1ZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgbGV0IGpPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcclxuICAgICAgICBsZXQga2V5TmFtZSA9IFwic3RhdHVzXCI7XHJcbiAgICAgICAgbGV0IG9iamVjdFByb3BlcnRpZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwYXNzd29yZFZhbGlkYXRpb24pXHJcbiAgICAgICAgZm9yIChsZXQgcHJvcGVydHlOYW1lIG9mIG9iamVjdFByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChwcm9wZXJ0eU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQUxQSEFCRVQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IFJlZ2V4VmFsaWRhdG9yLmlzRXhpdHModmFsdWUsIFJlZ0V4UnVsZS5hbHBoYUV4aXRzKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gQUxQSEFCRVQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIERJR0lUOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlLCBSZWdFeFJ1bGUuaXNEaWdpdEV4aXRzKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gRElHSVQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENPTlRBSU5TOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWx1ZS5pbmRleE9mKHBhc3N3b3JkVmFsaWRhdGlvbltDT05UQUlOU10pICE9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBDT05UQUlOUztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgTE9XRVJDQVNFOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKHZhbHVlLCBSZWdFeFJ1bGUubG93ZXJDYXNlKTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gTE9XRVJDQVNFO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBVUFBFUkNBU0U6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQodmFsdWUsIFJlZ0V4UnVsZS51cHBlckNhc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGtleU5hbWUgPSBVUFBFUkNBU0U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFNQRUNJQUxfQ0hBUkFDVEVSOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBSZWdleFZhbGlkYXRvci5pc0V4aXRzKHZhbHVlLCBSZWdFeFJ1bGUuc3BlY2lhbENoYXJhY3Rlcik7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IFNQRUNJQUxfQ0hBUkFDVEVSO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBNSU5fTEVOR1RIOlxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB2YWx1ZS5sZW5ndGggPj0gcGFzc3dvcmRWYWxpZGF0aW9uW3Byb3BlcnR5TmFtZV07XHJcbiAgICAgICAgICAgICAgICAgICAga2V5TmFtZSA9IE1JTl9MRU5HVEg7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE1BWF9MRU5HVEg6XHJcbiAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IHZhbHVlLmxlbmd0aCA8PSBwYXNzd29yZFZhbGlkYXRpb25bcHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICBrZXlOYW1lID0gTUFYX0xFTkdUSDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHsgaXNWYWxpZDogaXNWYWxpZCwga2V5TmFtZToga2V5TmFtZSB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGlzWmVybyh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09IDA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbW1hUmVnZXgoKTogUmVnRXhwIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIixcIiwgXCJnXCIpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==