import { RegexValidator } from "../util/regex-validator";
import { RegExRule } from "../util/regex-rules";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { FormProvider } from '../util/form-provider';
import { ApplicationUtil } from '../util/app-util';
import { getConfigObject } from "../util/config-provider";
export function factorValidator(configModel) {
    function positiveFactors(dividend, value) {
        let isPositive = false;
        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {
            if (dividend % index === 0) {
                if (index == value)
                    isPositive = true;
                if (dividend / index !== index)
                    if ((dividend / index) == value)
                        isPositive = true;
                if (isPositive)
                    break;
            }
        }
        return isPositive;
    }
    return (control) => {
        let config = getConfigObject(configModel, control);
        const dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
        const dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {
                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))
                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);
            }
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJyZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvZmFjdG9yLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxXQUF5QjtJQUV2RCxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSztRQUN0QyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDeEUsSUFBSSxRQUFRLEdBQUcsS0FBSyxLQUFLLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxLQUFLLElBQUksS0FBSztvQkFDaEIsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDcEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxLQUFLLEtBQUs7b0JBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksS0FBSzt3QkFDN0IsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxVQUFVO29CQUNaLE1BQU07YUFDVDtTQUNGO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUFrQixFQUEwQixFQUFFO1FBQ3BELElBQUksTUFBTSxHQUFHLGVBQWUsQ0FBQyxXQUFXLEVBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsTUFBTSxhQUFhLEdBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUE7UUFDdkksTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQzdGLElBQUksWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxjQUFjLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFO2dCQUM1RCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDcEgsT0FBTyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7YUFDOUU7U0FDRjtRQUNELE9BQU8sV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzVCLENBQUMsQ0FBQTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEZvcm1Hcm91cCxcclxuICBWYWxpZGF0b3JGbixcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IFJlZ0V4UnVsZSB9IGZyb20gXCIuLi91dGlsL3JlZ2V4LXJ1bGVzXCI7XHJcbmltcG9ydCB7IE9iamVjdE1ha2VyIH0gZnJvbSBcIi4uL3V0aWwvb2JqZWN0LW1ha2VyXCI7XHJcbmltcG9ydCB7IEZhY3RvckNvbmZpZyB9IGZyb20gXCIuLi9tb2RlbHMvY29uZmlnL2ZhY3Rvci1jb25maWdcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQgeyBGb3JtUHJvdmlkZXIgfSBmcm9tICcuLi91dGlsL2Zvcm0tcHJvdmlkZXInO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tICcuLi91dGlsL2FwcC11dGlsJztcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5leHBvcnQgZnVuY3Rpb24gZmFjdG9yVmFsaWRhdG9yKGNvbmZpZ01vZGVsOiBGYWN0b3JDb25maWcpOiBWYWxpZGF0b3JGbiB7XHJcblxyXG4gIGZ1bmN0aW9uIHBvc2l0aXZlRmFjdG9ycyhkaXZpZGVuZCwgdmFsdWUpIHtcclxuICAgIGxldCBpc1Bvc2l0aXZlID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBpbmRleCA9IDE7IGluZGV4IDw9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KGRpdmlkZW5kKSk7IGluZGV4ICs9IDEpIHtcclxuICAgICAgaWYgKGRpdmlkZW5kICUgaW5kZXggPT09IDApIHtcclxuICAgICAgICBpZiAoaW5kZXggPT0gdmFsdWUpXHJcbiAgICAgICAgICBpc1Bvc2l0aXZlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoZGl2aWRlbmQgLyBpbmRleCAhPT0gaW5kZXgpXHJcbiAgICAgICAgICBpZiAoKGRpdmlkZW5kIC8gaW5kZXgpID09IHZhbHVlKVxyXG4gICAgICAgICAgICBpc1Bvc2l0aXZlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoaXNQb3NpdGl2ZSlcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNQb3NpdGl2ZTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoY29udHJvbDogRm9ybUdyb3VwKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XHJcbiAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZ01vZGVsLGNvbnRyb2wpO1xyXG4gICAgY29uc3QgZGl2aWRlbmRGaWVsZDogYW55ID0gKGNvbnRyb2wucGFyZW50ICYmIGNvbmZpZy5maWVsZE5hbWUpID8gQXBwbGljYXRpb25VdGlsLmdldEZvcm1Db250cm9sKGNvbmZpZy5maWVsZE5hbWUsIGNvbnRyb2wpIDogdW5kZWZpbmVkXHJcbiAgICBjb25zdCBkaXZpZGVuZCA9IChjb25maWcuZmllbGROYW1lICYmIGRpdmlkZW5kRmllbGQpID8gZGl2aWRlbmRGaWVsZC52YWx1ZSA6IGNvbmZpZy5kaXZpZGVuZDtcclxuICAgIGlmIChGb3JtUHJvdmlkZXIuUHJvY2Vzc1J1bGUoY29udHJvbCwgY29uZmlnKSkge1xyXG4gICAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhjb250cm9sLnZhbHVlKSAmJiBkaXZpZGVuZCA+IDApIHtcclxuICAgICAgICBpZiAoIVJlZ2V4VmFsaWRhdG9yLmlzVmFsaWQoY29udHJvbC52YWx1ZSwgUmVnRXhSdWxlLm9ubHlEaWdpdCkgfHwgIXBvc2l0aXZlRmFjdG9ycyhkaXZpZGVuZCwgcGFyc2VJbnQoY29udHJvbC52YWx1ZSkpKVxyXG4gICAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihBbm5vdGF0aW9uVHlwZXMuZmFjdG9yLCBjb25maWcsIFtjb250cm9sLnZhbHVlXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBPYmplY3RNYWtlci5udWxsKCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==