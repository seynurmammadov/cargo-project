import { RegexValidator } from '../util/regex-validator';
var OBJECT = "object";
var BOOLEAN = "boolean";
var FormDataProvider = /** @class */ (function () {
    function FormDataProvider() {
    }
    FormDataProvider.prototype.convertToFormData = function (jObject, options) {
        return this.convertFormData(jObject, undefined, undefined, options);
    };
    FormDataProvider.prototype.convertFormData = function (jObject, currentFormData, parentKey, options) {
        var _this = this;
        var formData = currentFormData || new FormData();
        var propName = '';
        for (var columnName in jObject) {
            propName = !parentKey ? columnName : parentKey + "[" + columnName + "]";
            if (Array.isArray(jObject[columnName])) {
                jObject[columnName].forEach(function (row, index) {
                    propName = columnName + "[" + index + "]";
                    if (typeof row === OBJECT)
                        _this.convertFormData(row, formData, propName, options);
                    else
                        _this.nonObjectValueBind(row, formData, propName, options);
                });
            }
            else if (jObject[columnName] !== null && !(jObject[columnName] instanceof Date) && typeof jObject[columnName] === OBJECT && !(jObject[columnName] instanceof File || jObject[columnName] instanceof FileList)) {
                this.convertFormData(jObject[columnName], formData, propName, options);
            }
            else {
                this.nonObjectValueBind(jObject[columnName], formData, propName, options);
            }
        }
        return formData;
    };
    FormDataProvider.prototype.nonObjectValueBind = function (value, formData, propName, options) {
        if (typeof value === BOOLEAN) {
            var formValue = value ? true : false;
            formData.append(propName, formValue);
        }
        else if (value instanceof FileList) {
            for (var i = 0; i < value.length; i++) {
                formData.append(options && options.excludeImageIndex && value.length === 1 ? propName : propName + "[" + i + "]", value.item(i));
            }
        }
        else {
            if (RegexValidator.isNotBlank(value))
                formData.append(propName, value);
        }
    };
    return FormDataProvider;
}());
export { FormDataProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1kYXRhLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImRvbWFpbi9mb3JtLWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBRXhELElBQU0sTUFBTSxHQUFXLFFBQVEsQ0FBQztBQUNoQyxJQUFNLE9BQU8sR0FBVyxTQUFTLENBQUM7QUFDbEM7SUFBQTtJQTBDQSxDQUFDO0lBeENHLDRDQUFpQixHQUFqQixVQUFrQixPQUErQixFQUFFLE9BQXdCO1FBQ3ZFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUMsU0FBUyxFQUFDLFNBQVMsRUFBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsMENBQWUsR0FBZixVQUFnQixPQUErQixFQUFFLGVBQTBCLEVBQUUsU0FBa0IsRUFBRSxPQUF3QjtRQUF6SCxpQkFvQkM7UUFuQkcsSUFBSSxRQUFRLEdBQUcsZUFBZSxJQUFJLElBQUksUUFBUSxFQUFFLENBQUM7UUFDakQsSUFBSSxRQUFRLEdBQVUsRUFBRSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxVQUFVLElBQUksT0FBTyxFQUFFO1lBQzVCLFFBQVEsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBSSxTQUFTLFNBQUksVUFBVSxNQUFHLENBQUM7WUFDbkUsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO2dCQUNwQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFFLEtBQUs7b0JBQ25DLFFBQVEsR0FBTSxVQUFVLFNBQUksS0FBSyxNQUFHLENBQUM7b0JBQ3JDLElBQUksT0FBTyxHQUFHLEtBQUssTUFBTTt3QkFDckIsS0FBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzs7d0JBRXZELEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBQyxPQUFPLENBQUMsQ0FBQztnQkFDakUsQ0FBQyxDQUFDLENBQUE7YUFDTDtpQkFBTSxJQUFJLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxJQUFJLENBQUMsSUFBSSxPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxNQUFNLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsWUFBWSxJQUFJLElBQUksT0FBTyxDQUFDLFVBQVUsQ0FBQyxZQUFZLFFBQVEsQ0FBQyxFQUFFO2dCQUM3TSxJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBQyxRQUFRLEVBQUMsUUFBUSxFQUFDLE9BQU8sQ0FBQyxDQUFBO2FBQ3RFO2lCQUFNO2dCQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUM3RTtTQUNKO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVELDZDQUFrQixHQUFsQixVQUFtQixLQUFVLEVBQUUsUUFBa0IsRUFBRSxRQUFnQixFQUFFLE9BQXdCO1FBQ3pGLElBQUksT0FBTyxLQUFLLEtBQUssT0FBTyxFQUFFO1lBQzFCLElBQUksU0FBUyxHQUFRLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDMUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDeEM7YUFBTSxJQUFJLEtBQUssWUFBWSxRQUFRLEVBQUU7WUFDbEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ25DLFFBQVEsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBSSxRQUFRLFNBQUksQ0FBQyxNQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQy9IO1NBQ0o7YUFBTTtZQUNILElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQ2hDLFFBQVEsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQztJQUVMLHVCQUFDO0FBQUQsQ0FBQyxBQTFDRCxJQTBDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSAnLi4vdXRpbC9yZWdleC12YWxpZGF0b3InXHJcbmltcG9ydCB7IEZvcm1EYXRhQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2ludGVyZmFjZS9mb3JtLWRhdGEtY29uZmlnJztcclxuY29uc3QgT0JKRUNUOiBzdHJpbmcgPSBcIm9iamVjdFwiO1xyXG5jb25zdCBCT09MRUFOOiBzdHJpbmcgPSBcImJvb2xlYW5cIjtcclxuZXhwb3J0IGNsYXNzIEZvcm1EYXRhUHJvdmlkZXJ7XHJcblxyXG4gICAgY29udmVydFRvRm9ybURhdGEoak9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgb3B0aW9ucz86IEZvcm1EYXRhQ29uZmlnKTpGb3JtRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVydEZvcm1EYXRhKGpPYmplY3QsdW5kZWZpbmVkLHVuZGVmaW5lZCxvcHRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBjb252ZXJ0Rm9ybURhdGEoak9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY3VycmVudEZvcm1EYXRhPzogRm9ybURhdGEsIHBhcmVudEtleT86IHN0cmluZywgb3B0aW9ucz86IEZvcm1EYXRhQ29uZmlnKTpGb3JtRGF0YSB7XHJcbiAgICAgICAgbGV0IGZvcm1EYXRhID0gY3VycmVudEZvcm1EYXRhIHx8IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgIGxldCBwcm9wTmFtZTpzdHJpbmcgPSAnJztcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGpPYmplY3QpIHtcclxuICAgICAgICAgICAgcHJvcE5hbWUgPSAhcGFyZW50S2V5ID8gY29sdW1uTmFtZSA6IGAke3BhcmVudEtleX1bJHtjb2x1bW5OYW1lfV1gO1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShqT2JqZWN0W2NvbHVtbk5hbWVdKSkge1xyXG4gICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXS5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWUgPSBgJHtjb2x1bW5OYW1lfVske2luZGV4fV1gO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygcm93ID09PSBPQkpFQ1QpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydEZvcm1EYXRhKHJvdywgZm9ybURhdGEsIHByb3BOYW1lLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9uT2JqZWN0VmFsdWVCaW5kKHJvdywgZm9ybURhdGEsIHByb3BOYW1lLG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChqT2JqZWN0W2NvbHVtbk5hbWVdICE9PSBudWxsICYmICEoak9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIERhdGUpICYmIHR5cGVvZiBqT2JqZWN0W2NvbHVtbk5hbWVdID09PSBPQkpFQ1QgJiYgIShqT2JqZWN0W2NvbHVtbk5hbWVdIGluc3RhbmNlb2YgRmlsZSB8fCBqT2JqZWN0W2NvbHVtbk5hbWVdIGluc3RhbmNlb2YgRmlsZUxpc3QpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRGb3JtRGF0YShqT2JqZWN0W2NvbHVtbk5hbWVdLGZvcm1EYXRhLHByb3BOYW1lLG9wdGlvbnMpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vbk9iamVjdFZhbHVlQmluZChqT2JqZWN0W2NvbHVtbk5hbWVdLCBmb3JtRGF0YSwgcHJvcE5hbWUsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmb3JtRGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBub25PYmplY3RWYWx1ZUJpbmQodmFsdWU6IGFueSwgZm9ybURhdGE6IEZvcm1EYXRhLCBwcm9wTmFtZTogc3RyaW5nLCBvcHRpb25zPzogRm9ybURhdGFDb25maWcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBCT09MRUFOKSB7XHJcbiAgICAgICAgICAgIGxldCBmb3JtVmFsdWU6IGFueSA9IHZhbHVlID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJvcE5hbWUsIGZvcm1WYWx1ZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEZpbGVMaXN0KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChvcHRpb25zICYmIG9wdGlvbnMuZXhjbHVkZUltYWdlSW5kZXggJiYgdmFsdWUubGVuZ3RoID09PSAxID8gcHJvcE5hbWUgOiBgJHtwcm9wTmFtZX1bJHtpfV1gLCB2YWx1ZS5pdGVtKGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChSZWdleFZhbGlkYXRvci5pc05vdEJsYW5rKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChwcm9wTmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn0iXX0=