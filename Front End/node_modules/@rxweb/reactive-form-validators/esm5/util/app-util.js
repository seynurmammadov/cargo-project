import * as tslib_1 from "tslib";
import { FormArray } from "@angular/forms";
import { RxFormArray } from "../services/rx-form-array";
import { NumericValueType } from '../enums';
import { ReactiveFormConfig } from "./reactive-form-config";
var MODEL_INSTANCE_VALUE = "modelInstanceValue";
var ApplicationUtil = /** @class */ (function () {
    function ApplicationUtil() {
    }
    ApplicationUtil.getParentObjectValue = function (control) {
        if (control.parent) {
            var parent_1 = this.parentObjectValue(control.parent);
            return parent_1.value;
        }
        return {};
    };
    ApplicationUtil.getParentModelInstanceValue = function (control) {
        if (control.parent) {
            var parent_2 = this.parentObjectValue(control.parent);
            return parent_2[MODEL_INSTANCE_VALUE];
        }
        return {};
    };
    ApplicationUtil.getRootFormGroup = function (control) {
        if (control.parent) {
            return this.getRootFormGroup(control.parent);
        }
        return control;
    };
    ApplicationUtil.getParentControl = function (control) {
        if (control.parent) {
            var parent_3 = this.parentObjectValue(control.parent);
            return parent_3;
        }
        return control;
    };
    ApplicationUtil.getFormControlName = function (control) {
        var controlName = '';
        if (control.parent) {
            for (var formControlName in control.parent.controls) {
                if (control.parent.controls[formControlName] == control) {
                    controlName = formControlName;
                    break;
                }
            }
        }
        return controlName;
    };
    ApplicationUtil.getParentFormArray = function (control) {
        if (control.parent && !(control.parent instanceof FormArray || control.parent instanceof RxFormArray)) {
            var parent_4 = this.getParentFormArray(control.parent);
            return parent_4;
        }
        return control.parent;
    };
    ApplicationUtil.toLower = function (value) {
        if (value)
            return String(value).toLowerCase();
        return value;
    };
    ApplicationUtil.getControl = function (fieldName, formGroup) {
        var splitText = fieldName.split('.');
        if (splitText.length > 1) {
            var formControl = formGroup;
            splitText.forEach(function (name, index) { formControl = formControl.controls[name]; });
            return formControl;
        }
        else
            return formGroup.controls[fieldName];
    };
    ApplicationUtil.getFormControl = function (fieldName, control) {
        var splitText = fieldName.split('.');
        if (splitText.length > 1 && control.parent) {
            var formControl = this.getParentControl(control);
            splitText.forEach(function (name, index) { formControl = formControl.controls[name]; });
            return formControl;
        }
        return (control.parent) ? control.parent.get([fieldName]) : undefined;
    };
    ApplicationUtil.parentObjectValue = function (control) {
        if (!control.parent)
            return control;
        else
            control = this.parentObjectValue(control.parent);
        return control;
    };
    ApplicationUtil.isNumeric = function (value) {
        return (value - parseFloat(value) + 1) >= 0;
    };
    ApplicationUtil.notEqualTo = function (primaryValue, secondaryValue) {
        var firstValue = (primaryValue === undefined || primaryValue === null) ? "" : primaryValue;
        var secondValue = (secondaryValue === undefined || secondaryValue === null) ? "" : secondaryValue;
        if (firstValue instanceof Date && secondValue instanceof Date)
            return +firstValue != +secondValue;
        return (firstValue != secondValue);
    };
    ApplicationUtil.numericValidation = function (allowDecimal, acceptValue) {
        var decimalSymbol;
        if (ReactiveFormConfig && ReactiveFormConfig.number) {
            decimalSymbol = (ReactiveFormConfig.json && ReactiveFormConfig.json.allowDecimalSymbol) ? ReactiveFormConfig.json.allowDecimalSymbol : ReactiveFormConfig.number.decimalSymbol;
        }
        else {
            decimalSymbol = ".";
        }
        acceptValue = (acceptValue == undefined) ? NumericValueType.PositiveNumber : acceptValue;
        var regex = /^[0-9]+$/;
        switch (acceptValue) {
            case NumericValueType.PositiveNumber:
                regex = (!allowDecimal) ? /^[0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[0-9\.]+$/ : /^[0-9\,]+$/;
                break;
            case NumericValueType.NegativeNumber:
                regex = (!allowDecimal) ? /^[-][0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[-][0-9\.]+$/ : /^[-][0-9\,]+$/;
                break;
            case NumericValueType.Both:
                regex = (!allowDecimal) ? /^[-|+]?[0-9]+$/ : (decimalSymbol == "." || decimalSymbol == undefined) ? /^[-|+]?[0-9\.]+$/ : /^[-|+]?[0-9\,]+$/;
                break;
        }
        return regex;
    };
    ApplicationUtil.configureControl = function (control, config, type) {
        if (!control.validatorConfig) {
            var jObject = {};
            jObject[type] = config;
            Object.assign(control, { validatorConfig: jObject });
        }
        else
            control.validatorConfig[type] = config;
    };
    ApplicationUtil.lowerCaseWithTrim = function (value) {
        return typeof value === "string" ? value.toLowerCase().trim() : String(value).toLowerCase().trim();
    };
    /** Check if a value is an object */
    ApplicationUtil.isObject = function (value) {
        return Object.prototype.toString.call(value) === '[object Object]';
    };
    /** Check if a value is an object */
    ApplicationUtil.isArray = function (value) {
        return Array.isArray(value);
    };
    ApplicationUtil.cloneValue = function (value) {
        return ApplicationUtil.isObject(value) ? ApplicationUtil.isArray(value) ? tslib_1.__spread(value) : tslib_1.__assign({}, value) : value;
    };
    return ApplicationUtil;
}());
export { ApplicationUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLXV0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsidXRpbC9hcHAtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUE4QixTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGdCQUFnQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQzFDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELElBQU0sb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7QUFDbEQ7SUFBQTtJQXdKQSxDQUFDO0lBdkpVLG9DQUFvQixHQUEzQixVQUE0QixPQUF3QjtRQUNoRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxRQUFNLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUNuRCxPQUFPLFFBQU0sQ0FBQyxLQUFLLENBQUM7U0FDdkI7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFTSwyQ0FBMkIsR0FBbEMsVUFBbUMsT0FBd0I7UUFDdkQsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQ2hCLElBQUksUUFBTSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDbkQsT0FBTyxRQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUN2QztRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVNLGdDQUFnQixHQUF2QixVQUF3QixPQUF1QjtRQUM3QyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzlDO1FB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QUFELENBQUMsQUF4SkQsSUF3SkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIEZvcm1Hcm91cCwgRm9ybUFycmF5IH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IFJ4Rm9ybUFycmF5IH0gZnJvbSBcIi4uL3NlcnZpY2VzL3J4LWZvcm0tYXJyYXlcIjtcclxuaW1wb3J0IHtOdW1lcmljVmFsdWVUeXBlIH0gZnJvbSAnLi4vZW51bXMnXHJcbmltcG9ydCB7IFJlYWN0aXZlRm9ybUNvbmZpZyB9IGZyb20gXCIuL3JlYWN0aXZlLWZvcm0tY29uZmlnXCI7XHJcbmNvbnN0IE1PREVMX0lOU1RBTkNFX1ZBTFVFID0gXCJtb2RlbEluc3RhbmNlVmFsdWVcIjtcclxuZXhwb3J0IGNsYXNzIEFwcGxpY2F0aW9uVXRpbHtcclxuICAgIHN0YXRpYyBnZXRQYXJlbnRPYmplY3RWYWx1ZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIDp7IFtrZXk6c3RyaW5nXTphbnl9IHtcclxuICAgICAgICBpZiAoY29udHJvbC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgbGV0IHBhcmVudCA9IHRoaXMucGFyZW50T2JqZWN0VmFsdWUoY29udHJvbC5wYXJlbnQpXHJcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnQudmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0UGFyZW50TW9kZWxJbnN0YW5jZVZhbHVlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgICAgIGlmIChjb250cm9sLnBhcmVudCkge1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnRPYmplY3RWYWx1ZShjb250cm9sLnBhcmVudClcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudFtNT0RFTF9JTlNUQU5DRV9WQUxVRV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0Um9vdEZvcm1Hcm91cChjb250cm9sOkFic3RyYWN0Q29udHJvbCk6Rm9ybUdyb3Vwe1xyXG4gICAgICBpZiAoY29udHJvbC5wYXJlbnQpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRSb290Rm9ybUdyb3VwKGNvbnRyb2wucGFyZW50KTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gPEZvcm1Hcm91cD5jb250cm9sO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGdldFBhcmVudENvbnRyb2woY29udHJvbDpBYnN0cmFjdENvbnRyb2wpe1xyXG4gICAgICAgIGlmIChjb250cm9sLnBhcmVudCkge1xyXG4gICAgICAgICAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnRPYmplY3RWYWx1ZShjb250cm9sLnBhcmVudClcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2w7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEZvcm1Db250cm9sTmFtZShjb250cm9sOkFic3RyYWN0Q29udHJvbCl7XHJcbiAgICAgICAgbGV0IGNvbnRyb2xOYW1lOnN0cmluZyA9ICcnO1xyXG4gICAgICAgIGlmKGNvbnRyb2wucGFyZW50KXtcclxuICAgICAgICAgIGZvcih2YXIgZm9ybUNvbnRyb2xOYW1lIGluIGNvbnRyb2wucGFyZW50LmNvbnRyb2xzKXtcclxuICAgICAgICAgICAgaWYoY29udHJvbC5wYXJlbnQuY29udHJvbHNbZm9ybUNvbnRyb2xOYW1lXSA9PSBjb250cm9sKXtcclxuICAgICAgICAgICAgICBjb250cm9sTmFtZSA9IGZvcm1Db250cm9sTmFtZTtcclxuICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgcmV0dXJuIGNvbnRyb2xOYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQYXJlbnRGb3JtQXJyYXkoY29udHJvbDpBYnN0cmFjdENvbnRyb2wpe1xyXG4gICAgICAgIGlmIChjb250cm9sLnBhcmVudCAmJiAhKGNvbnRyb2wucGFyZW50IGluc3RhbmNlb2YgRm9ybUFycmF5IHx8IGNvbnRyb2wucGFyZW50IGluc3RhbmNlb2YgUnhGb3JtQXJyYXkpKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudEZvcm1BcnJheShjb250cm9sLnBhcmVudClcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2wucGFyZW50O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0b0xvd2VyKHZhbHVlKXtcclxuICAgICAgICBpZih2YWx1ZSlcclxuICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRDb250cm9sKGZpZWxkTmFtZTpzdHJpbmcsZm9ybUdyb3VwOkZvcm1Hcm91cCl7XHJcbiAgICAgIGxldCBzcGxpdFRleHQgPSBmaWVsZE5hbWUuc3BsaXQoJy4nKTtcclxuICAgICAgaWYoc3BsaXRUZXh0Lmxlbmd0aCA+IDEpe1xyXG4gICAgICAgIHZhciBmb3JtQ29udHJvbDphbnkgPSBmb3JtR3JvdXA7XHJcbiAgICAgICAgc3BsaXRUZXh0LmZvckVhY2goKG5hbWUsaW5kZXgpPT57IGZvcm1Db250cm9sID0gZm9ybUNvbnRyb2wuY29udHJvbHNbbmFtZV19KVxyXG4gICAgICAgIHJldHVybiBmb3JtQ29udHJvbDtcclxuICAgICAgfWVsc2VcclxuICAgICAgcmV0dXJuIGZvcm1Hcm91cC5jb250cm9sc1tmaWVsZE5hbWVdO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0Rm9ybUNvbnRyb2woZmllbGROYW1lOnN0cmluZyxjb250cm9sOkFic3RyYWN0Q29udHJvbCl7XHJcbiAgICAgICAgbGV0IHNwbGl0VGV4dCA9IGZpZWxkTmFtZS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgaWYoc3BsaXRUZXh0Lmxlbmd0aCA+IDEgJiYgY29udHJvbC5wYXJlbnQpe1xyXG4gICAgICAgICAgdmFyIGZvcm1Db250cm9sOmFueSA9IHRoaXMuZ2V0UGFyZW50Q29udHJvbChjb250cm9sKTtcclxuICAgICAgICAgIHNwbGl0VGV4dC5mb3JFYWNoKChuYW1lLGluZGV4KT0+eyBmb3JtQ29udHJvbCA9IGZvcm1Db250cm9sLmNvbnRyb2xzW25hbWVdfSlcclxuICAgICAgICAgIHJldHVybiBmb3JtQ29udHJvbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICByZXR1cm4gKGNvbnRyb2wucGFyZW50KSA/IGNvbnRyb2wucGFyZW50LmdldChbZmllbGROYW1lXSkgOiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgcGFyZW50T2JqZWN0VmFsdWUoY29udHJvbDogRm9ybUdyb3VwIHwgRm9ybUFycmF5KTogRm9ybUdyb3VwIHwgRm9ybUFycmF5IHtcclxuICAgICAgICBpZiAoIWNvbnRyb2wucGFyZW50KVxyXG4gICAgICAgICAgICByZXR1cm4gY29udHJvbDtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIGNvbnRyb2wgPSB0aGlzLnBhcmVudE9iamVjdFZhbHVlKGNvbnRyb2wucGFyZW50KVxyXG4gICAgICAgIHJldHVybiBjb250cm9sXHJcbiAgICB9XHJcblxyXG4gICAgXHJcblxyXG4gICAgc3RhdGljIGlzTnVtZXJpYyh2YWx1ZTphbnkpe1xyXG4gICAgICAgcmV0dXJuICh2YWx1ZSAtIHBhcnNlRmxvYXQodmFsdWUpICsgMSkgPj0gMDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBub3RFcXVhbFRvKHByaW1hcnlWYWx1ZTogYW55LCBzZWNvbmRhcnlWYWx1ZTogYW55KSB7XHJcbiAgICBsZXQgZmlyc3RWYWx1ZSA9IChwcmltYXJ5VmFsdWUgPT09IHVuZGVmaW5lZCB8fCBwcmltYXJ5VmFsdWUgPT09IG51bGwpID8gXCJcIiA6IHByaW1hcnlWYWx1ZTtcclxuICAgIGxldCBzZWNvbmRWYWx1ZSA9IChzZWNvbmRhcnlWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHNlY29uZGFyeVZhbHVlID09PSBudWxsKSA/IFwiXCIgOiBzZWNvbmRhcnlWYWx1ZTtcclxuICAgIGlmKGZpcnN0VmFsdWUgaW5zdGFuY2VvZiBEYXRlICYmIHNlY29uZFZhbHVlIGluc3RhbmNlb2YgRGF0ZSlcclxuICAgICAgICByZXR1cm4gK2ZpcnN0VmFsdWUgIT0gK3NlY29uZFZhbHVlO1xyXG4gICAgcmV0dXJuIChmaXJzdFZhbHVlICE9IHNlY29uZFZhbHVlKVxyXG4gIH1cclxuXHJcbiAgICBzdGF0aWMgbnVtZXJpY1ZhbGlkYXRpb24oYWxsb3dEZWNpbWFsOmJvb2xlYW4sIGFjY2VwdFZhbHVlOk51bWVyaWNWYWx1ZVR5cGUpIHtcclxuICAgICAgbGV0IGRlY2ltYWxTeW1ib2w6c3RyaW5nO1xyXG4gICAgICBpZihSZWFjdGl2ZUZvcm1Db25maWcgJiYgUmVhY3RpdmVGb3JtQ29uZmlnLm51bWJlcil7XHJcbiAgICAgICAgZGVjaW1hbFN5bWJvbCA9IChSZWFjdGl2ZUZvcm1Db25maWcuanNvbiAmJiBSZWFjdGl2ZUZvcm1Db25maWcuanNvbi5hbGxvd0RlY2ltYWxTeW1ib2wpID8gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uYWxsb3dEZWNpbWFsU3ltYm9sIDogIFJlYWN0aXZlRm9ybUNvbmZpZy5udW1iZXIuZGVjaW1hbFN5bWJvbDtcclxuICAgICAgfWVsc2V7XHJcbiAgICAgICAgZGVjaW1hbFN5bWJvbCA9IFwiLlwiO1xyXG4gICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgYWNjZXB0VmFsdWUgPSAoYWNjZXB0VmFsdWUgPT0gdW5kZWZpbmVkKSA/IE51bWVyaWNWYWx1ZVR5cGUuUG9zaXRpdmVOdW1iZXIgOiBhY2NlcHRWYWx1ZTtcclxuICAgICAgICBsZXQgcmVnZXggPSAvXlswLTldKyQvO1xyXG4gICAgICAgIHN3aXRjaChhY2NlcHRWYWx1ZSl7XHJcbiAgICAgICAgICAgIGNhc2UgTnVtZXJpY1ZhbHVlVHlwZS5Qb3NpdGl2ZU51bWJlcjpcclxuICAgICAgICAgICAgICByZWdleCA9ICghYWxsb3dEZWNpbWFsKSA/IC9eWzAtOV0rJC8gOiAoZGVjaW1hbFN5bWJvbCA9PSBcIi5cIiAgfHwgZGVjaW1hbFN5bWJvbCA9PSB1bmRlZmluZWQpID8gL15bMC05XFwuXSskLyA6IC9eWzAtOVxcLF0rJC87XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICBOdW1lcmljVmFsdWVUeXBlLk5lZ2F0aXZlTnVtYmVyOlxyXG4gICAgICAgICAgICAgICAgcmVnZXggPSAoIWFsbG93RGVjaW1hbCkgPyAvXlstXVswLTldKyQvIDogKGRlY2ltYWxTeW1ib2wgPT0gXCIuXCIgfHwgZGVjaW1hbFN5bWJvbCA9PSB1bmRlZmluZWQpPyAgL15bLV1bMC05XFwuXSskLyA6IC9eWy1dWzAtOVxcLF0rJC87XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIE51bWVyaWNWYWx1ZVR5cGUuQm90aCA6XHJcbiAgICAgICAgICAgICAgICByZWdleCA9ICghYWxsb3dEZWNpbWFsKSA/IC9eWy18K10/WzAtOV0rJC8gOiAoZGVjaW1hbFN5bWJvbCA9PSBcIi5cIiB8fCBkZWNpbWFsU3ltYm9sID09IHVuZGVmaW5lZCkgPyAgL15bLXwrXT9bMC05XFwuXSskLyA6IC9eWy18K10/WzAtOVxcLF0rJC87XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgcmV0dXJuIHJlZ2V4O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjb25maWd1cmVDb250cm9sKGNvbnRyb2w6YW55LGNvbmZpZzphbnksdHlwZTpzdHJpbmcpe1xyXG4gICAgICAgICAgaWYoIWNvbnRyb2wudmFsaWRhdG9yQ29uZmlnKXtcclxuICAgICAgICAgICAgbGV0IGpPYmplY3Q9IHt9O1xyXG4gICAgICAgICAgICBqT2JqZWN0W3R5cGVdID0gY29uZmlnO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGNvbnRyb2wse3ZhbGlkYXRvckNvbmZpZzpqT2JqZWN0fSlcclxuICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICBjb250cm9sLnZhbGlkYXRvckNvbmZpZ1t0eXBlXSA9IGNvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbG93ZXJDYXNlV2l0aFRyaW0odmFsdWU6c3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpIDogU3RyaW5nKHZhbHVlKS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQ2hlY2sgaWYgYSB2YWx1ZSBpcyBhbiBvYmplY3QgKi9cclxuICAgIHN0YXRpYyBpc09iamVjdCh2YWx1ZTogYW55KTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBDaGVjayBpZiBhIHZhbHVlIGlzIGFuIG9iamVjdCAqL1xyXG4gICAgc3RhdGljIGlzQXJyYXkodmFsdWU6IGFueSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2xvbmVWYWx1ZSh2YWx1ZTogYW55KTogYW55IHtcclxuICAgICAgICByZXR1cm4gQXBwbGljYXRpb25VdGlsLmlzT2JqZWN0KHZhbHVlKSA/IEFwcGxpY2F0aW9uVXRpbC5pc0FycmF5KHZhbHVlKSA/IFsuLi52YWx1ZV0gOiB7Li4udmFsdWV9IDogdmFsdWU7XHJcbiAgICB9XHJcbn1cclxuIl19