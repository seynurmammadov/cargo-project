import { FormProvider } from "./form-provider";
import { clone } from "../services/entity.service";
import { CONFIG_REQUIRED_FIELDS } from "../const/config-required-fields.const";
export function getConfigObject(config, control, configName = '') {
    return (config != undefined && config != true) ? configProvider(control, config, configName) : {};
}
function configProvider(control, config, configName) {
    if (config.dynamicConfig) {
        let currentConfig = FormProvider.ProcessRule(control, clone(config), true);
        if (typeof currentConfig != "boolean") {
            currentConfig.conditionalExpression = config.conditionalExpression;
            currentConfig.dynamicConfig = config.dynamicConfig;
            Object.keys(config).forEach(t => {
                if ((t != "conditionalExpression" && t != "dynamicConfig") || currentConfig[t] === undefined) {
                    currentConfig[t] = config[t];
                }
            });
            return currentConfig;
        }
        else
            return config;
    }
    return checkRequiredProps(config, configName);
}
function checkRequiredProps(config, configName) {
    let props = CONFIG_REQUIRED_FIELDS[configName];
    if (configName) {
        props.forEach(prop => {
            if (config[prop] === undefined)
                throw new Error(`Pass the property of '${prop}' with value in the ${configName}, otherwise it won't work.`);
        });
    }
    return config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLXByb3ZpZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvY29uZmlnLXByb3ZpZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQTtBQUU1QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDbEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsTUFBTSxVQUFVLGVBQWUsQ0FBQyxNQUFXLEVBQUMsT0FBVyxFQUFDLGFBQW9CLEVBQUU7SUFDMUUsT0FBTyxDQUFDLE1BQU0sSUFBSSxTQUFTLElBQUksTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFDLE1BQU0sRUFBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ3BHLENBQUM7QUFDRCxTQUFTLGNBQWMsQ0FBQyxPQUF1QixFQUFDLE1BQVUsRUFBQyxVQUFpQjtJQUN4RSxJQUFHLE1BQU0sQ0FBQyxhQUFhLEVBQUM7UUFDcEIsSUFBSSxhQUFhLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksQ0FBQyxDQUFBO1FBQ3hFLElBQUcsT0FBTyxhQUFhLElBQUksU0FBUyxFQUFDO1lBQzdCLGFBQWEsQ0FBQyxxQkFBcUIsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUM7WUFDbkUsYUFBYSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDO1lBQ25ELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQSxFQUFFO2dCQUMzQixJQUFHLENBQUMsQ0FBQyxJQUFJLHVCQUF1QixJQUFJLENBQUMsSUFBSSxlQUFlLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLEtBQU0sU0FBUyxFQUFDO29CQUN6RixhQUFhLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztZQUNMLENBQUMsQ0FBQyxDQUFBO1lBQ04sT0FBTyxhQUFhLENBQUM7U0FDeEI7O1lBQ0csT0FBTyxNQUFNLENBQUM7S0FDckI7SUFDRyxPQUFPLGtCQUFrQixDQUFDLE1BQU0sRUFBQyxVQUFVLENBQUMsQ0FBQztBQUNyRCxDQUFDO0FBR0QsU0FBUyxrQkFBa0IsQ0FBQyxNQUFVLEVBQUMsVUFBaUI7SUFDcEQsSUFBSSxLQUFLLEdBQUcsc0JBQXNCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDL0MsSUFBRyxVQUFVLEVBQUM7UUFDVixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLFNBQVM7Z0JBQ3JCLE1BQU0sSUFBSSxLQUFLLENBQUMseUJBQXlCLElBQUksdUJBQXVCLFVBQVUsNEJBQTRCLENBQUMsQ0FBQztRQUN4SCxDQUFDLENBQUMsQ0FBQTtLQUNMO0lBQ0QsT0FBTyxNQUFNLENBQUE7QUFDakIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Rm9ybVByb3ZpZGVyfSBmcm9tIFwiLi9mb3JtLXByb3ZpZGVyXCJcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCJcclxuaW1wb3J0IHsgY2xvbmUgfSBmcm9tIFwiLi4vc2VydmljZXMvZW50aXR5LnNlcnZpY2VcIlxyXG5pbXBvcnQgeyBDT05GSUdfUkVRVUlSRURfRklFTERTIH0gZnJvbSBcIi4uL2NvbnN0L2NvbmZpZy1yZXF1aXJlZC1maWVsZHMuY29uc3RcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbmZpZ09iamVjdChjb25maWc6IGFueSxjb250cm9sOmFueSxjb25maWdOYW1lOnN0cmluZyA9ICcnKTogYW55IHtcclxuICAgIHJldHVybiAoY29uZmlnICE9IHVuZGVmaW5lZCAmJiBjb25maWcgIT0gdHJ1ZSkgPyBjb25maWdQcm92aWRlcihjb250cm9sLGNvbmZpZyxjb25maWdOYW1lKSA6IHt9O1xyXG59XHJcbmZ1bmN0aW9uIGNvbmZpZ1Byb3ZpZGVyKGNvbnRyb2w6QWJzdHJhY3RDb250cm9sLGNvbmZpZzphbnksY29uZmlnTmFtZTpzdHJpbmcpOmFueXtcclxuICAgIGlmKGNvbmZpZy5keW5hbWljQ29uZmlnKXtcclxuICAgICAgICBsZXQgY3VycmVudENvbmZpZyA9IEZvcm1Qcm92aWRlci5Qcm9jZXNzUnVsZShjb250cm9sLGNsb25lKGNvbmZpZyksdHJ1ZSlcclxuICAgICAgICBpZih0eXBlb2YgY3VycmVudENvbmZpZyAhPSBcImJvb2xlYW5cIil7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29uZmlnLmNvbmRpdGlvbmFsRXhwcmVzc2lvbiA9IGNvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50Q29uZmlnLmR5bmFtaWNDb25maWcgPSBjb25maWcuZHluYW1pY0NvbmZpZzsgXHJcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcpLmZvckVhY2godD0+e1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKCh0ICE9IFwiY29uZGl0aW9uYWxFeHByZXNzaW9uXCIgJiYgdCAhPSBcImR5bmFtaWNDb25maWdcIikgfHwgY3VycmVudENvbmZpZ1t0XSAgPT09IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb25maWdbdF0gPSBjb25maWdbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkgICBcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRDb25maWc7XHJcbiAgICAgICAgfWVsc2VcclxuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZztcclxuICAgIH1cclxuICAgICAgICByZXR1cm4gY2hlY2tSZXF1aXJlZFByb3BzKGNvbmZpZyxjb25maWdOYW1lKTtcclxufVxyXG5cclxuXHJcbmZ1bmN0aW9uIGNoZWNrUmVxdWlyZWRQcm9wcyhjb25maWc6YW55LGNvbmZpZ05hbWU6c3RyaW5nKXtcclxuICAgIGxldCBwcm9wcyA9IENPTkZJR19SRVFVSVJFRF9GSUVMRFNbY29uZmlnTmFtZV07XHJcbiAgICBpZihjb25maWdOYW1lKXtcclxuICAgICAgICBwcm9wcy5mb3JFYWNoKHByb3AgPT4ge1xyXG4gICAgICAgICAgICBpZihjb25maWdbcHJvcF0gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFBhc3MgdGhlIHByb3BlcnR5IG9mICcke3Byb3B9JyB3aXRoIHZhbHVlIGluIHRoZSAke2NvbmZpZ05hbWV9LCBvdGhlcndpc2UgaXQgd29uJ3Qgd29yay5gKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbmZpZ1xyXG59Il19