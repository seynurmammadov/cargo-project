import * as tslib_1 from "tslib";
import { RegexValidator } from "../util/regex-validator";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { FormProvider } from '../util/form-provider';
import { ApplicationUtil } from '../util/app-util';
import { getConfigObject } from "../util/config-provider";
export function uniqueValidator(configModel) {
    var setTimeoutFunc = function (invalidateControls, controlValues) {
        var timeOut = setTimeout(function () {
            invalidateControls.forEach(function (t) {
                var isMatched = controlValues.filter(function (x) { return x == t.value; })[0];
                if (!isMatched)
                    t.updateValueAndValidity();
            });
            clearTimeout(timeOut);
        }, 200);
    };
    var additionalValidation = function (config, fieldName, formGroup, formArray, currentValue) {
        var indexOf = formArray.controls.indexOf(formGroup);
        var formArrayValue = [];
        if (indexOf != -1) {
            formArray.value.forEach(function (t, i) {
                if (indexOf != i)
                    formArrayValue.push(t);
            });
            return config.additionalValidation(currentValue, indexOf, fieldName, formGroup.value, formArrayValue);
        }
        return false;
    };
    return function (control) {
        var e_1, _a;
        var config = getConfigObject(configModel, control);
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value)) {
                var formArray = ApplicationUtil.getParentFormArray(control);
                var parentFormGroup = control.parent ? control.parent : undefined;
                var invalidateControls = [];
                var controlValues = [];
                if (formArray && parentFormGroup) {
                    var currentValue = control.value;
                    var fieldName_1 = ApplicationUtil.getFormControlName(control);
                    var isMatched = false;
                    var _loop_1 = function (formGroup) {
                        if (formGroup != parentFormGroup) {
                            isMatched = (ApplicationUtil.toLower(formGroup.controls[fieldName_1].value) == ApplicationUtil.toLower(currentValue) && !(formGroup.controls[fieldName_1].errors && formGroup.controls[fieldName_1].errors[AnnotationTypes.unique]));
                            if (formGroup.controls[fieldName_1].errors && formGroup.controls[fieldName_1].errors[AnnotationTypes.unique]) {
                                matchedControl = formArray.controls.filter(function (t) { return t.controls[fieldName_1] != formGroup.controls[fieldName_1] && ApplicationUtil.toLower(t.controls[fieldName_1].value) == ApplicationUtil.toLower(formGroup.controls[fieldName_1].value); })[0];
                                if (!matchedControl)
                                    invalidateControls.push(formGroup.controls[fieldName_1]);
                            }
                            else
                                controlValues.push(formGroup.controls[fieldName_1].value);
                        }
                        if (isMatched)
                            return "break";
                    };
                    var matchedControl;
                    try {
                        for (var _b = tslib_1.__values(formArray.controls), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var formGroup = _c.value;
                            var state_1 = _loop_1(formGroup);
                            if (state_1 === "break")
                                break;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (invalidateControls.length > 0)
                        setTimeoutFunc(invalidateControls, controlValues);
                    var validation = false;
                    if (config.additionalValidation) {
                        validation = additionalValidation(config, fieldName_1, parentFormGroup, formArray, currentValue);
                    }
                    if (isMatched && !validation)
                        return ObjectMaker.toJson(AnnotationTypes.unique, config, [control.value]);
                }
            }
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,