import { AnnotationTypes } from "../core/validator.static";
import { IBAN_COUNTRY_CODE_REGEX } from "../const/iban-country-wise-regex.const";
import { getConfigObject } from "../util/config-provider";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { ObjectMaker } from "../util/object-maker";
function hasValidIbanFormat(value, countryCode) {
    var strippedStr = value.replace(/[\s\-]+/gi, '').toUpperCase();
    var isoCountryCode = countryCode || strippedStr.slice(0, 2).toUpperCase();
    return (isoCountryCode in IBAN_COUNTRY_CODE_REGEX) &&
        IBAN_COUNTRY_CODE_REGEX[isoCountryCode].test(strippedStr);
}
function hasValidIbanChecksum(str) {
    var strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic
    var rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
    var alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, function (char) { return char.charCodeAt(0) - 55; });
    var remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g)
        .reduce(function (acc, value) { return Number(acc + value) % 97; }, '');
    return remainder === 1;
}
export function ibanValidator(configModel) {
    return function (control) {
        var config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(hasValidIbanFormat(control.value, config.countryCode) && hasValidIbanChecksum(control.value)))
                return ObjectMaker.toJson(AnnotationTypes.iban, config, [control.value, config.countryCode]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWJhbi52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2liYW4udmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELFNBQVMsa0JBQWtCLENBQUMsS0FBWSxFQUFDLFdBQWtCO0lBQ3ZELElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pFLElBQU0sY0FBYyxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUU1RSxPQUFPLENBQUMsY0FBYyxJQUFJLHVCQUF1QixDQUFDO1FBQzlDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxHQUFHO0lBQzdCLElBQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsNENBQTRDO0lBQy9HLElBQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBTSwyQkFBMkIsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUF2QixDQUF1QixDQUFDLENBQUM7SUFFbEcsSUFBTSxTQUFTLEdBQUcsMkJBQTJCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztTQUMxRCxNQUFNLENBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSyxJQUFLLE9BQUEsTUFBTSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQXhCLENBQXdCLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFFMUQsT0FBTyxTQUFTLEtBQUssQ0FBQyxDQUFDO0FBQzNCLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLFdBQXVCO0lBQ2pELE9BQU8sVUFBQyxPQUF3QjtRQUM1QixJQUFJLE1BQU0sR0FBZSxlQUFlLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQy9ELElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsRUFBRTtZQUM3QyxJQUFJLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQy9GLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDcEc7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQyxDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBWYWxpZGF0b3JGbixcclxuICBBYnN0cmFjdENvbnRyb2xcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHsgSUJBTkNvbmZpZyB9IGZyb20gXCIuLi9tb2RlbHMvY29uZmlnL2liYW4tY29uZmlnXCI7XHJcbmltcG9ydCB7IElCQU5fQ09VTlRSWV9DT0RFX1JFR0VYIH0gZnJvbSBcIi4uL2NvbnN0L2liYW4tY291bnRyeS13aXNlLXJlZ2V4LmNvbnN0XCI7XHJcbmltcG9ydCB7IGdldENvbmZpZ09iamVjdCB9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBWYWxpZGF0b3JWYWx1ZUNoZWNrZXIgfSBmcm9tIFwiLi4vdXRpbC92YWxpZGF0b3ItdmFsdWUtY2hlY2tlclwiO1xyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuLi91dGlsL29iamVjdC1tYWtlclwiO1xyXG5cclxuZnVuY3Rpb24gaGFzVmFsaWRJYmFuRm9ybWF0KHZhbHVlOnN0cmluZyxjb3VudHJ5Q29kZTpzdHJpbmcpIHtcclxuICAgIGNvbnN0IHN0cmlwcGVkU3RyID0gdmFsdWUucmVwbGFjZSgvW1xcc1xcLV0rL2dpLCAnJykudG9VcHBlckNhc2UoKTtcclxuICAgIGNvbnN0IGlzb0NvdW50cnlDb2RlID0gY291bnRyeUNvZGUgfHwgc3RyaXBwZWRTdHIuc2xpY2UoMCwgMikudG9VcHBlckNhc2UoKTtcclxuXHJcbiAgICByZXR1cm4gKGlzb0NvdW50cnlDb2RlIGluIElCQU5fQ09VTlRSWV9DT0RFX1JFR0VYKSAmJlxyXG4gICAgICAgIElCQU5fQ09VTlRSWV9DT0RFX1JFR0VYW2lzb0NvdW50cnlDb2RlXS50ZXN0KHN0cmlwcGVkU3RyKTtcclxufVxyXG5cclxuZnVuY3Rpb24gaGFzVmFsaWRJYmFuQ2hlY2tzdW0oc3RyKSB7XHJcbiAgICBjb25zdCBzdHJpcHBlZFN0ciA9IHN0ci5yZXBsYWNlKC9bXkEtWjAtOV0rL2dpLCAnJykudG9VcHBlckNhc2UoKTsgLy8gS2VlcCBvbmx5IGRpZ2l0cyBhbmQgQS1aIGxhdGluIGFscGhhYmV0aWNcclxuICAgIGNvbnN0IHJlYXJyYW5nZWQgPSBzdHJpcHBlZFN0ci5zbGljZSg0KSArIHN0cmlwcGVkU3RyLnNsaWNlKDAsIDQpO1xyXG4gICAgY29uc3QgYWxwaGFDYXBzUmVwbGFjZWRXaXRoRGlnaXRzID0gcmVhcnJhbmdlZC5yZXBsYWNlKC9bQS1aXS9nLCBjaGFyID0+IGNoYXIuY2hhckNvZGVBdCgwKSAtIDU1KTtcclxuXHJcbiAgICBjb25zdCByZW1haW5kZXIgPSBhbHBoYUNhcHNSZXBsYWNlZFdpdGhEaWdpdHMubWF0Y2goL1xcZHsxLDd9L2cpXHJcbiAgICAgICAgLnJlZHVjZSgoYWNjLCB2YWx1ZSkgPT4gTnVtYmVyKGFjYyArIHZhbHVlKSAlIDk3LCAnJyk7XHJcblxyXG4gICAgcmV0dXJuIHJlbWFpbmRlciA9PT0gMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGliYW5WYWxpZGF0b3IoY29uZmlnTW9kZWw6IElCQU5Db25maWcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPT4ge1xyXG4gICAgICAgIGxldCBjb25maWc6IElCQU5Db25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnTW9kZWwsIGNvbnRyb2wpO1xyXG4gICAgICAgIGlmIChWYWxpZGF0b3JWYWx1ZUNoZWNrZXIucGFzcyhjb250cm9sLCBjb25maWcpKSB7XHJcbiAgICAgICAgICAgIGlmICghKGhhc1ZhbGlkSWJhbkZvcm1hdChjb250cm9sLnZhbHVlLCBjb25maWcuY291bnRyeUNvZGUpICYmIGhhc1ZhbGlkSWJhbkNoZWNrc3VtKGNvbnRyb2wudmFsdWUpKSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24oQW5ub3RhdGlvblR5cGVzLmliYW4sIGNvbmZpZywgW2NvbnRyb2wudmFsdWUsIGNvbmZpZy5jb3VudHJ5Q29kZV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG4gIH1cclxufVxyXG4iXX0=