{"version":3,"file":"missing-translation-handler.d.ts","sources":["missing-translation-handler.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { TranslateService } from \"./translate.service\";\r\nexport interface MissingTranslationHandlerParams {\r\n    /**\r\n     * the key that's missing in translation files\r\n     */\r\n    key: string;\r\n    /**\r\n     * an instance of the service that was unable to translate the key.\r\n     */\r\n    translateService: TranslateService;\r\n    /**\r\n     * interpolation params that were passed along for translating the given key.\r\n     */\r\n    interpolateParams?: Object;\r\n}\r\nexport declare abstract class MissingTranslationHandler {\r\n    /**\r\n     * A function that handles missing translations.\r\n     *\r\n     * @param params context for resolving a missing translation\r\n     * @returns a value or an observable\r\n     * If it returns a value, then this value is used.\r\n     * If it return an observable, the value returned by this observable will be used (except if the method was \"instant\").\r\n     * If it doesn't return then the key will be used as a value\r\n     */\r\n    abstract handle(params: MissingTranslationHandlerParams): any;\r\n}\r\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\r\nexport declare class FakeMissingTranslationHandler implements MissingTranslationHandler {\r\n    handle(params: MissingTranslationHandlerParams): string;\r\n}\r\n"]}