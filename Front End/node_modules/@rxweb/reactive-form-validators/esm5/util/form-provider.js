import { Linq } from './linq';
import { ApplicationUtil } from './app-util';
import { RxFormGroup } from "../services/rx-form-group";
var FormProvider = /** @class */ (function () {
    function FormProvider() {
    }
    FormProvider.ProcessRule = function (control, config, isDynamicConfig) {
        if (isDynamicConfig === void 0) { isDynamicConfig = false; }
        if (config && config.expressionProcessed)
            return true;
        var formGroupValue = ApplicationUtil.getParentObjectValue(control);
        var parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;
        var modelInstance = undefined;
        if (control.parent && control.parent instanceof RxFormGroup)
            modelInstance = control.parent.modelInstance;
        if (parentObject) {
            this.updateFormControlValue(parentObject, control.parent.controls, control, config);
            this.forDisableUpdate(parentObject, config);
        }
        else if (config.conditionalExpression)
            return false;
        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);
    };
    FormProvider.updateFormControlValue = function (parentObject, controls, control, config) {
        for (var controlName in parentObject) {
            if (!(parentObject[controlName] instanceof Object))
                if (controls[controlName] === control) {
                    parentObject[controlName] = control.value;
                    break;
                }
        }
    };
    FormProvider.forDisableUpdate = function (parentObject, config) {
        if (config.disableConfig)
            Object.keys(config.disableConfig).forEach(function (column) {
                parentObject[column] = config.disableConfig[column];
            });
    };
    return FormProvider;
}());
export { FormProvider };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ1dGlsL2Zvcm0tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM5QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUV2RDtJQUFBO0lBb0NBLENBQUM7SUFoQ1Usd0JBQVcsR0FBbEIsVUFBbUIsT0FBd0IsRUFBRSxNQUFXLEVBQUUsZUFBZ0M7UUFBaEMsZ0NBQUEsRUFBQSx1QkFBZ0M7UUFDdEYsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLG1CQUFtQjtZQUNwQyxPQUFPLElBQUksQ0FBQztRQUNoQixJQUFNLGNBQWMsR0FBRyxlQUFlLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckUsSUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3JHLElBQUksYUFBYSxHQUFHLFNBQVMsQ0FBQztRQUM5QixJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sWUFBWSxXQUFXO1lBQ3ZELGFBQWEsR0FBaUIsT0FBTyxDQUFDLE1BQU8sQ0FBQyxhQUFhLENBQUM7UUFDaEUsSUFBSSxZQUFZLEVBQUU7WUFDZCxJQUFJLENBQUMsc0JBQXNCLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNwRixJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLE1BQU0sQ0FBQyxDQUFBO1NBQzlDO2FBQ0ksSUFBSSxNQUFNLENBQUMscUJBQXFCO1lBQ2pDLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDOUYsQ0FBQztJQUVjLG1DQUFzQixHQUFyQyxVQUFzQyxZQUFvQyxFQUFFLFFBQWEsRUFBRSxPQUF3QixFQUFFLE1BQVc7UUFDNUgsS0FBSyxJQUFJLFdBQVcsSUFBSSxZQUFZLEVBQUU7WUFDbEMsSUFBSSxDQUFDLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxZQUFZLE1BQU0sQ0FBQztnQkFDOUMsSUFBSSxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssT0FBTyxFQUFFO29CQUNuQyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztvQkFDMUMsTUFBTTtpQkFDVDtTQUNSO0lBQ0wsQ0FBQztJQUNjLDZCQUFnQixHQUEvQixVQUFnQyxZQUFZLEVBQUUsTUFBTTtRQUNoRCxJQUFJLE1BQU0sQ0FBQyxhQUFhO1lBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLE1BQU07Z0JBQzVDLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUNMLG1CQUFDO0FBQUQsQ0FBQyxBQXBDRCxJQW9DQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IExpbnEgfSBmcm9tICcuL2xpbnEnO1xyXG5pbXBvcnQgeyBBcHBsaWNhdGlvblV0aWwgfSBmcm9tICcuL2FwcC11dGlsJztcclxuaW1wb3J0IHtcclxuICAgIEFic3RyYWN0Q29udHJvbFxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuaW1wb3J0IHsgUnhGb3JtR3JvdXAgfSBmcm9tIFwiLi4vc2VydmljZXMvcngtZm9ybS1ncm91cFwiXHJcblxyXG5leHBvcnQgY2xhc3MgRm9ybVByb3ZpZGVyIHtcclxuXHJcblxyXG5cclxuICAgIHN0YXRpYyBQcm9jZXNzUnVsZShjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsIGNvbmZpZzogYW55LCBpc0R5bmFtaWNDb25maWc6IGJvb2xlYW4gPSBmYWxzZSk6IGJvb2xlYW4gfCB7IFtrZXk6IHN0cmluZ106IGFueSB9IHtcclxuICAgICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5leHByZXNzaW9uUHJvY2Vzc2VkKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBjb25zdCBmb3JtR3JvdXBWYWx1ZSA9IEFwcGxpY2F0aW9uVXRpbC5nZXRQYXJlbnRPYmplY3RWYWx1ZShjb250cm9sKTtcclxuICAgICAgICBjb25zdCBwYXJlbnRPYmplY3QgPSAoY29udHJvbC5wYXJlbnQpID8gQXBwbGljYXRpb25VdGlsLmNsb25lVmFsdWUoY29udHJvbC5wYXJlbnQudmFsdWUpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIGxldCBtb2RlbEluc3RhbmNlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmIChjb250cm9sLnBhcmVudCAmJiBjb250cm9sLnBhcmVudCBpbnN0YW5jZW9mIFJ4Rm9ybUdyb3VwKVxyXG4gICAgICAgICAgICBtb2RlbEluc3RhbmNlID0gKDxSeEZvcm1Hcm91cD5jb250cm9sLnBhcmVudCkubW9kZWxJbnN0YW5jZTtcclxuICAgICAgICBpZiAocGFyZW50T2JqZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlRm9ybUNvbnRyb2xWYWx1ZShwYXJlbnRPYmplY3QsIGNvbnRyb2wucGFyZW50LmNvbnRyb2xzLCBjb250cm9sLCBjb25maWcpO1xyXG4gICAgICAgICAgICB0aGlzLmZvckRpc2FibGVVcGRhdGUocGFyZW50T2JqZWN0LCBjb25maWcpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGNvbmZpZy5jb25kaXRpb25hbEV4cHJlc3Npb24pXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gTGlucS5leGVjdXRlKGZvcm1Hcm91cFZhbHVlLCBjb25maWcsIHBhcmVudE9iamVjdCwgbW9kZWxJbnN0YW5jZSwgaXNEeW5hbWljQ29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyB1cGRhdGVGb3JtQ29udHJvbFZhbHVlKHBhcmVudE9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgY29udHJvbHM6IGFueSwgY29udHJvbDogQWJzdHJhY3RDb250cm9sLCBjb25maWc6IGFueSkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbnRyb2xOYW1lIGluIHBhcmVudE9iamVjdCkge1xyXG4gICAgICAgICAgICBpZiAoIShwYXJlbnRPYmplY3RbY29udHJvbE5hbWVdIGluc3RhbmNlb2YgT2JqZWN0KSlcclxuICAgICAgICAgICAgICAgIGlmIChjb250cm9sc1tjb250cm9sTmFtZV0gPT09IGNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3RbY29udHJvbE5hbWVdID0gY29udHJvbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHN0YXRpYyBmb3JEaXNhYmxlVXBkYXRlKHBhcmVudE9iamVjdCwgY29uZmlnKSB7XHJcbiAgICAgICAgaWYgKGNvbmZpZy5kaXNhYmxlQ29uZmlnKVxyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhjb25maWcuZGlzYWJsZUNvbmZpZykuZm9yRWFjaChjb2x1bW4gPT4ge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50T2JqZWN0W2NvbHVtbl0gPSBjb25maWcuZGlzYWJsZUNvbmZpZ1tjb2x1bW5dO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiJdfQ==