import { AnnotationTypes } from "../core/validator.static";
import { IBAN_COUNTRY_CODE_REGEX } from "../const/iban-country-wise-regex.const";
import { getConfigObject } from "../util/config-provider";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { ObjectMaker } from "../util/object-maker";
function hasValidIbanFormat(value, countryCode) {
    const strippedStr = value.replace(/[\s\-]+/gi, '').toUpperCase();
    const isoCountryCode = countryCode || strippedStr.slice(0, 2).toUpperCase();
    return (isoCountryCode in IBAN_COUNTRY_CODE_REGEX) &&
        IBAN_COUNTRY_CODE_REGEX[isoCountryCode].test(strippedStr);
}
function hasValidIbanChecksum(str) {
    const strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic
    const rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);
    const alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, char => char.charCodeAt(0) - 55);
    const remainder = alphaCapsReplacedWithDigits.match(/\d{1,7}/g)
        .reduce((acc, value) => Number(acc + value) % 97, '');
    return remainder === 1;
}
export function ibanValidator(configModel) {
    return (control) => {
        let config = getConfigObject(configModel, control);
        if (ValidatorValueChecker.pass(control, config)) {
            if (!(hasValidIbanFormat(control.value, config.countryCode) && hasValidIbanChecksum(control.value)))
                return ObjectMaker.toJson(AnnotationTypes.iban, config, [control.value, config.countryCode]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWJhbi52YWxpZGF0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsicmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzL2liYW4udmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNqRixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5ELFNBQVMsa0JBQWtCLENBQUMsS0FBWSxFQUFDLFdBQWtCO0lBQ3ZELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sY0FBYyxHQUFHLFdBQVcsSUFBSSxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUU1RSxPQUFPLENBQUMsY0FBYyxJQUFJLHVCQUF1QixDQUFDO1FBQzlDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRSxDQUFDO0FBRUQsU0FBUyxvQkFBb0IsQ0FBQyxHQUFHO0lBQzdCLE1BQU0sV0FBVyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsNENBQTRDO0lBQy9HLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsTUFBTSwyQkFBMkIsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFbEcsTUFBTSxTQUFTLEdBQUcsMkJBQTJCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQztTQUMxRCxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUUxRCxPQUFPLFNBQVMsS0FBSyxDQUFDLENBQUM7QUFDM0IsQ0FBQztBQUVELE1BQU0sVUFBVSxhQUFhLENBQUMsV0FBdUI7SUFDakQsT0FBTyxDQUFDLE9BQXdCLEVBQTBCLEVBQUU7UUFDeEQsSUFBSSxNQUFNLEdBQWUsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvRCxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMvRixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ3BHO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgVmFsaWRhdG9yRm4sXHJcbiAgQWJzdHJhY3RDb250cm9sXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcblxyXG5pbXBvcnQgeyBBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiLi4vY29yZS92YWxpZGF0b3Iuc3RhdGljXCI7XHJcbmltcG9ydCB7IElCQU5Db25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9pYmFuLWNvbmZpZ1wiO1xyXG5pbXBvcnQgeyBJQkFOX0NPVU5UUllfQ09ERV9SRUdFWCB9IGZyb20gXCIuLi9jb25zdC9pYmFuLWNvdW50cnktd2lzZS1yZWdleC5jb25zdFwiO1xyXG5pbXBvcnQgeyBnZXRDb25maWdPYmplY3QgfSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgVmFsaWRhdG9yVmFsdWVDaGVja2VyIH0gZnJvbSBcIi4uL3V0aWwvdmFsaWRhdG9yLXZhbHVlLWNoZWNrZXJcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuXHJcbmZ1bmN0aW9uIGhhc1ZhbGlkSWJhbkZvcm1hdCh2YWx1ZTpzdHJpbmcsY291bnRyeUNvZGU6c3RyaW5nKSB7XHJcbiAgICBjb25zdCBzdHJpcHBlZFN0ciA9IHZhbHVlLnJlcGxhY2UoL1tcXHNcXC1dKy9naSwgJycpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICBjb25zdCBpc29Db3VudHJ5Q29kZSA9IGNvdW50cnlDb2RlIHx8IHN0cmlwcGVkU3RyLnNsaWNlKDAsIDIpLnRvVXBwZXJDYXNlKCk7XHJcblxyXG4gICAgcmV0dXJuIChpc29Db3VudHJ5Q29kZSBpbiBJQkFOX0NPVU5UUllfQ09ERV9SRUdFWCkgJiZcclxuICAgICAgICBJQkFOX0NPVU5UUllfQ09ERV9SRUdFWFtpc29Db3VudHJ5Q29kZV0udGVzdChzdHJpcHBlZFN0cik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGhhc1ZhbGlkSWJhbkNoZWNrc3VtKHN0cikge1xyXG4gICAgY29uc3Qgc3RyaXBwZWRTdHIgPSBzdHIucmVwbGFjZSgvW15BLVowLTldKy9naSwgJycpLnRvVXBwZXJDYXNlKCk7IC8vIEtlZXAgb25seSBkaWdpdHMgYW5kIEEtWiBsYXRpbiBhbHBoYWJldGljXHJcbiAgICBjb25zdCByZWFycmFuZ2VkID0gc3RyaXBwZWRTdHIuc2xpY2UoNCkgKyBzdHJpcHBlZFN0ci5zbGljZSgwLCA0KTtcclxuICAgIGNvbnN0IGFscGhhQ2Fwc1JlcGxhY2VkV2l0aERpZ2l0cyA9IHJlYXJyYW5nZWQucmVwbGFjZSgvW0EtWl0vZywgY2hhciA9PiBjaGFyLmNoYXJDb2RlQXQoMCkgLSA1NSk7XHJcblxyXG4gICAgY29uc3QgcmVtYWluZGVyID0gYWxwaGFDYXBzUmVwbGFjZWRXaXRoRGlnaXRzLm1hdGNoKC9cXGR7MSw3fS9nKVxyXG4gICAgICAgIC5yZWR1Y2UoKGFjYywgdmFsdWUpID0+IE51bWJlcihhY2MgKyB2YWx1ZSkgJSA5NywgJycpO1xyXG5cclxuICAgIHJldHVybiByZW1haW5kZXIgPT09IDE7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBpYmFuVmFsaWRhdG9yKGNvbmZpZ01vZGVsOiBJQkFOQ29uZmlnKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0+IHtcclxuICAgICAgICBsZXQgY29uZmlnOiBJQkFOQ29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZ01vZGVsLCBjb250cm9sKTtcclxuICAgICAgICBpZiAoVmFsaWRhdG9yVmFsdWVDaGVja2VyLnBhc3MoY29udHJvbCwgY29uZmlnKSkge1xyXG4gICAgICAgICAgICBpZiAoIShoYXNWYWxpZEliYW5Gb3JtYXQoY29udHJvbC52YWx1ZSwgY29uZmlnLmNvdW50cnlDb2RlKSAmJiBoYXNWYWxpZEliYW5DaGVja3N1bShjb250cm9sLnZhbHVlKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKEFubm90YXRpb25UeXBlcy5pYmFuLCBjb25maWcsIFtjb250cm9sLnZhbHVlLCBjb25maWcuY291bnRyeUNvZGVdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuICB9XHJcbn1cclxuIl19