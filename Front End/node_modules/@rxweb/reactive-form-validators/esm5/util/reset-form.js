import { FormControl, FormGroup, FormArray } from "@angular/forms";
import { ResetFormType } from "../enums/reset-type";
export function isResetControl(controlName, control, options) {
    var isReset = true;
    if (options) {
        isReset = false;
        if (options.resetType)
            switch (options.resetType) {
                case ResetFormType.ControlsOnly:
                    isReset = control instanceof FormControl;
                    break;
                case ResetFormType.ControlsAndFormGroupsOnly:
                    isReset = control instanceof FormControl || control instanceof FormGroup;
                    break;
                case ResetFormType.FormGroupsOnly:
                    isReset = control instanceof FormGroup;
                    break;
                case ResetFormType.FormArraysOnly:
                    isReset = control instanceof FormArray;
                    break;
                case ResetFormType.DefinedPropsOnly:
                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;
                    break;
                default:
                    isReset = true;
                    break;
            }
        if (!isReset && options.with)
            isReset = options.with.filter(function (x) { return x.split('.')[0] == controlName.split('.')[0]; })[0] !== undefined;
        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))
            isReset = true;
    }
    return isReset;
}
export function getNestedOptions(controlName, options) {
    if (options) {
        var jObjectOptions = {};
        if (options.resetType)
            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;
        if (options.with) {
            var nestedControls = options.with.filter(function (t) { return t.split('.')[0] == controlName; });
            var controlNames = nestedControls.map(function (x) {
                var splitControls = x.split('.');
                splitControls.splice(0, 1);
                return splitControls.join('.');
            });
            jObjectOptions.with = controlNames;
        }
        if (options.value && options.value[controlName])
            jObjectOptions.value = options.value[controlName];
        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;
        return jObjectOptions;
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ1dGlsL3Jlc2V0LWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBELE1BQU0sVUFBVSxjQUFjLENBQUMsV0FBa0IsRUFBQyxPQUFZLEVBQUUsT0FJL0Q7SUFDRyxJQUFJLE9BQU8sR0FBWSxJQUFJLENBQUM7SUFDNUIsSUFBSSxPQUFPLEVBQUU7UUFDVCxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLFNBQVM7WUFDckIsUUFBUSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUN2QixLQUFLLGFBQWEsQ0FBQyxZQUFZO29CQUMzQixPQUFPLEdBQUcsT0FBTyxZQUFZLFdBQVcsQ0FBQztvQkFDekMsTUFBTTtnQkFDVixLQUFLLGFBQWEsQ0FBQyx5QkFBeUI7b0JBQ3hDLE9BQU8sR0FBRyxPQUFPLFlBQVksV0FBVyxJQUFJLE9BQU8sWUFBWSxTQUFTLENBQUM7b0JBQ3pFLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsY0FBYztvQkFDN0IsT0FBTyxHQUFHLE9BQU8sWUFBWSxTQUFTLENBQUM7b0JBQ3ZDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsY0FBYztvQkFDN0IsT0FBTyxHQUFHLE9BQU8sWUFBWSxTQUFTLENBQUM7b0JBQ3ZDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsZ0JBQWdCO29CQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3hGLE1BQU07Z0JBQ1Y7b0JBQ0ksT0FBTyxHQUFHLElBQUksQ0FBQztvQkFDZixNQUFNO2FBQ1Q7UUFDTCxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJO1lBQ3hCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBNUMsQ0FBNEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztRQUN0RyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUN0SCxPQUFPLEdBQUcsSUFBSSxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxXQUFtQixFQUFFLE9BSXJEO0lBQ0csSUFBSSxPQUFPLEVBQUU7UUFDVCxJQUFJLGNBQWMsR0FJZCxFQUFFLENBQUM7UUFDUCxJQUFJLE9BQU8sQ0FBQyxTQUFTO1lBQ2pCLGNBQWMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLFNBQVMsSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDekwsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsRUFBOUIsQ0FBOEIsQ0FBQyxDQUFDO1lBQzlFLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2dCQUNuQyxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDM0IsT0FBTyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ25DLENBQUMsQ0FBQyxDQUFDO1lBQ0gsY0FBYyxDQUFDLElBQUksR0FBRyxZQUFZLENBQUM7U0FDdEM7UUFDRCxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDM0MsY0FBYyxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RELGNBQWMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1FBQ3JGLE9BQU8sY0FBYyxDQUFDO0tBQ3pCO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1Db250cm9sLCBGb3JtR3JvdXAsIEZvcm1BcnJheSB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiXHJcbmltcG9ydCB7IFJlc2V0Rm9ybVR5cGUgfSBmcm9tIFwiLi4vZW51bXMvcmVzZXQtdHlwZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVzZXRDb250cm9sKGNvbnRyb2xOYW1lOnN0cmluZyxjb250cm9sOiBhbnksIG9wdGlvbnM/OiB7XHJcbiAgICByZXNldFR5cGU/OiBSZXNldEZvcm1UeXBlLFxyXG4gICAgd2l0aD86IHN0cmluZ1tdLFxyXG4gICAgdmFsdWU/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XHJcbn0pIHtcclxuICAgIGxldCBpc1Jlc2V0OiBib29sZWFuID0gdHJ1ZTtcclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgaXNSZXNldCA9IGZhbHNlO1xyXG4gICAgICAgIGlmIChvcHRpb25zLnJlc2V0VHlwZSlcclxuICAgICAgICBzd2l0Y2ggKG9wdGlvbnMucmVzZXRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5Db250cm9sc09ubHk6XHJcbiAgICAgICAgICAgICAgICBpc1Jlc2V0ID0gY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Db250cm9sO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5Db250cm9sc0FuZEZvcm1Hcm91cHNPbmx5OlxyXG4gICAgICAgICAgICAgICAgaXNSZXNldCA9IGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQ29udHJvbCB8fCBjb250cm9sIGluc3RhbmNlb2YgRm9ybUdyb3VwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5Gb3JtR3JvdXBzT25seTpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSBjb250cm9sIGluc3RhbmNlb2YgRm9ybUdyb3VwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5Gb3JtQXJyYXlzT25seTpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSBjb250cm9sIGluc3RhbmNlb2YgRm9ybUFycmF5O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUmVzZXRGb3JtVHlwZS5EZWZpbmVkUHJvcHNPbmx5OlxyXG4gICAgICAgICAgICAgICAgaXNSZXNldCA9IG9wdGlvbnMudmFsdWUgPyBPYmplY3Qua2V5cyhvcHRpb25zLnZhbHVlKS5pbmRleE9mKGNvbnRyb2xOYW1lKSAhPSAtMSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICBpc1Jlc2V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc1Jlc2V0ICYmIG9wdGlvbnMud2l0aCkgXHJcbiAgICAgICAgICAgIGlzUmVzZXQgPSBvcHRpb25zLndpdGguZmlsdGVyKHggPT4geC5zcGxpdCgnLicpWzBdID09IGNvbnRyb2xOYW1lLnNwbGl0KCcuJylbMF0pWzBdICE9PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKCFpc1Jlc2V0ICYmIG9wdGlvbnMudmFsdWUgJiYgKG9wdGlvbnMucmVzZXRUeXBlID09PSB1bmRlZmluZWQgfHwgb3B0aW9ucy5yZXNldFR5cGUgIT09IFJlc2V0Rm9ybVR5cGUuRGVmaW5lZFByb3BzT25seSkpXHJcbiAgICAgICAgICAgIGlzUmVzZXQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzUmVzZXQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXROZXN0ZWRPcHRpb25zKGNvbnRyb2xOYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiB7XHJcbiAgICByZXNldFR5cGU/OiBSZXNldEZvcm1UeXBlLFxyXG4gICAgd2l0aD86IHN0cmluZ1tdLFxyXG4gICAgdmFsdWU/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XHJcbn0pIHtcclxuICAgIGlmIChvcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IGpPYmplY3RPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIHJlc2V0VHlwZT86IFJlc2V0Rm9ybVR5cGUsXHJcbiAgICAgICAgICAgIHdpdGg/OiBzdHJpbmdbXSxcclxuICAgICAgICAgICAgdmFsdWU/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XHJcbiAgICAgICAgfSA9IHt9O1xyXG4gICAgICAgIGlmIChvcHRpb25zLnJlc2V0VHlwZSlcclxuICAgICAgICAgICAgak9iamVjdE9wdGlvbnMucmVzZXRUeXBlID0gKG9wdGlvbnMucmVzZXRUeXBlID09IFJlc2V0Rm9ybVR5cGUuRm9ybUdyb3Vwc09ubHkgfHwgb3B0aW9ucy5yZXNldFR5cGUgPT0gUmVzZXRGb3JtVHlwZS5Gb3JtQXJyYXlzT25seSkgPyBSZXNldEZvcm1UeXBlLkNvbnRyb2xzT25seSA6IG9wdGlvbnMucmVzZXRUeXBlO1xyXG4gICAgICAgIGlmIChvcHRpb25zLndpdGgpIHtcclxuICAgICAgICAgICAgbGV0IG5lc3RlZENvbnRyb2xzID0gb3B0aW9ucy53aXRoLmZpbHRlcih0ID0+IHQuc3BsaXQoJy4nKVswXSA9PSBjb250cm9sTmFtZSk7XHJcbiAgICAgICAgICAgIGxldCBjb250cm9sTmFtZXMgPSBuZXN0ZWRDb250cm9scy5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc3BsaXRDb250cm9scyA9IHguc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgIHNwbGl0Q29udHJvbHMuc3BsaWNlKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNwbGl0Q29udHJvbHMuam9pbignLicpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgak9iamVjdE9wdGlvbnMud2l0aCA9IGNvbnRyb2xOYW1lcztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMudmFsdWUgJiYgb3B0aW9ucy52YWx1ZVtjb250cm9sTmFtZV0pXHJcbiAgICAgICAgICAgIGpPYmplY3RPcHRpb25zLnZhbHVlID0gb3B0aW9ucy52YWx1ZVtjb250cm9sTmFtZV07XHJcbiAgICAgICAgak9iamVjdE9wdGlvbnMgPSBPYmplY3Qua2V5cyhqT2JqZWN0T3B0aW9ucykubGVuZ3RoID4gMCA/IGpPYmplY3RPcHRpb25zIDogdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBqT2JqZWN0T3B0aW9ucztcclxuICAgIH1cclxuICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbn0iXX0=