{"version":3,"file":"translate.parser.d.ts","sources":["translate.parser.d.ts"],"names":[],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["export declare abstract class TranslateParser {\r\n    /**\r\n     * Interpolates a string to replace parameters\r\n     * \"This is a {{ key }}\" ==> \"This is a value\", with params = { key: \"value\" }\r\n     * @param expr\r\n     * @param params\r\n     */\r\n    abstract interpolate(expr: string | Function, params?: any): string;\r\n    /**\r\n     * Gets a value from an object by composed key\r\n     * parser.getValue({ key1: { keyA: 'valueI' }}, 'key1.keyA') ==> 'valueI'\r\n     * @param target\r\n     * @param key\r\n     */\r\n    abstract getValue(target: any, key: string): any;\r\n}\r\nexport declare class TranslateDefaultParser extends TranslateParser {\r\n    templateMatcher: RegExp;\r\n    interpolate(expr: string | Function, params?: any): string;\r\n    getValue(target: any, key: string): any;\r\n    private interpolateFunction;\r\n    private interpolateString;\r\n}\r\n"]}