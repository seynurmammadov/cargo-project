import * as tslib_1 from "tslib";
import { defaultContainer } from '../core/defaultContainer';
import { ARRAY_PROPERTY, OBJECT_PROPERTY, PROPERTY } from "../const";
import { RegexValidator } from '../util/regex-validator';
import { SANITIZERS } from "../util/sanitizers";
import { instanceProvider, getInstance } from "../util/instance-provider.function";
var BaseFormBuilder = /** @class */ (function () {
    function BaseFormBuilder() {
    }
    BaseFormBuilder.prototype.createInstance = function () {
        var instance = {};
        defaultContainer.modelIncrementCount = defaultContainer.modelIncrementCount + 1;
        var modelName = "RxWebModel" + defaultContainer.modelIncrementCount;
        instance.constructor = Function("\"use strict\";return(function " + modelName + "(){ })")();
        return instance;
    };
    BaseFormBuilder.prototype.createClassObject = function (model, formBuilderConfiguration, classInstance) {
        var _this = this;
        var instanceContainer = defaultContainer.get(model);
        var autoInstanceConfig = formBuilderConfiguration ? formBuilderConfiguration.autoInstanceConfig : undefined;
        if (!autoInstanceConfig) {
            return classInstance && typeof classInstance != "function" ? classInstance : getInstance(model, []);
        }
        else {
            classInstance = classInstance && typeof classInstance != "function" ? classInstance : getInstance(model, autoInstanceConfig.arguments || []);
            if (autoInstanceConfig.objectPropInstanceConfig && autoInstanceConfig.objectPropInstanceConfig.length > 0) {
                autoInstanceConfig.objectPropInstanceConfig.forEach(function (t) {
                    var objectProperty = instanceContainer.properties.filter(function (property) { return property.name == t.propertyName && property.propertyType == OBJECT_PROPERTY; })[0];
                    if (objectProperty) {
                        var data = classInstance[t.propertyName];
                        classInstance[t.propertyName] = getInstance(objectProperty.entity, t.arguments || []);
                        if (data)
                            _this.setObjectValue(data, classInstance[t.propertyName]);
                    }
                });
            }
            if (autoInstanceConfig.arrayPropInstanceConfig && autoInstanceConfig.arrayPropInstanceConfig.length > 0) {
                autoInstanceConfig.arrayPropInstanceConfig.forEach(function (t) {
                    var property = instanceContainer.properties.filter(function (property) { return property.name == t.propertyName && property.propertyType == ARRAY_PROPERTY; })[0];
                    if (property) {
                        var data = classInstance[t.propertyName];
                        classInstance[t.propertyName] = [];
                        for (var i = 0; i < t.rowItems; i++) {
                            var instance = getInstance(property.entity, t.arguments || []);
                            if (data && data[i])
                                _this.setObjectValue(data[i], instance);
                            classInstance[t.propertyName].push(instance);
                        }
                    }
                });
            }
            return classInstance;
        }
    };
    BaseFormBuilder.prototype.updateObject = function (model, entityObject, formBuilderConfiguration) {
        var _this = this;
        var instanceContainer = instanceProvider(model);
        var classInstance = getInstance(model, []);
        if (instanceContainer) {
            instanceContainer.properties.forEach(function (t) {
                var e_1, _a;
                var entity = ((t.propertyType == OBJECT_PROPERTY || t.propertyType == ARRAY_PROPERTY) && t.entity) ? t.entity : (formBuilderConfiguration && formBuilderConfiguration.genericEntities) ? formBuilderConfiguration.genericEntities[t.name] : undefined;
                if (!entity && t.entityProvider)
                    entity = t.entityProvider.call(entityObject);
                switch (t.propertyType) {
                    case PROPERTY:
                        classInstance[t.name] = _this.getValue(entityObject, t, formBuilderConfiguration);
                        break;
                    case OBJECT_PROPERTY:
                        var objectValue = _this.getValue(entityObject, t, formBuilderConfiguration);
                        if (objectValue)
                            classInstance[t.name] = _this.updateObject(entity, objectValue, formBuilderConfiguration);
                        break;
                    case ARRAY_PROPERTY:
                        var arrayObjectValue = _this.getValue(entityObject, t, formBuilderConfiguration);
                        if (arrayObjectValue && Array.isArray(arrayObjectValue)) {
                            classInstance[t.name] = [];
                            try {
                                for (var arrayObjectValue_1 = tslib_1.__values(arrayObjectValue), arrayObjectValue_1_1 = arrayObjectValue_1.next(); !arrayObjectValue_1_1.done; arrayObjectValue_1_1 = arrayObjectValue_1.next()) {
                                    var row = arrayObjectValue_1_1.value;
                                    var instanceObject = _this.updateObject(entity, row, formBuilderConfiguration);
                                    classInstance[t.name].push(instanceObject);
                                }
                            }
                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                            finally {
                                try {
                                    if (arrayObjectValue_1_1 && !arrayObjectValue_1_1.done && (_a = arrayObjectValue_1.return)) _a.call(arrayObjectValue_1);
                                }
                                finally { if (e_1) throw e_1.error; }
                            }
                        }
                        break;
                }
            });
        }
        return classInstance;
    };
    BaseFormBuilder.prototype.instaceProvider = function (instanceFunc, entityObject) {
        return instanceProvider(instanceFunc, entityObject);
    };
    BaseFormBuilder.prototype.getDefaultValue = function (propertyInfo, value, formBuilderConfiguration) {
        var defaultValue = (formBuilderConfiguration && formBuilderConfiguration.propsConfig && formBuilderConfiguration.propsConfig[propertyInfo.name] && formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue && !RegexValidator.isNotBlank(value)) ? formBuilderConfiguration.propsConfig[propertyInfo.name].defaultValue : (propertyInfo.defaultValue != undefined && !RegexValidator.isNotBlank(value)) ?
            propertyInfo.defaultValue :
            value;
        return defaultValue;
    };
    BaseFormBuilder.prototype.sanitizeValue = function (instanceContainer, propertyName, value, entityObject, baseObject) {
        var e_2, _a;
        if (instanceContainer.sanitizers && instanceContainer.sanitizers[propertyName]) {
            try {
                for (var _b = tslib_1.__values(instanceContainer.sanitizers[propertyName]), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var sanitizer = _c.value;
                    value = SANITIZERS[sanitizer.name](value, sanitizer.config);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        if (entityObject[propertyName] !== undefined && entityObject[propertyName] !== value)
            entityObject[propertyName] = value;
        if (baseObject[propertyName] !== undefined && baseObject[propertyName] !== value)
            baseObject[propertyName] = value;
        return value;
    };
    BaseFormBuilder.prototype.getValue = function (entityObject, propertyInfo, formBuilderConfiguration) {
        var propValue = (propertyInfo.dataPropertyName) ? entityObject[propertyInfo.dataPropertyName] : entityObject[propertyInfo.name];
        return this.getDefaultValue(propertyInfo, propValue, formBuilderConfiguration);
    };
    BaseFormBuilder.prototype.setObjectValue = function (entityObject, classInstance) {
        for (var column in entityObject) {
            classInstance[column] = entityObject[column];
        }
    };
    return BaseFormBuilder;
}());
export { BaseFormBuilder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1mb3JtLWJ1aWxkZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic2VydmljZXMvYmFzZS1mb3JtLWJ1aWxkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTVELE9BQU8sRUFBRSxjQUFjLEVBQUUsZUFBZSxFQUFFLFFBQVEsRUFBRSxNQUFNLFVBQVUsQ0FBQTtBQUNwRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQy9DLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQTtBQUVsRjtJQUNJO0lBQ0EsQ0FBQztJQUVTLHdDQUFjLEdBQXhCO1FBQ0ksSUFBSSxRQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLGdCQUFnQixDQUFDLG1CQUFtQixHQUFHLGdCQUFnQixDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUNoRixJQUFJLFNBQVMsR0FBRyxlQUFhLGdCQUFnQixDQUFDLG1CQUFxQixDQUFBO1FBQ25FLFFBQVEsQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLG9DQUFnQyxTQUFTLFdBQVEsQ0FBQyxFQUFFLENBQUE7UUFDcEYsT0FBTyxRQUFRLENBQUM7SUFDcEIsQ0FBQztJQUVTLDJDQUFpQixHQUEzQixVQUE0QixLQUFVLEVBQUUsd0JBQWtELEVBQUUsYUFBbUI7UUFBL0csaUJBbUNDO1FBbENHLElBQUksaUJBQWlCLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELElBQUksa0JBQWtCLEdBQXVCLHdCQUF3QixDQUFDLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsU0FB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QUNqQixDQUFDO0lBRU8sa0NBQVEsR0FBaEIsVUFBaUIsWUFBb0MsRUFBRSxZQUEwQixFQUFFLHdCQUFrRDtRQUNqSSxJQUFJLFNBQVMsR0FBRyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDaEksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBQyxTQUFTLEVBQUMsd0JBQXdCLENBQUMsQ0FBQztJQUNqRixDQUFDO0lBRU8sd0NBQWMsR0FBdEIsVUFBdUIsWUFBb0MsRUFBRSxhQUFrQjtRQUMzRSxLQUFLLElBQUksTUFBTSxJQUFJLFlBQVksRUFBRTtZQUM3QixhQUFhLENBQUMsTUFBTSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQXBIRCxJQW9IQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbiB9IGZyb20gJy4uL21vZGVscy9mb3JtLWJ1aWxkZXItY29uZmlndXJhdGlvbidcclxuaW1wb3J0IHsgQXV0b0luc3RhbmNlQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL2ludGVyZmFjZS9hdXRvLWluc3RhbmNlLWNvbmZpZy5pbnRlcmZhY2UnXHJcbmltcG9ydCB7IGRlZmF1bHRDb250YWluZXIgfSBmcm9tICcuLi9jb3JlL2RlZmF1bHRDb250YWluZXInO1xyXG5pbXBvcnQgeyBJbnN0YW5jZUNvbnRhaW5lcixQcm9wZXJ0eUluZm99IGZyb20gJy4uL2NvcmUvdmFsaWRhdG9yLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEFSUkFZX1BST1BFUlRZLCBPQkpFQ1RfUFJPUEVSVFksIFBST1BFUlRZIH0gZnJvbSBcIi4uL2NvbnN0XCJcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tICcuLi91dGlsL3JlZ2V4LXZhbGlkYXRvcic7XHJcbmltcG9ydCB7IFNBTklUSVpFUlMgfSBmcm9tIFwiLi4vdXRpbC9zYW5pdGl6ZXJzXCJcclxuaW1wb3J0IHsgaW5zdGFuY2VQcm92aWRlciwgZ2V0SW5zdGFuY2UgfSBmcm9tIFwiLi4vdXRpbC9pbnN0YW5jZS1wcm92aWRlci5mdW5jdGlvblwiXHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZUZvcm1CdWlsZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBjcmVhdGVJbnN0YW5jZSgpIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2UgPSB7fTtcclxuICAgICAgICBkZWZhdWx0Q29udGFpbmVyLm1vZGVsSW5jcmVtZW50Q291bnQgPSBkZWZhdWx0Q29udGFpbmVyLm1vZGVsSW5jcmVtZW50Q291bnQgKyAxO1xyXG4gICAgICAgIGxldCBtb2RlbE5hbWUgPSBgUnhXZWJNb2RlbCR7ZGVmYXVsdENvbnRhaW5lci5tb2RlbEluY3JlbWVudENvdW50fWBcclxuICAgICAgICBpbnN0YW5jZS5jb25zdHJ1Y3RvciA9IEZ1bmN0aW9uKGBcInVzZSBzdHJpY3RcIjtyZXR1cm4oZnVuY3Rpb24gJHttb2RlbE5hbWV9KCl7IH0pYCkoKVxyXG4gICAgICAgIHJldHVybiBpbnN0YW5jZTtcclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgY3JlYXRlQ2xhc3NPYmplY3QobW9kZWw6IGFueSwgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uOiBGb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24sIGNsYXNzSW5zdGFuY2U/OiBhbnkpIHtcclxuICAgICAgICBsZXQgaW5zdGFuY2VDb250YWluZXIgPSBkZWZhdWx0Q29udGFpbmVyLmdldChtb2RlbCk7XHJcbiAgICAgICAgbGV0IGF1dG9JbnN0YW5jZUNvbmZpZzogQXV0b0luc3RhbmNlQ29uZmlnID0gZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uID8gZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uLmF1dG9JbnN0YW5jZUNvbmZpZyA6IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoIWF1dG9JbnN0YW5jZUNvbmZpZykge1xyXG4gICAgICAgICAgICByZXR1cm4gY2xhc3NJbnN0YW5jZSAmJiB0eXBlb2YgY2xhc3NJbnN0YW5jZSAhPSBcImZ1bmN0aW9uXCIgPyBjbGFzc0luc3RhbmNlIDogZ2V0SW5zdGFuY2UobW9kZWwsIFtdKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjbGFzc0luc3RhbmNlID0gY2xhc3NJbnN0YW5jZSAmJiB0eXBlb2YgY2xhc3NJbnN0YW5jZSAhPSBcImZ1bmN0aW9uXCIgPyBjbGFzc0luc3RhbmNlIDogZ2V0SW5zdGFuY2UobW9kZWwsIGF1dG9JbnN0YW5jZUNvbmZpZy5hcmd1bWVudHMgfHwgW10pXHJcbiAgICAgICAgICAgIGlmIChhdXRvSW5zdGFuY2VDb25maWcub2JqZWN0UHJvcEluc3RhbmNlQ29uZmlnICYmIGF1dG9JbnN0YW5jZUNvbmZpZy5vYmplY3RQcm9wSW5zdGFuY2VDb25maWcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgYXV0b0luc3RhbmNlQ29uZmlnLm9iamVjdFByb3BJbnN0YW5jZUNvbmZpZy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvYmplY3RQcm9wZXJ0eSA9IGluc3RhbmNlQ29udGFpbmVyLnByb3BlcnRpZXMuZmlsdGVyKHByb3BlcnR5ID0+IHByb3BlcnR5Lm5hbWUgPT0gdC5wcm9wZXJ0eU5hbWUgJiYgcHJvcGVydHkucHJvcGVydHlUeXBlID09IE9CSkVDVF9QUk9QRVJUWSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdFByb3BlcnR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhID1jbGFzc0luc3RhbmNlW3QucHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NJbnN0YW5jZVt0LnByb3BlcnR5TmFtZV0gPSBnZXRJbnN0YW5jZShvYmplY3RQcm9wZXJ0eS5lbnRpdHksIHQuYXJndW1lbnRzIHx8IFtdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE9iamVjdFZhbHVlKGRhdGEsIGNsYXNzSW5zdGFuY2VbdC5wcm9wZXJ0eU5hbWVdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChhdXRvSW5zdGFuY2VDb25maWcuYXJyYXlQcm9wSW5zdGFuY2VDb25maWcgJiYgYXV0b0luc3RhbmNlQ29uZmlnLmFycmF5UHJvcEluc3RhbmNlQ29uZmlnLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGF1dG9JbnN0YW5jZUNvbmZpZy5hcnJheVByb3BJbnN0YW5jZUNvbmZpZy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBwcm9wZXJ0eSA9IGluc3RhbmNlQ29udGFpbmVyLnByb3BlcnRpZXMuZmlsdGVyKHByb3BlcnR5ID0+IHByb3BlcnR5Lm5hbWUgPT0gdC5wcm9wZXJ0eU5hbWUgJiYgcHJvcGVydHkucHJvcGVydHlUeXBlID09IEFSUkFZX1BST1BFUlRZKVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGEgPSBjbGFzc0luc3RhbmNlW3QucHJvcGVydHlOYW1lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NJbnN0YW5jZVt0LnByb3BlcnR5TmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0LnJvd0l0ZW1zOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnN0YW5jZSA9IGdldEluc3RhbmNlKHByb3BlcnR5LmVudGl0eSwgdC5hcmd1bWVudHMgfHwgW10pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YVtpXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE9iamVjdFZhbHVlKGRhdGFbaV0sIGluc3RhbmNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzSW5zdGFuY2VbdC5wcm9wZXJ0eU5hbWVdLnB1c2goaW5zdGFuY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjbGFzc0luc3RhbmNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcm90ZWN0ZWQgdXBkYXRlT2JqZWN0KG1vZGVsOiBhbnksIGVudGl0eU9iamVjdDogYW55LCBmb3JtQnVpbGRlckNvbmZpZ3VyYXRpb246IEZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbikge1xyXG4gICAgICAgIGxldCBpbnN0YW5jZUNvbnRhaW5lciA9IGluc3RhbmNlUHJvdmlkZXIobW9kZWwpO1xyXG4gICAgICAgIGxldCBjbGFzc0luc3RhbmNlID0gZ2V0SW5zdGFuY2UobW9kZWwsIFtdKTtcclxuICAgICAgICBpZiAoaW5zdGFuY2VDb250YWluZXIpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2VDb250YWluZXIucHJvcGVydGllcy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGVudGl0eSA9ICgodC5wcm9wZXJ0eVR5cGUgPT0gT0JKRUNUX1BST1BFUlRZIHx8IHQucHJvcGVydHlUeXBlID09IEFSUkFZX1BST1BFUlRZKSAmJiB0LmVudGl0eSkgPyB0LmVudGl0eSA6IChmb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24gJiYgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uLmdlbmVyaWNFbnRpdGllcykgPyBmb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24uZ2VuZXJpY0VudGl0aWVzW3QubmFtZV0gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWVudGl0eSAmJiB0LmVudGl0eVByb3ZpZGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIGVudGl0eSA9IHQuZW50aXR5UHJvdmlkZXIuY2FsbChlbnRpdHlPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0LnByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUFJPUEVSVFk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzSW5zdGFuY2VbdC5uYW1lXSA9IHRoaXMuZ2V0VmFsdWUoZW50aXR5T2JqZWN0LCB0LCBmb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgT0JKRUNUX1BST1BFUlRZOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgb2JqZWN0VmFsdWUgPSB0aGlzLmdldFZhbHVlKGVudGl0eU9iamVjdCwgdCwgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iamVjdFZhbHVlKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzSW5zdGFuY2VbdC5uYW1lXSA9IHRoaXMudXBkYXRlT2JqZWN0KGVudGl0eSwgb2JqZWN0VmFsdWUsIGZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBBUlJBWV9QUk9QRVJUWTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFycmF5T2JqZWN0VmFsdWUgPSB0aGlzLmdldFZhbHVlKGVudGl0eU9iamVjdCwgdCwgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycmF5T2JqZWN0VmFsdWUgJiYgQXJyYXkuaXNBcnJheShhcnJheU9iamVjdFZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NJbnN0YW5jZVt0Lm5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCByb3cgb2YgYXJyYXlPYmplY3RWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnN0YW5jZU9iamVjdCA9IHRoaXMudXBkYXRlT2JqZWN0KGVudGl0eSwgcm93LCBmb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NJbnN0YW5jZVt0Lm5hbWVdLnB1c2goaW5zdGFuY2VPYmplY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2xhc3NJbnN0YW5jZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIGluc3RhY2VQcm92aWRlcihpbnN0YW5jZUZ1bmM6IGFueSwgZW50aXR5T2JqZWN0OiBhbnkpOiBJbnN0YW5jZUNvbnRhaW5lciB7XHJcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlUHJvdmlkZXIoaW5zdGFuY2VGdW5jLCBlbnRpdHlPYmplY3QpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXREZWZhdWx0VmFsdWUocHJvcGVydHlJbmZvOiBQcm9wZXJ0eUluZm8sIHZhbHVlOiBhbnksIGZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbjogRm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uKSB7XHJcbiAgICAgICAgbGV0IGRlZmF1bHRWYWx1ZSA9IChmb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24gJiYgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uLnByb3BzQ29uZmlnICYmIGZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbi5wcm9wc0NvbmZpZ1twcm9wZXJ0eUluZm8ubmFtZV0gJiYgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uLnByb3BzQ29uZmlnW3Byb3BlcnR5SW5mby5uYW1lXS5kZWZhdWx0VmFsdWUgJiYgIVJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsodmFsdWUpKSA/IGZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbi5wcm9wc0NvbmZpZ1twcm9wZXJ0eUluZm8ubmFtZV0uZGVmYXVsdFZhbHVlIDogKHByb3BlcnR5SW5mby5kZWZhdWx0VmFsdWUgIT0gdW5kZWZpbmVkICYmICFSZWdleFZhbGlkYXRvci5pc05vdEJsYW5rKHZhbHVlKSkgP1xyXG4gICAgICAgICAgICBwcm9wZXJ0eUluZm8uZGVmYXVsdFZhbHVlIDpcclxuICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBzYW5pdGl6ZVZhbHVlKGluc3RhbmNlQ29udGFpbmVyOiBJbnN0YW5jZUNvbnRhaW5lciwgcHJvcGVydHlOYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnksIGVudGl0eU9iamVjdDogYW55LCBiYXNlT2JqZWN0OiBhbnkpIHtcclxuICAgICAgICBpZiAoaW5zdGFuY2VDb250YWluZXIuc2FuaXRpemVycyAmJiBpbnN0YW5jZUNvbnRhaW5lci5zYW5pdGl6ZXJzW3Byb3BlcnR5TmFtZV0pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgc2FuaXRpemVyIG9mIGluc3RhbmNlQ29udGFpbmVyLnNhbml0aXplcnNbcHJvcGVydHlOYW1lXSlcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gU0FOSVRJWkVSU1tzYW5pdGl6ZXIubmFtZV0odmFsdWUsc2FuaXRpemVyLmNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChlbnRpdHlPYmplY3RbcHJvcGVydHlOYW1lXSAhPT0gdW5kZWZpbmVkICYmIGVudGl0eU9iamVjdFtwcm9wZXJ0eU5hbWVdICE9PSB2YWx1ZSlcclxuICAgICAgICAgICAgZW50aXR5T2JqZWN0W3Byb3BlcnR5TmFtZV0gPSB2YWx1ZTtcclxuICAgICAgICBpZiAoYmFzZU9iamVjdFtwcm9wZXJ0eU5hbWVdICE9PSB1bmRlZmluZWQgJiYgYmFzZU9iamVjdFtwcm9wZXJ0eU5hbWVdICE9PSB2YWx1ZSlcclxuICAgICAgICAgICAgYmFzZU9iamVjdFtwcm9wZXJ0eU5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0VmFsdWUoZW50aXR5T2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBwcm9wZXJ0eUluZm86IFByb3BlcnR5SW5mbywgZm9ybUJ1aWxkZXJDb25maWd1cmF0aW9uOiBGb3JtQnVpbGRlckNvbmZpZ3VyYXRpb24pIHtcclxuICAgICAgICBsZXQgcHJvcFZhbHVlID0gKHByb3BlcnR5SW5mby5kYXRhUHJvcGVydHlOYW1lKSA/IGVudGl0eU9iamVjdFtwcm9wZXJ0eUluZm8uZGF0YVByb3BlcnR5TmFtZV0gOiBlbnRpdHlPYmplY3RbcHJvcGVydHlJbmZvLm5hbWVdO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldERlZmF1bHRWYWx1ZShwcm9wZXJ0eUluZm8scHJvcFZhbHVlLGZvcm1CdWlsZGVyQ29uZmlndXJhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRPYmplY3RWYWx1ZShlbnRpdHlPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGNsYXNzSW5zdGFuY2U6IGFueSkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbHVtbiBpbiBlbnRpdHlPYmplY3QpIHtcclxuICAgICAgICAgICAgY2xhc3NJbnN0YW5jZVtjb2x1bW5dID0gZW50aXR5T2JqZWN0W2NvbHVtbl07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==