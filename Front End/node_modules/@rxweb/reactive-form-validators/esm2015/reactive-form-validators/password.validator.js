import { RegexValidator } from "../util/regex-validator";
import { getConfigObject } from "../util/config-provider";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { PASSWORD_CONFIG } from "../const/config-names.const";
import { ApplicationUtil } from '../util/app-util';
export function passwordValidator(configModel) {
    function getMessageObject(jObject, keyName) {
        if (!jObject.message && !jObject.messageKey) {
            let message = ObjectMaker.getPasswordMessage();
            jObject.message = message && typeof message == "string" ? message : ApplicationUtil.isObject(message) ? message[keyName] : "";
            if (!jObject.message)
                jObject.message = message["password"];
            jObject.messageKey = "";
        }
        return jObject;
    }
    return (control) => {
        let config = getConfigObject(configModel, control, PASSWORD_CONFIG);
        let controlValue = control.value;
        if (RegexValidator.isNotBlank(controlValue)) {
            let validation = RegexValidator.isValidPassword(config.validation, controlValue);
            let jObject = {};
            jObject.message = (config.message && config.message[validation.keyName]) ? config.message[validation.keyName] : typeof config.message == "string" ? config.message : '';
            jObject.messageKey = (config.messageKey && config.messageKey[validation.keyName]) ? config.messageKey[validation.keyName] : typeof config.messageKey == "string" ? config.messageKey : "";
            jObject = getMessageObject(jObject, validation.keyName);
            if (!validation.isValid)
                return ObjectMaker.toJson(AnnotationTypes.password, jObject, [controlValue]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInJlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9wYXNzd29yZC52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXpELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDbEQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFdBQTJCO0lBQ3pELFNBQVMsZ0JBQWdCLENBQUMsT0FBK0IsRUFBRSxPQUFlO1FBQ3RFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN6QyxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUMvQyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxPQUFPLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO2dCQUNoQixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMxQyxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUMzQjtRQUNELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUM7SUFDSCxPQUFPLENBQUMsT0FBd0IsRUFBMEIsRUFBRTtRQUN4RCxJQUFJLE1BQU0sR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxlQUFlLENBQUMsQ0FBQztRQUN0RSxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO1FBQ2pDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtZQUN6QyxJQUFJLFVBQVUsR0FBRyxjQUFjLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsWUFBWSxDQUFDLENBQUM7WUFDakYsSUFBSSxPQUFPLEdBQU8sRUFBRSxDQUFDO1lBQ3JCLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxPQUFPLElBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUU7WUFDeEssT0FBTyxDQUFDLFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLFVBQVUsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUMxTCxPQUFPLEdBQUcsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUMxRCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU87Z0JBQ3JCLE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUE7U0FDL0U7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUU1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBWYWxpZGF0b3JGbixcclxuICBBYnN0cmFjdENvbnRyb2xcclxufSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi4vdXRpbC9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgUGFzc3dvcmRDb25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9wYXNzd29yZC1jb25maWdcIjtcclxuaW1wb3J0IHtnZXRDb25maWdPYmplY3R9IGZyb20gXCIuLi91dGlsL2NvbmZpZy1wcm92aWRlclwiO1xyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuLi91dGlsL29iamVjdC1tYWtlclwiO1xyXG5pbXBvcnQgeyBBbm5vdGF0aW9uVHlwZXMgfSBmcm9tIFwiLi4vY29yZS92YWxpZGF0b3Iuc3RhdGljXCI7XHJcbmltcG9ydCB7IFBBU1NXT1JEX0NPTkZJRyB9IGZyb20gXCIuLi9jb25zdC9jb25maWctbmFtZXMuY29uc3RcIjtcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSAnLi4vdXRpbC9hcHAtdXRpbCdcclxuZXhwb3J0IGZ1bmN0aW9uIHBhc3N3b3JkVmFsaWRhdG9yKGNvbmZpZ01vZGVsOiBQYXNzd29yZENvbmZpZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIGZ1bmN0aW9uIGdldE1lc3NhZ2VPYmplY3Qoak9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwga2V5TmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKCFqT2JqZWN0Lm1lc3NhZ2UgJiYgIWpPYmplY3QubWVzc2FnZUtleSkge1xyXG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9IE9iamVjdE1ha2VyLmdldFBhc3N3b3JkTWVzc2FnZSgpO1xyXG4gICAgICAgICAgICBqT2JqZWN0Lm1lc3NhZ2UgPSBtZXNzYWdlICYmIHR5cGVvZiBtZXNzYWdlID09IFwic3RyaW5nXCIgPyBtZXNzYWdlIDogQXBwbGljYXRpb25VdGlsLmlzT2JqZWN0KG1lc3NhZ2UpID8gbWVzc2FnZVtrZXlOYW1lXSA6IFwiXCI7XHJcbiAgICAgICAgICAgIGlmICghak9iamVjdC5tZXNzYWdlKVxyXG4gICAgICAgICAgICAgICAgak9iamVjdC5tZXNzYWdlID0gbWVzc2FnZVtcInBhc3N3b3JkXCJdO1xyXG4gICAgICAgICAgICBqT2JqZWN0Lm1lc3NhZ2VLZXkgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gak9iamVjdFxyXG4gICAgfVxyXG4gIHJldHVybiAoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9PiB7XHJcbiAgICAgIGxldCBjb25maWcgPSBnZXRDb25maWdPYmplY3QoY29uZmlnTW9kZWwsIGNvbnRyb2wsIFBBU1NXT1JEX0NPTkZJRyk7XHJcbiAgICBsZXQgY29udHJvbFZhbHVlID0gY29udHJvbC52YWx1ZTtcclxuICAgIGlmIChSZWdleFZhbGlkYXRvci5pc05vdEJsYW5rKGNvbnRyb2xWYWx1ZSkpIHtcclxuICAgICAgICBsZXQgdmFsaWRhdGlvbiA9IFJlZ2V4VmFsaWRhdG9yLmlzVmFsaWRQYXNzd29yZChjb25maWcudmFsaWRhdGlvbiwgY29udHJvbFZhbHVlKTtcclxuICAgICAgICBsZXQgak9iamVjdDphbnkgPSB7fTtcclxuICAgICAgICBqT2JqZWN0Lm1lc3NhZ2UgPSAoY29uZmlnLm1lc3NhZ2UgJiYgY29uZmlnLm1lc3NhZ2VbdmFsaWRhdGlvbi5rZXlOYW1lXSkgPyBjb25maWcubWVzc2FnZVt2YWxpZGF0aW9uLmtleU5hbWVdIDogdHlwZW9mIGNvbmZpZy5tZXNzYWdlID09XCJzdHJpbmdcIiA/IGNvbmZpZy5tZXNzYWdlIDogJycgO1xyXG4gICAgICAgIGpPYmplY3QubWVzc2FnZUtleSA9IChjb25maWcubWVzc2FnZUtleSAmJiBjb25maWcubWVzc2FnZUtleVt2YWxpZGF0aW9uLmtleU5hbWVdKSA/IGNvbmZpZy5tZXNzYWdlS2V5W3ZhbGlkYXRpb24ua2V5TmFtZV0gOiB0eXBlb2YgY29uZmlnLm1lc3NhZ2VLZXkgPT0gXCJzdHJpbmdcIiA/IGNvbmZpZy5tZXNzYWdlS2V5IDogXCJcIjtcclxuICAgICAgICBqT2JqZWN0ID0gZ2V0TWVzc2FnZU9iamVjdChqT2JqZWN0LCB2YWxpZGF0aW9uLmtleU5hbWUpO1xyXG4gICAgICBpZiAoIXZhbGlkYXRpb24uaXNWYWxpZClcclxuICAgICAgICByZXR1cm4gT2JqZWN0TWFrZXIudG9Kc29uKEFubm90YXRpb25UeXBlcy5wYXNzd29yZCwgak9iamVjdCwgW2NvbnRyb2xWYWx1ZV0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG5cclxuICB9XHJcbn1cclxuIl19