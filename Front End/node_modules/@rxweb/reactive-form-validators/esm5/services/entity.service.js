import * as tslib_1 from "tslib";
function isObjectType(value) {
    return !(typeof value == "string" || typeof value === "number" || typeof value === "boolean" || value instanceof Date);
}
function isObject(value) {
    return Object.prototype.toString.call(value) === '[object Object]';
}
export function clone(jsonObject) {
    var e_1, _a;
    var jObject = {};
    if (isObjectType(jsonObject)) {
        for (var columnName in jsonObject) {
            if ((columnName != "formGroup")) {
                if (Array.isArray(jsonObject[columnName])) {
                    jObject[columnName] = [];
                    try {
                        for (var _b = (e_1 = void 0, tslib_1.__values(jsonObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var row = _c.value;
                            if (isObject(row))
                                jObject[columnName].push(clone(row));
                            else
                                jObject[columnName].push(row);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
                    jObject[columnName] = clone(jsonObject[columnName]);
                else
                    jObject[columnName] = jsonObject[columnName];
            }
        }
        return jObject;
    }
    else
        return jsonObject;
}
export function merge(firstObject, secondObject) {
    var e_2, _a;
    for (var columnName in secondObject) {
        if (Array.isArray(secondObject[columnName])) {
            if (!firstObject[columnName])
                firstObject[columnName] = [];
            try {
                for (var _b = (e_2 = void 0, tslib_1.__values(secondObject[columnName])), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    firstObject[columnName].push(clone(row));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        else if (typeof firstObject[columnName] == "object" && !(firstObject[columnName] instanceof RegExp))
            firstObject[columnName] = merge(firstObject[columnName], secondObject[columnName]);
        else
            firstObject[columnName] = secondObject[columnName];
    }
    return firstObject;
}
export function isMatched(jsonObject, compareObject) {
    var isModified = false;
    for (var columnName in compareObject) {
        if (Array.isArray(jsonObject[columnName])) {
            for (var i = 0; i < jsonObject[columnName].length; i++) {
                isModified = isMatched(jsonObject[columnName][i], compareObject[columnName][i]);
            }
        }
        else if (typeof jsonObject[columnName] == "object" && !(jsonObject[columnName] instanceof RegExp))
            isModified = isMatched(jsonObject[columnName], compareObject[columnName]);
        else
            isModified = !(jsonObject[columnName] == compareObject[columnName]);
        if (isModified)
            break;
    }
    return isModified;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsic2VydmljZXMvZW50aXR5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUVBLFNBQVMsWUFBWSxDQUFDLEtBQVM7SUFDM0IsT0FBTyxDQUFDLENBQUMsT0FBTyxLQUFLLElBQUksUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxZQUFZLElBQUksQ0FBQyxDQUFDO0FBQzNILENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxLQUFVO0lBQ3hCLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLGlCQUFpQixDQUFDO0FBQ3ZFLENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLFVBQWtDOztJQUNwRCxJQUFJLE9BQU8sR0FBUSxFQUFFLENBQUM7SUFDdEIsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDLEVBQUU7UUFDMUIsS0FBSyxJQUFJLFVBQVUsSUFBSSxVQUFVLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFVBQVUsSUFBSyxXQUFXLENBQUMsRUFBRTtnQkFDOUIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO29CQUN2QyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDOzt3QkFDekIsS0FBZ0IsSUFBQSxvQkFBQSxpQkFBQSxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxnQkFBQSw0QkFBRTs0QkFBbkMsSUFBSSxHQUFHLFdBQUE7NEJBQ1IsSUFBSSxRQUFRLENBQUMsR0FBRyxDQUFDO2dDQUNiLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7O2dDQUVwQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO3lCQUNwQzs7Ozs7Ozs7O2lCQUNKO3FCQUFNLElBQUksT0FBTyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksUUFBUSxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFlBQVksTUFBTSxDQUFDO29CQUMvRixPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDOztvQkFFcEQsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQTthQUNuRDtTQUNKO1FBQ0QsT0FBTyxPQUFPLENBQUM7S0FDbEI7O1FBRUcsT0FBTyxVQUFVLENBQUM7QUFDdEIsQ0FBQztBQUVMLE1BQU0sVUFBVSxLQUFLLENBQUMsV0FBbUMsRUFBRSxZQUFvQzs7SUFDdkYsS0FBSyxJQUFJLFVBQVUsSUFBSSxZQUFZLEVBQUU7UUFDakMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFO1lBQ3pDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDO2dCQUN4QixXQUFXLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDOztnQkFDakMsS0FBZ0IsSUFBQSxvQkFBQSxpQkFBQSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQSxnQkFBQTtvQkFBbkMsSUFBSSxHQUFHLFdBQUE7b0JBQ1IsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtpQkFBQTs7Ozs7Ozs7O1NBQy9DO2FBQU0sSUFBSSxPQUFPLFdBQVcsQ0FBQyxVQUFVLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsWUFBWSxNQUFNLENBQUM7WUFDakcsV0FBVyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7O1lBRWxGLFdBQVcsQ0FBQyxVQUFVLENBQUMsR0FBRyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7S0FDMUQ7SUFDRCxPQUFPLFdBQVcsQ0FBQztBQUMzQixDQUFDO0FBRUQsTUFBTSxVQUFVLFNBQVMsQ0FBQyxVQUFrQyxFQUFFLGFBQXFDO0lBQy9GLElBQUksVUFBVSxHQUFZLEtBQUssQ0FBQztJQUNoQyxLQUFLLElBQUksVUFBVSxJQUFJLGFBQWEsRUFBRTtRQUM5QixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7WUFDdkMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BELFVBQVUsR0FBRyxTQUFTLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ2xGO1NBQ0o7YUFBTSxJQUFJLE9BQU8sVUFBVSxDQUFDLFVBQVUsQ0FBQyxJQUFJLFFBQVEsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxZQUFZLE1BQU0sQ0FBQztZQUMvRixVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQzs7WUFFMUUsVUFBVSxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDeEUsSUFBSSxVQUFVO1lBQ1YsTUFBTTtLQUNqQjtJQUNHLE9BQU8sVUFBVSxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuXHJcbmZ1bmN0aW9uIGlzT2JqZWN0VHlwZSh2YWx1ZTphbnkpIHtcclxuICAgIHJldHVybiAhKHR5cGVvZiB2YWx1ZSA9PSBcInN0cmluZ1wiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiIHx8IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlOiBhbnkpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpID09PSAnW29iamVjdCBPYmplY3RdJztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsb25lKGpzb25PYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGxldCBqT2JqZWN0OiBhbnkgPSB7fTtcclxuICAgIGlmIChpc09iamVjdFR5cGUoanNvbk9iamVjdCkpIHtcclxuICAgICAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGpzb25PYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKChjb2x1bW5OYW1lICAhPSBcImZvcm1Hcm91cFwiKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbk9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcm93IG9mIGpzb25PYmplY3RbY29sdW1uTmFtZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHJvdykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdLnB1c2goY2xvbmUocm93KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXS5wdXNoKHJvdylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBqc29uT2JqZWN0W2NvbHVtbk5hbWVdID09IFwib2JqZWN0XCIgJiYgIShqc29uT2JqZWN0W2NvbHVtbk5hbWVdIGluc3RhbmNlb2YgUmVnRXhwKSlcclxuICAgICAgICAgICAgICAgICAgICBqT2JqZWN0W2NvbHVtbk5hbWVdID0gY2xvbmUoanNvbk9iamVjdFtjb2x1bW5OYW1lXSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgak9iamVjdFtjb2x1bW5OYW1lXSA9IGpzb25PYmplY3RbY29sdW1uTmFtZV1cclxuICAgICAgICAgICAgfSBcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGpPYmplY3Q7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIGpzb25PYmplY3Q7XHJcbiAgICB9XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2UoZmlyc3RPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIHNlY29uZE9iamVjdDogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkge1xyXG4gICAgICAgIGZvciAodmFyIGNvbHVtbk5hbWUgaW4gc2Vjb25kT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZmlyc3RPYmplY3RbY29sdW1uTmFtZV0pXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHJvdyBvZiBzZWNvbmRPYmplY3RbY29sdW1uTmFtZV0pXHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0ucHVzaChjbG9uZShyb3cpKVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9PSBcIm9iamVjdFwiICYmICEoZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gaW5zdGFuY2VvZiBSZWdFeHApKVxyXG4gICAgICAgICAgICAgICAgZmlyc3RPYmplY3RbY29sdW1uTmFtZV0gPSBtZXJnZShmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSwgc2Vjb25kT2JqZWN0W2NvbHVtbk5hbWVdKVxyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBmaXJzdE9iamVjdFtjb2x1bW5OYW1lXSA9IHNlY29uZE9iamVjdFtjb2x1bW5OYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZpcnN0T2JqZWN0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNNYXRjaGVkKGpzb25PYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGNvbXBhcmVPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgIGxldCBpc01vZGlmaWVkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBmb3IgKHZhciBjb2x1bW5OYW1lIGluIGNvbXBhcmVPYmplY3QpIHtcclxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbk9iamVjdFtjb2x1bW5OYW1lXSkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwganNvbk9iamVjdFtjb2x1bW5OYW1lXS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTW9kaWZpZWQgPSBpc01hdGNoZWQoanNvbk9iamVjdFtjb2x1bW5OYW1lXVtpXSwgY29tcGFyZU9iamVjdFtjb2x1bW5OYW1lXVtpXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YganNvbk9iamVjdFtjb2x1bW5OYW1lXSA9PSBcIm9iamVjdFwiICYmICEoanNvbk9iamVjdFtjb2x1bW5OYW1lXSBpbnN0YW5jZW9mIFJlZ0V4cCkpXHJcbiAgICAgICAgICAgICAgICBpc01vZGlmaWVkID0gaXNNYXRjaGVkKGpzb25PYmplY3RbY29sdW1uTmFtZV0sIGNvbXBhcmVPYmplY3RbY29sdW1uTmFtZV0pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBpc01vZGlmaWVkID0gIShqc29uT2JqZWN0W2NvbHVtbk5hbWVdID09IGNvbXBhcmVPYmplY3RbY29sdW1uTmFtZV0pO1xyXG4gICAgICAgICAgICBpZiAoaXNNb2RpZmllZClcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgICAgIHJldHVybiBpc01vZGlmaWVkO1xyXG59XHJcbiJdfQ==