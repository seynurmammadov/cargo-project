import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { defaultContainer } from "../core/defaultContainer";
import { OBJECT_PROPERTY, PROPERTY } from "../const";
import { ApplicationUtil } from "../util/app-util";
import { TEMPLATE_VALIDATION_CONFIG } from '../const/app.const';
export class BaseDirective {
    applyValidations(controls, model = null) {
        if (this.model) {
            let modelConfig = defaultContainer.get(model || this.model.constructor);
            if (modelConfig) {
                modelConfig.properties.forEach(property => {
                    if (controls[property.name]) {
                        switch (property.propertyType) {
                            case PROPERTY:
                                this.setValidatorConfig(controls[property.name], modelConfig, property);
                                break;
                            case OBJECT_PROPERTY:
                                this.applyValidations(controls[property.name].controls, property.entity);
                                break;
                        }
                    }
                });
            }
        }
    }
    setValidatorConfig(control, modelConfig, property) {
        let annotations = modelConfig.propertyAnnotations.filter(t => t.propertyName == property.name);
        annotations.forEach(annotation => {
            if (!control[TEMPLATE_VALIDATION_CONFIG])
                control[TEMPLATE_VALIDATION_CONFIG] = {};
            ApplicationUtil.configureControl(control, annotation.config ? annotation.config : "", annotation.annotationType);
        });
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], BaseDirective.prototype, "model", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZm9ybS12YWxpZGF0b3JzLyIsInNvdXJjZXMiOlsiZGlyZWN0aXZlcy9iYXNlLWRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV0QyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUMxRCxPQUFPLEVBQUcsZUFBZSxFQUFFLFFBQVEsRUFBQyxNQUFNLFVBQVUsQ0FBQTtBQUVwRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbkQsT0FBTyxFQUFFLDBCQUEwQixFQUFHLE1BQU0sb0JBQW9CLENBQUE7QUFDaEUsTUFBTSxPQUFnQixhQUFhO0lBRy9CLGdCQUFnQixDQUFDLFFBQVksRUFBQyxRQUFZLElBQUk7UUFDMUMsSUFBRyxJQUFJLENBQUMsS0FBSyxFQUFDO1lBQ1YsSUFBSSxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3hFLElBQUcsV0FBVyxFQUFDO2dCQUNYLFdBQVcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO29CQUN0QyxJQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUM7d0JBQzNCLFFBQU8sUUFBUSxDQUFDLFlBQVksRUFBRTs0QkFDMUIsS0FBSyxRQUFRO2dDQUNULElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFDLFdBQVcsRUFBQyxRQUFRLENBQUMsQ0FBQztnQ0FDMUUsTUFBTTs0QkFDTixLQUFLLGVBQWU7Z0NBQ2hCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7Z0NBQzVFLE1BQU07eUJBQ1Q7cUJBQ0o7Z0JBQ0QsQ0FBQyxDQUFDLENBQUE7YUFDTDtTQUNKO0lBQ0wsQ0FBQztJQUVPLGtCQUFrQixDQUFDLE9BQXVCLEVBQUMsV0FBNkIsRUFBQyxRQUFxQjtRQUNsRyxJQUFJLFdBQVcsR0FBRSxXQUFXLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0YsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUM3QixJQUFHLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDO2dCQUN2QyxPQUFPLENBQUMsMEJBQTBCLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDekMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQ3BILENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKO0FBOUJZO0lBQVIsS0FBSyxFQUFFOzs0Q0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElucHV0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCJcclxuaW1wb3J0IHtkZWZhdWx0Q29udGFpbmVyIH0gZnJvbSBcIi4uL2NvcmUvZGVmYXVsdENvbnRhaW5lclwiXHJcbmltcG9ydCB7ICBPQkpFQ1RfUFJPUEVSVFksIFBST1BFUlRZfSBmcm9tIFwiLi4vY29uc3RcIlxyXG5pbXBvcnQgeyAgSW5zdGFuY2VDb250YWluZXIsIFByb3BlcnR5SW5mbyB9IGZyb20gJy4uL2NvcmUvdmFsaWRhdG9yLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gXCIuLi91dGlsL2FwcC11dGlsXCI7XHJcbmltcG9ydCB7IFRFTVBMQVRFX1ZBTElEQVRJT05fQ09ORklHICB9IGZyb20gJy4uL2NvbnN0L2FwcC5jb25zdCdcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VEaXJlY3RpdmUge1xyXG4gICAgQElucHV0KCkgbW9kZWw6YW55O1xyXG4gICAgXHJcbiAgICBhcHBseVZhbGlkYXRpb25zKGNvbnRyb2xzOmFueSxtb2RlbDphbnkgPSBudWxsKXtcclxuICAgICAgICBpZih0aGlzLm1vZGVsKXtcclxuICAgICAgICAgICAgbGV0IG1vZGVsQ29uZmlnID0gZGVmYXVsdENvbnRhaW5lci5nZXQobW9kZWwgfHwgdGhpcy5tb2RlbC5jb25zdHJ1Y3Rvcik7XHJcbiAgICAgICAgICAgIGlmKG1vZGVsQ29uZmlnKXtcclxuICAgICAgICAgICAgICAgIG1vZGVsQ29uZmlnLnByb3BlcnRpZXMuZm9yRWFjaChwcm9wZXJ0eSA9PntcclxuICAgICAgICAgICAgICAgICAgICBpZihjb250cm9sc1twcm9wZXJ0eS5uYW1lXSl7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoKHByb3BlcnR5LnByb3BlcnR5VHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBST1BFUlRZOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRWYWxpZGF0b3JDb25maWcoY29udHJvbHNbcHJvcGVydHkubmFtZV0sbW9kZWxDb25maWcscHJvcGVydHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBPQkpFQ1RfUFJPUEVSVFk6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5VmFsaWRhdGlvbnMoY29udHJvbHNbcHJvcGVydHkubmFtZV0uY29udHJvbHMscHJvcGVydHkuZW50aXR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFZhbGlkYXRvckNvbmZpZyhjb250cm9sOkFic3RyYWN0Q29udHJvbCxtb2RlbENvbmZpZzpJbnN0YW5jZUNvbnRhaW5lcixwcm9wZXJ0eTpQcm9wZXJ0eUluZm8pe1xyXG4gICAgICAgIGxldCBhbm5vdGF0aW9ucz0gbW9kZWxDb25maWcucHJvcGVydHlBbm5vdGF0aW9ucy5maWx0ZXIodD0+IHQucHJvcGVydHlOYW1lID09IHByb3BlcnR5Lm5hbWUpO1xyXG4gICAgICAgIGFubm90YXRpb25zLmZvckVhY2goYW5ub3RhdGlvbiA9PntcclxuICAgICAgICAgICAgaWYoIWNvbnRyb2xbVEVNUExBVEVfVkFMSURBVElPTl9DT05GSUddKVxyXG4gICAgICAgICAgICBjb250cm9sW1RFTVBMQVRFX1ZBTElEQVRJT05fQ09ORklHXSA9IHt9O1xyXG4gICAgICAgICAgICBBcHBsaWNhdGlvblV0aWwuY29uZmlndXJlQ29udHJvbChjb250cm9sLCBhbm5vdGF0aW9uLmNvbmZpZyA/IGFubm90YXRpb24uY29uZmlnIDogXCJcIiwgYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59XHJcbiJdfQ==