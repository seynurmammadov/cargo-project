var FileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
const VALIDATOR_CONFIG = "validatorConfig";
const FILE_VALIDATOR_NAMES = ["extension", "fileSize", "file"];
let FileControlDirective = FileControlDirective_1 = class FileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.validators = [];
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this.element = elementRef.nativeElement;
    }
    onChangeCall(element) {
        let files = element.files;
        if (this.writeFile)
            this.onChange(files);
        else {
            if (files.length > 0)
                this.onChange(element.value);
            else
                this.onChange(undefined);
        }
    }
    writeValue(value) { }
    registerOnChange(invocation) { this.onChange = invocation; }
    registerOnTouched(invocation) { this.onTouched = invocation; }
    set extension(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[0], config);
    }
    set fileSize(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[1], config);
    }
    set file(config) {
        this.pushValidator(FILE_VALIDATOR_NAMES[2], config);
    }
    setConfig(control) {
        FILE_VALIDATOR_NAMES.forEach(t => {
            if (!this[t] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][t])
                this[t] = control[VALIDATOR_CONFIG][t];
        });
        this.isProcessed = true;
    }
    pushValidator(validatorName, config) {
        if (config)
            this.validators.push(APP_VALIDATORS[validatorName](config));
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        var result = null;
        for (var validator of this.validators) {
            result = validator(control, this.element.files);
            if (result)
                break;
        }
        return result;
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], FileControlDirective.prototype, "writeFile", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FileControlDirective.prototype, "extension", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FileControlDirective.prototype, "fileSize", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], FileControlDirective.prototype, "file", null);
FileControlDirective = FileControlDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=file]",
        host: {
            "(change)": "onChangeCall($event.target)",
            "(blur)": "onTouched()"
        },
        providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: FileControlDirective_1, multi: true }, {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(() => FileControlDirective_1),
                multi: true
            }]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], FileControlDirective);
export { FileControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBbUIsYUFBYSxFQUFhLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFOUYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE1BQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLENBQUM7QUFDM0MsTUFBTSxvQkFBb0IsR0FBYSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFhekUsSUFBYSxvQkFBb0IsNEJBQWpDLE1BQWEsb0JBQW9CO0lBdUM3QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBcEMxQyxnQkFBVyxHQUFZLEtBQUssQ0FBQztRQUdyQixlQUFVLEdBQWUsRUFBRSxDQUFDO1FBRXBDLGFBQVEsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLGNBQVMsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUErQmxCLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLGFBQXFCLENBQUM7SUFDcEQsQ0FBQztJQTlCRCxZQUFZLENBQUMsT0FBeUI7UUFDbEMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUMxQixJQUFJLElBQUksQ0FBQyxTQUFTO1lBQ2QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNwQjtZQUNELElBQUksS0FB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YUFDZCxDQUFDO0tBQ0wsQ0FBQzs2Q0F3Q2tDLFVBQVU7R0F2Q2pDLG9CQUFvQixDQW1FaEM7U0FuRVksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQsIERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IEV4dGVuc2lvbkNvbmZpZywgU2l6ZUNvbmZpZywgRmlsZUNvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVscy9jb25maWcnXHJcbmltcG9ydCB7IEFQUF9WQUxJREFUT1JTIH0gZnJvbSBcIi4uLy4uL2NvbnN0L2FwcC12YWxpZGF0b3JzLmNvbnN0XCI7XHJcbmNvbnN0IFZBTElEQVRPUl9DT05GSUcgPSBcInZhbGlkYXRvckNvbmZpZ1wiO1xyXG5jb25zdCBGSUxFX1ZBTElEQVRPUl9OQU1FUzogc3RyaW5nW10gPSBbXCJleHRlbnNpb25cIiwgXCJmaWxlU2l6ZVwiLCBcImZpbGVcIl07XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiaW5wdXRbdHlwZT1maWxlXVwiLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgIFwiKGNoYW5nZSlcIjogXCJvbkNoYW5nZUNhbGwoJGV2ZW50LnRhcmdldClcIixcclxuICAgICAgICBcIihibHVyKVwiOiBcIm9uVG91Y2hlZCgpXCJcclxuICAgIH0sXHJcbiAgICBwcm92aWRlcnM6IFt7IHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLCB1c2VFeGlzdGluZzogRmlsZUNvbnRyb2xEaXJlY3RpdmUsIG11bHRpOiB0cnVlIH0sIHtcclxuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxyXG4gICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEZpbGVDb250cm9sRGlyZWN0aXZlKSxcclxuICAgICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgfV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbGVDb250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcclxuICAgIGZpbGVzOiBhbnk7XHJcbiAgICBlbGVtZW50OiBhbnlcclxuICAgIGlzUHJvY2Vzc2VkOiBib29sZWFuID0gZmFsc2U7XHJcbiAgICBcclxuXHJcbiAgICBwcml2YXRlIHZhbGlkYXRvcnM6IEZ1bmN0aW9uW10gPSBbXTtcclxuXHJcbiAgICBvbkNoYW5nZSA9IChfKSA9PiB7IH07XHJcbiAgICBvblRvdWNoZWQgPSAoKSA9PiB7IH07XHJcblxyXG4gICAgb25DaGFuZ2VDYWxsKGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICBsZXQgZmlsZXMgPSBlbGVtZW50LmZpbGVzO1xyXG4gICAgICAgIGlmICh0aGlzLndyaXRlRmlsZSlcclxuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShmaWxlcyk7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChmaWxlcy5sZW5ndGggPiAwKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShlbGVtZW50LnZhbHVlKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSh1bmRlZmluZWQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlKSB7IH1cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoaW52b2NhdGlvbjogYW55KSB7IHRoaXMub25DaGFuZ2UgPSBpbnZvY2F0aW9uOyB9XHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChpbnZvY2F0aW9uOiBhbnkpIHsgdGhpcy5vblRvdWNoZWQgPSBpbnZvY2F0aW9uOyB9XHJcblxyXG4gICAgQElucHV0KCkgd3JpdGVGaWxlOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgc2V0IGV4dGVuc2lvbihjb25maWc6IEV4dGVuc2lvbkNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucHVzaFZhbGlkYXRvcihGSUxFX1ZBTElEQVRPUl9OQU1FU1swXSwgY29uZmlnKVxyXG4gICAgfVxyXG4gICAgQElucHV0KCkgc2V0IGZpbGVTaXplKGNvbmZpZzogU2l6ZUNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucHVzaFZhbGlkYXRvcihGSUxFX1ZBTElEQVRPUl9OQU1FU1sxXSwgY29uZmlnKVxyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpIHNldCBmaWxlKGNvbmZpZzogRmlsZUNvbmZpZykge1xyXG4gICAgICAgIHRoaXMucHVzaFZhbGlkYXRvcihGSUxFX1ZBTElEQVRPUl9OQU1FU1syXSwgY29uZmlnKVxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZikge1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbmZpZyhjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpIHtcclxuICAgICAgICBGSUxFX1ZBTElEQVRPUl9OQU1FUy5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXNbdF0gJiYgY29udHJvbFtWQUxJREFUT1JfQ09ORklHXSAmJiBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddW3RdKVxyXG4gICAgICAgICAgICAgICAgdGhpc1t0XSA9IGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11bdF07XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLmlzUHJvY2Vzc2VkID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdXNoVmFsaWRhdG9yKHZhbGlkYXRvck5hbWU6IHN0cmluZywgY29uZmlnOiBFeHRlbnNpb25Db25maWcgfCBTaXplQ29uZmlnIHwgRmlsZUNvbmZpZykge1xyXG4gICAgICAgIGlmIChjb25maWcpXHJcbiAgICAgICAgICAgIHRoaXMudmFsaWRhdG9ycy5wdXNoKEFQUF9WQUxJREFUT1JTW3ZhbGlkYXRvck5hbWVdKGNvbmZpZykpXHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUHJvY2Vzc2VkKVxyXG4gICAgICAgICAgICB0aGlzLnNldENvbmZpZyhjb250cm9sKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbnVsbDtcclxuICAgICAgICBmb3IgKHZhciB2YWxpZGF0b3Igb2YgdGhpcy52YWxpZGF0b3JzKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHZhbGlkYXRvcihjb250cm9sLCB0aGlzLmVsZW1lbnQuZmlsZXMpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0KVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRcclxuICAgIH1cclxufVxyXG4iXX0=