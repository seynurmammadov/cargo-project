import { Renderer2 } from "@angular/core";
import { FormControl } from "@angular/forms";
import { MaskConfig } from "../../models/config/mask-config";
export declare class MaskProvider {
    private input;
    private mask;
    private renderer;
    private formControl;
    private config;
    private eventListeners;
    oldValue: string;
    type: string;
    slotChar: string;
    autoClear: boolean;
    value: any;
    defs: any;
    tests: any[];
    partialPosition: any;
    firstNonMaskPos: number;
    lastRequiredNonMaskPos: any;
    len: number;
    oldVal: string;
    buffer: any;
    defaultBuffer: string;
    focusText: string;
    caretTimeoutId: any;
    androidChrome: boolean;
    focus: boolean;
    filled: boolean;
    minLength: number;
    constructor(input: HTMLInputElement, mask: string, renderer: Renderer2, formControl: FormControl, config: MaskConfig);
    bind(): void;
    bindEvents(): void;
    isInvalid: boolean;
    validate(): any;
    writeValue(value: any): void;
    caret(first?: number, last?: number): {
        begin: any;
        end: any;
    };
    isCompleted(lastRequiredNonMaskPos?: number, isNotRunValidator?: boolean): boolean;
    getPlaceholder(i: number): string;
    seekNext(pos: any): any;
    seekPrev(pos: any): any;
    shiftL(begin: number, end: number): void;
    shiftR(pos: any): void;
    handleAndroidInput(e: any): void;
    onBlur(e: any): void;
    onKeyDown(e: any): void;
    onKeyPress(e: any): void;
    internalProcess: boolean;
    clearBuffer(start: any, end: any): void;
    writeBuffer(): void;
    checkVal(allow?: boolean): any;
    onFocus(event: any): void;
    onInput(event: any): void;
    setControlValue(e: any, isValid: any, isValidControl?: boolean): void;
    handleInputChange(event: any): void;
    getUnmaskedValue(): string;
    updateModel(e: any): void;
    updateFilledState(): void;
    onDestroy(): void;
}
