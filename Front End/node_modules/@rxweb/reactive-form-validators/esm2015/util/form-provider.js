import { Linq } from './linq';
import { ApplicationUtil } from './app-util';
import { RxFormGroup } from "../services/rx-form-group";
export class FormProvider {
    static ProcessRule(control, config, isDynamicConfig = false) {
        if (config && config.expressionProcessed)
            return true;
        const formGroupValue = ApplicationUtil.getParentObjectValue(control);
        const parentObject = (control.parent) ? ApplicationUtil.cloneValue(control.parent.value) : undefined;
        let modelInstance = undefined;
        if (control.parent && control.parent instanceof RxFormGroup)
            modelInstance = control.parent.modelInstance;
        if (parentObject) {
            this.updateFormControlValue(parentObject, control.parent.controls, control, config);
            this.forDisableUpdate(parentObject, config);
        }
        else if (config.conditionalExpression)
            return false;
        return Linq.execute(formGroupValue, config, parentObject, modelInstance, isDynamicConfig);
    }
    static updateFormControlValue(parentObject, controls, control, config) {
        for (var controlName in parentObject) {
            if (!(parentObject[controlName] instanceof Object))
                if (controls[controlName] === control) {
                    parentObject[controlName] = control.value;
                    break;
                }
        }
    }
    static forDisableUpdate(parentObject, config) {
        if (config.disableConfig)
            Object.keys(config.disableConfig).forEach(column => {
                parentObject[column] = config.disableConfig[column];
            });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ1dGlsL2Zvcm0tcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM5QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBSzdDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUV2RCxNQUFNLE9BQU8sWUFBWTtJQUlyQixNQUFNLENBQUMsV0FBVyxDQUFDLE9BQXdCLEVBQUUsTUFBVyxFQUFFLGtCQUEyQixLQUFLO1FBQ3RGLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxtQkFBbUI7WUFDcEMsT0FBTyxJQUFJLENBQUM7UUFDaEIsTUFBTSxjQUFjLEdBQUcsZUFBZSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztRQUNyRyxJQUFJLGFBQWEsR0FBRyxTQUFTLENBQUM7UUFDOUIsSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLE9BQU8sQ0FBQyxNQUFNLFlBQVksV0FBVztZQUN2RCxhQUFhLEdBQWlCLE9BQU8sQ0FBQyxNQUFPLENBQUMsYUFBYSxDQUFDO1FBQ2hFLElBQUksWUFBWSxFQUFFO1lBQ2QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDcEYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQTtTQUM5QzthQUNJLElBQUksTUFBTSxDQUFDLHFCQUFxQjtZQUNqQyxPQUFPLEtBQUssQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFFTyxNQUFNLENBQUMsc0JBQXNCLENBQUMsWUFBb0MsRUFBRSxRQUFhLEVBQUUsT0FBd0IsRUFBRSxNQUFXO1FBQzVILEtBQUssSUFBSSxXQUFXLElBQUksWUFBWSxFQUFFO1lBQ2xDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsWUFBWSxNQUFNLENBQUM7Z0JBQzlDLElBQUksUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLE9BQU8sRUFBRTtvQkFDbkMsWUFBWSxDQUFDLFdBQVcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7b0JBQzFDLE1BQU07aUJBQ1Q7U0FDUjtJQUNMLENBQUM7SUFDTyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLE1BQU07UUFDaEQsSUFBSSxNQUFNLENBQUMsYUFBYTtZQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQy9DLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3hELENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTGlucSB9IGZyb20gJy4vbGlucSc7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gJy4vYXBwLXV0aWwnO1xyXG5pbXBvcnQge1xyXG4gICAgQWJzdHJhY3RDb250cm9sXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcblxyXG5pbXBvcnQgeyBSeEZvcm1Hcm91cCB9IGZyb20gXCIuLi9zZXJ2aWNlcy9yeC1mb3JtLWdyb3VwXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBGb3JtUHJvdmlkZXIge1xyXG5cclxuXHJcblxyXG4gICAgc3RhdGljIFByb2Nlc3NSdWxlKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCwgY29uZmlnOiBhbnksIGlzRHluYW1pY0NvbmZpZzogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiB8IHsgW2tleTogc3RyaW5nXTogYW55IH0ge1xyXG4gICAgICAgIGlmIChjb25maWcgJiYgY29uZmlnLmV4cHJlc3Npb25Qcm9jZXNzZWQpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGNvbnN0IGZvcm1Hcm91cFZhbHVlID0gQXBwbGljYXRpb25VdGlsLmdldFBhcmVudE9iamVjdFZhbHVlKGNvbnRyb2wpO1xyXG4gICAgICAgIGNvbnN0IHBhcmVudE9iamVjdCA9IChjb250cm9sLnBhcmVudCkgPyBBcHBsaWNhdGlvblV0aWwuY2xvbmVWYWx1ZShjb250cm9sLnBhcmVudC52YWx1ZSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgbGV0IG1vZGVsSW5zdGFuY2UgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGNvbnRyb2wucGFyZW50ICYmIGNvbnRyb2wucGFyZW50IGluc3RhbmNlb2YgUnhGb3JtR3JvdXApXHJcbiAgICAgICAgICAgIG1vZGVsSW5zdGFuY2UgPSAoPFJ4Rm9ybUdyb3VwPmNvbnRyb2wucGFyZW50KS5tb2RlbEluc3RhbmNlO1xyXG4gICAgICAgIGlmIChwYXJlbnRPYmplY3QpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVGb3JtQ29udHJvbFZhbHVlKHBhcmVudE9iamVjdCwgY29udHJvbC5wYXJlbnQuY29udHJvbHMsIGNvbnRyb2wsIGNvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9yRGlzYWJsZVVwZGF0ZShwYXJlbnRPYmplY3QsIGNvbmZpZylcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoY29uZmlnLmNvbmRpdGlvbmFsRXhwcmVzc2lvbilcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBMaW5xLmV4ZWN1dGUoZm9ybUdyb3VwVmFsdWUsIGNvbmZpZywgcGFyZW50T2JqZWN0LCBtb2RlbEluc3RhbmNlLCBpc0R5bmFtaWNDb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIHVwZGF0ZUZvcm1Db250cm9sVmFsdWUocGFyZW50T2JqZWN0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBjb250cm9sczogYW55LCBjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsIGNvbmZpZzogYW55KSB7XHJcbiAgICAgICAgZm9yICh2YXIgY29udHJvbE5hbWUgaW4gcGFyZW50T2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICghKHBhcmVudE9iamVjdFtjb250cm9sTmFtZV0gaW5zdGFuY2VvZiBPYmplY3QpKVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2xzW2NvbnRyb2xOYW1lXSA9PT0gY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudE9iamVjdFtjb250cm9sTmFtZV0gPSBjb250cm9sLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHByaXZhdGUgc3RhdGljIGZvckRpc2FibGVVcGRhdGUocGFyZW50T2JqZWN0LCBjb25maWcpIHtcclxuICAgICAgICBpZiAoY29uZmlnLmRpc2FibGVDb25maWcpXHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGNvbmZpZy5kaXNhYmxlQ29uZmlnKS5mb3JFYWNoKGNvbHVtbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnRPYmplY3RbY29sdW1uXSA9IGNvbmZpZy5kaXNhYmxlQ29uZmlnW2NvbHVtbl07XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICB9XHJcbn1cclxuIl19