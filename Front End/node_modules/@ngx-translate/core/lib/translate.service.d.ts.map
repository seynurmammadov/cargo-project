{"version":3,"file":"translate.service.d.ts","sources":["translate.service.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, InjectionToken } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { MissingTranslationHandler } from \"./missing-translation-handler\";\r\nimport { TranslateCompiler } from \"./translate.compiler\";\r\nimport { TranslateLoader } from \"./translate.loader\";\r\nimport { TranslateParser } from \"./translate.parser\";\r\nimport { TranslateStore } from \"./translate.store\";\r\nexport declare const USE_STORE: InjectionToken<string>;\r\nexport declare const USE_DEFAULT_LANG: InjectionToken<string>;\r\nexport declare const DEFAULT_LANGUAGE: InjectionToken<string>;\r\nexport declare const USE_EXTEND: InjectionToken<string>;\r\nexport interface TranslationChangeEvent {\r\n    translations: any;\r\n    lang: string;\r\n}\r\nexport interface LangChangeEvent {\r\n    lang: string;\r\n    translations: any;\r\n}\r\nexport interface DefaultLangChangeEvent {\r\n    lang: string;\r\n    translations: any;\r\n}\r\nexport declare class TranslateService {\r\n    store: TranslateStore;\r\n    currentLoader: TranslateLoader;\r\n    compiler: TranslateCompiler;\r\n    parser: TranslateParser;\r\n    missingTranslationHandler: MissingTranslationHandler;\r\n    private useDefaultLang;\r\n    private isolate;\r\n    private extend;\r\n    private loadingTranslations;\r\n    private pending;\r\n    private _onTranslationChange;\r\n    private _onLangChange;\r\n    private _onDefaultLangChange;\r\n    private _defaultLang;\r\n    private _currentLang;\r\n    private _langs;\r\n    private _translations;\r\n    private _translationRequests;\r\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onTranslationChange(): EventEmitter<TranslationChangeEvent>;\r\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onLangChange(): EventEmitter<LangChangeEvent>;\r\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onDefaultLangChange(): EventEmitter<DefaultLangChangeEvent>;\r\n    /**\r\n     * The default lang to fallback when translations are missing on the current lang\r\n     */\r\n    get defaultLang(): string;\r\n    set defaultLang(defaultLang: string);\r\n    /**\r\n     * The lang currently used\r\n     */\r\n    get currentLang(): string;\r\n    set currentLang(currentLang: string);\r\n    /**\r\n     * an array of langs\r\n     */\r\n    get langs(): string[];\r\n    set langs(langs: string[]);\r\n    /**\r\n     * a list of translations per lang\r\n     */\r\n    get translations(): any;\r\n    set translations(translations: any);\r\n    /**\r\n     *\r\n     * @param store an instance of the store (that is supposed to be unique)\r\n     * @param currentLoader An instance of the loader currently used\r\n     * @param compiler An instance of the compiler currently used\r\n     * @param parser An instance of the parser currently used\r\n     * @param missingTranslationHandler A handler for missing translations.\r\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n     * @param isolate whether this service should use the store or not\r\n     * @param extend To make a child module extend (and use) translations from parent modules.\r\n     * @param defaultLanguage Set the default language using configuration\r\n     */\r\n    constructor(store: TranslateStore, currentLoader: TranslateLoader, compiler: TranslateCompiler, parser: TranslateParser, missingTranslationHandler: MissingTranslationHandler, useDefaultLang: boolean, isolate: boolean, extend: boolean, defaultLanguage: string);\r\n    /**\r\n     * Sets the default language to use as a fallback\r\n     */\r\n    setDefaultLang(lang: string): void;\r\n    /**\r\n     * Gets the default language used\r\n     */\r\n    getDefaultLang(): string;\r\n    /**\r\n     * Changes the lang currently used\r\n     */\r\n    use(lang: string): Observable<any>;\r\n    /**\r\n     * Retrieves the given translations\r\n     */\r\n    private retrieveTranslations;\r\n    /**\r\n     * Gets an object of translations for a given language with the current loader\r\n     * and passes it through the compiler\r\n     */\r\n    getTranslation(lang: string): Observable<any>;\r\n    /**\r\n     * Manually sets an object of translations for a given language\r\n     * after passing it through the compiler\r\n     */\r\n    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void;\r\n    /**\r\n     * Returns an array of currently available langs\r\n     */\r\n    getLangs(): Array<string>;\r\n    /**\r\n     * Add available langs\r\n     */\r\n    addLangs(langs: Array<string>): void;\r\n    /**\r\n     * Update the list of available langs\r\n     */\r\n    private updateLangs;\r\n    /**\r\n     * Returns the parsed result of the translations\r\n     */\r\n    getParsedResult(translations: any, key: any, interpolateParams?: Object): any;\r\n    /**\r\n     * Gets the translated value of a key (or an array of keys)\r\n     * @returns the translated key, or an object of translated keys\r\n     */\r\n    get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the translation changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    getStreamOnTranslationChange(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the language changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\r\n    /**\r\n     * Returns a translation instantly from the internal state of loaded translation.\r\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n     */\r\n    instant(key: string | Array<string>, interpolateParams?: Object): string | any;\r\n    /**\r\n     * Sets the translated value of a key, after compiling it\r\n     */\r\n    set(key: string, value: string, lang?: string): void;\r\n    /**\r\n     * Changes the current lang\r\n     */\r\n    private changeLang;\r\n    /**\r\n     * Changes the default lang\r\n     */\r\n    private changeDefaultLang;\r\n    /**\r\n     * Allows to reload the lang file from the file\r\n     */\r\n    reloadLang(lang: string): Observable<any>;\r\n    /**\r\n     * Deletes inner translation\r\n     */\r\n    resetLang(lang: string): void;\r\n    /**\r\n     * Returns the language code name from the browser, e.g. \"de\"\r\n     */\r\n    getBrowserLang(): string;\r\n    /**\r\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n     */\r\n    getBrowserCultureLang(): string;\r\n}\r\n"]}