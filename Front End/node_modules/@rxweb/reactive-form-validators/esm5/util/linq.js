import * as tslib_1 from "tslib";
import { THIS } from "../const/app.const";
var Linq = /** @class */ (function () {
    function Linq() {
    }
    Linq.functionCreator = function (expression) {
        var functionSetter = [];
        var match = expression.match(/^\s*\(?\s*([^)]*)\s*\)?\s*=>(.*)/);
        var splitSelect = match[2].split(",");
        for (var i = 0; i < splitSelect.length; i++) {
            var equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*|===|!==|==|!=|>=|>|<=|<|(.*)/);
            if (equalToOperator !== null) {
                functionSetter = new Function(match[1], "return " + equalToOperator.input);
            }
            else {
                equalToOperator = splitSelect[i].match(/^\s*\(?\s*([^)]*)\s*\)?\s*=(.*)/);
                if (equalToOperator === null) {
                    functionSetter = new Function(match[1], "return " + splitSelect.input);
                }
                else {
                    functionSetter = new Function(match[1], "return " + equalToOperator.input);
                }
            }
        }
        if (splitSelect.length == 0)
            functionSetter = { accessFunction: new Function(match[1], "return " + match[2]) };
        return functionSetter;
    };
    Linq.execute = function (jObject, config, parentObject, modelInstance, isDynamicConfig) {
        var expressionFunction = isDynamicConfig ? config.dynamicConfig : config.conditionalExpression;
        var lastParam = isDynamicConfig ? config : modelInstance;
        if (parentObject && typeof expressionFunction == "string")
            expressionFunction = Linq.functionCreator(expressionFunction);
        if (parentObject && expressionFunction)
            return modelInstance && modelInstance.constructor !== Object ? expressionFunction.call(modelInstance, parentObject, jObject, lastParam) : expressionFunction(parentObject, jObject, lastParam);
        return true;
    };
    Linq.getConditionPath = function (texts) {
        var path = "";
        for (var i = 1; i < texts.length; i++)
            path += (texts.length - 1) == i ? texts[i].trim() : texts[i].trim() + ".";
        return path;
    };
    Linq.expressionParser = function (expression, isNonValidationExpression) {
        var _this = this;
        var splitExpressions = [];
        var columns = [];
        var expressionString = expression.toString();
        var expressionArguments = Linq.extractArguments(expressionString);
        if (expressionArguments.length > 0) {
            var splitTexts_1 = [];
            expressionString.replace(/\s/g, '').replace(new RegExp(/{|}/, "g"), "").split(new RegExp(/return|===|!==|==|!=|>=|>|<=|<|&&/)).forEach(function (t) {
                var e_1, _a;
                var texts = t.replace(/\(|\)/g, "").split("||");
                try {
                    for (var texts_1 = tslib_1.__values(texts), texts_1_1 = texts_1.next(); !texts_1_1.done; texts_1_1 = texts_1.next()) {
                        var text = texts_1_1.value;
                        splitTexts_1.push(text);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (texts_1_1 && !texts_1_1.done && (_a = texts_1.return)) _a.call(texts_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
            splitTexts_1.forEach(function (t) {
                expressionArguments.forEach(function (x, i) {
                    t = t.trim();
                    if (t.startsWith(x + '.')) {
                        var splitText = t.split('.');
                        if (splitText.length == 2 || (splitText.length >= 2 && isNonValidationExpression))
                            if (!isNonValidationExpression)
                                columns.push({ propName: splitText[1].trim(), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });
                            else
                                columns.push({ propName: _this.getConditionPath(splitText), argumentIndex: i == 3 ? 0 : i == 2 ? 1 : i == 1 ? -1 : i });
                        else {
                            var arrayProp = splitText[1].split('[');
                            var jObject = {
                                propName: splitText[splitText.length - 1].trim(),
                                objectPropName: arrayProp[0],
                                arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined,
                                argumentIndex: i === 3 ? 0 : i === 2 ? 1 : i
                            };
                            columns.push(jObject);
                        }
                    }
                });
            });
        }
        return columns;
    };
    Linq.extractArguments = function (splitText) {
        var expressionArguments = [THIS];
        if (splitText[0].trim() !== "(" && !splitText.trim().startsWith("function")) {
            var text = splitText[0].split("=>")[0];
            expressionArguments.push(text.trim().replace("(", "").replace(")", ""));
        }
        else {
            var splitTexts = splitText.match(/\(([^)]+)\)/g);
            if (splitTexts && splitTexts[0])
                splitTexts[0].split(",").forEach(function (t) { return expressionArguments.push(t.trim().replace("(", "").replace(")", "")); });
        }
        return expressionArguments;
    };
    Linq.expressionColumns = function (expression, isNonValidationExpression) {
        if (isNonValidationExpression === void 0) { isNonValidationExpression = false; }
        var columns = [];
        var splitExpressions = [];
        if (typeof expression == "string") {
            expression.split("=>")[1].split(" && ").forEach(function (t) {
                t.split(" || ").forEach(function (x) {
                    splitExpressions.push(x.trim().split(' ')[0]);
                });
            });
            splitExpressions.forEach(function (t) {
                var splitText = t.split('.');
                if (splitText.length == 2)
                    columns.push({ propName: splitText[1].trim() });
                else {
                    var arrayProp = splitText[1].split('[');
                    var jObject = {
                        propName: splitText[splitText.length - 1].trim(),
                        objectPropName: arrayProp[0],
                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined
                    };
                    columns.push(jObject);
                }
            });
        }
        else {
            columns = Linq.expressionParser(expression, isNonValidationExpression);
        }
        return columns;
    };
    Linq.dynamicConfigParser = function (expression, propName) {
        var controlNames = [];
        var expressionString = expression.toString();
        var expressionArguments = Linq.extractArguments(expressionString);
        var splitString = expressionString.replace(new RegExp(/\r?\n|\r|;/g), ' ').replace(/["%()\{}=\\?ï¿½`'#<>|,;:+-]+/g, " ").split(/ /g);
        if (expressionArguments.length > 3)
            expressionArguments.splice(expressionArguments.length - 1, 1);
        expressionArguments.forEach(function (t) {
            splitString.filter(function (x) { return x != t + "." + propName && x.startsWith(t + "."); }).forEach(function (x) {
                var split = x.split('.');
                if (split.length == 2)
                    controlNames.push({ propName: x.replace(t + ".", '') });
                else {
                    var arrayProp = split[1].split('[');
                    var jObject = {
                        propName: split[split.length - 1].trim(),
                        objectPropName: arrayProp[0],
                        arrayIndex: arrayProp.length > 1 ? arrayProp[1].replace("]", "") : undefined,
                    };
                    controlNames.push(jObject);
                }
            });
        });
        return controlNames;
    };
    return Linq;
}());
export { Linq };
//# sourceMappingURL=data:application/json;base64,