import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { INPUT, SELECT, CHECKBOX, TEXTAREA, RADIO, FILE, CHANGE } from "../../const";
import { ControlExpressionProcess } from './control-expression-process';
export class BaseValidator extends ControlExpressionProcess {
    constructor() {
        super(...arguments);
        this.validators = [];
    }
    validation(control) {
        let result = null;
        for (let validator of this.validators) {
            result = validator(control);
            if (result)
                break;
        }
        if (!result && this.maskProvider)
            result = this.maskProvider.validate();
        return result;
    }
    setEventName() {
        var eventName = '';
        switch (this.element.tagName) {
            case INPUT:
            case TEXTAREA:
                eventName = (this.element.type == CHECKBOX || this.element.type == RADIO || this.element.type == FILE) ? CHANGE : INPUT;
                break;
            case SELECT:
                eventName = CHANGE;
                break;
        }
        this.eventName = eventName.toLowerCase();
    }
}
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], BaseValidator.prototype, "formControl", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS12YWxpZGF0b3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdGVtcGxhdGUtdmFsaWRhdGlvbnMvYmFzZS12YWxpZGF0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRXJDLE9BQU8sRUFDSCxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQ2pDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUN0QixNQUFNLGFBQWEsQ0FBQztBQUVyQixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQTtBQUd2RSxNQUFNLE9BQU8sYUFBYyxTQUFRLHdCQUF3QjtJQUEzRDs7UUFHYyxlQUFVLEdBQW1CLEVBQUUsQ0FBQztJQWtDOUMsQ0FBQztJQTdCRyxVQUFVLENBQUMsT0FBd0I7UUFDL0IsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLEtBQUssSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQyxNQUFNLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVCLElBQUksTUFBTTtnQkFDTixNQUFNO1NBQ2I7UUFDRCxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxZQUFZO1lBQzdCLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3pDLE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFHUyxZQUFZO1FBQ2xCLElBQUksU0FBUyxHQUFXLEVBQUUsQ0FBQztRQUMzQixRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQzFCLEtBQUssS0FBSyxDQUFDO1lBQ1gsS0FBSyxRQUFRO2dCQUNULFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLFFBQVEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUN4SCxNQUFNO1lBQ1YsS0FBSyxNQUFNO2dCQUNQLFNBQVMsR0FBRyxNQUFNLENBQUM7Z0JBQ25CLE1BQU07U0FDYjtRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLENBQUM7Q0FJSjtBQXBDWTtJQUFSLEtBQUssRUFBRTs7a0RBQTRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5wdXQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXHJcbmltcG9ydCB7ICBWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sLCBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtcclxuICAgIElOUFVULCBTRUxFQ1QsIENIRUNLQk9YLCBURVhUQVJFQSwgXHJcbiAgICBSQURJTywgRklMRSwgQ0hBTkdFXHJcbn0gZnJvbSBcIi4uLy4uL2NvbnN0XCI7XHJcblxyXG5pbXBvcnQgeyBDb250cm9sRXhwcmVzc2lvblByb2Nlc3MgfSBmcm9tICcuL2NvbnRyb2wtZXhwcmVzc2lvbi1wcm9jZXNzJ1xyXG5pbXBvcnQgeyBNYXNrUHJvdmlkZXIgfSBmcm9tICcuLi8uLi9kb21haW4vZWxlbWVudC1wcm9jZXNzb3IvbWFzay5wcm92aWRlcic7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZVZhbGlkYXRvciBleHRlbmRzIENvbnRyb2xFeHByZXNzaW9uUHJvY2VzcyB7XHJcbiAgICBASW5wdXQoKSBmb3JtQ29udHJvbDogRm9ybUNvbnRyb2wgfCBBYnN0cmFjdENvbnRyb2w7XHJcblxyXG4gICAgcHJvdGVjdGVkIHZhbGlkYXRvcnM6IFZhbGlkYXRvckZuW10gID0gW107XHJcbiAgICBwcm90ZWN0ZWQgZWxlbWVudDogYW55O1xyXG4gICAgcHJvdGVjdGVkIGV2ZW50TmFtZTogc3RyaW5nO1xyXG4gICAgcHJvdGVjdGVkIG1hc2tQcm92aWRlcjogTWFza1Byb3ZpZGVyO1xyXG5cclxuICAgIHZhbGlkYXRpb24oY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgZm9yIChsZXQgdmFsaWRhdG9yIG9mIHRoaXMudmFsaWRhdG9ycykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB2YWxpZGF0b3IoY29udHJvbCk7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQpXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFyZXN1bHQgJiYgdGhpcy5tYXNrUHJvdmlkZXIpXHJcbiAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5tYXNrUHJvdmlkZXIudmFsaWRhdGUoKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcm90ZWN0ZWQgc2V0RXZlbnROYW1lKCkge1xyXG4gICAgICAgIHZhciBldmVudE5hbWU6IHN0cmluZyA9ICcnO1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5lbGVtZW50LnRhZ05hbWUpIHtcclxuICAgICAgICAgICAgY2FzZSBJTlBVVDpcclxuICAgICAgICAgICAgY2FzZSBURVhUQVJFQTpcclxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZSA9ICh0aGlzLmVsZW1lbnQudHlwZSA9PSBDSEVDS0JPWCB8fCB0aGlzLmVsZW1lbnQudHlwZSA9PSBSQURJTyB8fCB0aGlzLmVsZW1lbnQudHlwZSA9PSBGSUxFKSA/IENIQU5HRSA6IElOUFVUO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU0VMRUNUOlxyXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lID0gQ0hBTkdFO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn1cclxuIl19