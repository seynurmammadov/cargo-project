import { RegexValidator } from "../util/regex-validator";
import { ObjectMaker } from "../util/object-maker";
import { ValidatorValueChecker } from "../util/validator-value-checker";
import { getConfigObject } from "../util/config-provider";
import { alphabet, alphaWithWhitespace, alphanumeric, alphanumericWithWitespace } from "../util/alphabet-regex.locale";
import { ReactiveFormConfig } from "../util/reactive-form-config";
export function alphaValidation(configModel, control, regExps, key) {
    var config = getConfigObject(configModel, control);
    if (ValidatorValueChecker.pass(control, config)) {
        regExps = getRegex(key, regExps, config);
        var isValid = (!config || !config.allowWhiteSpace) ?
            RegexValidator.isValid(control.value, regExps[0]) :
            RegexValidator.isValid(control.value, regExps[1]);
        if (!isValid)
            return ObjectMaker.toJson(key, config, [control.value]);
    }
    return ObjectMaker.null();
}
function getRegex(key, regExps, config) {
    switch (key) {
        case "alpha":
            var alphaLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alpha ? ReactiveFormConfig.json.defaultValidationLocale.alpha : "";
            return [
                alphaLocale && alphaLocale in alphabet ? alphabet[alphaLocale] : regExps[0],
                alphaLocale && alphaLocale in alphaWithWhitespace ? alphaWithWhitespace[alphaLocale] : regExps[1]
            ];
            break;
        case "alphaNumeric":
            var alphaNumericLocale = config.locale ? config.locale : ReactiveFormConfig.json && ReactiveFormConfig.json.defaultValidationLocale && ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric ? ReactiveFormConfig.json.defaultValidationLocale.alphaNumeric : "";
            return [
                alphaNumericLocale && alphaNumericLocale in alphanumeric ? alphanumeric[alphaNumericLocale] : regExps[0],
                alphaNumericLocale && alphaNumericLocale in alphanumericWithWitespace ? alphanumericWithWitespace[alphaNumericLocale] : regExps[1]
            ];
            break;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxwaGEtdmFsaWRhdGlvbi5mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ2YWxpZGF0b3JzLWZ1bmN0aW9uL2FscGhhLXZhbGlkYXRpb24uZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUN4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUseUJBQXlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN2SCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUVsRSxNQUFNLFVBQVUsZUFBZSxDQUMzQixXQUF3QixFQUN4QixPQUF3QixFQUN4QixPQUFpQixFQUNqQixHQUFXO0lBRVgsSUFBSSxNQUFNLEdBQUcsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUU7UUFDN0MsT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztZQUNoRCxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNuRCxjQUFjLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLE9BQU87WUFDUixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQy9EO0lBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDOUIsQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQVcsRUFBRSxPQUFpQixFQUFFLE1BQVc7SUFDekQsUUFBUSxHQUFHLEVBQUU7UUFDVCxLQUFLLE9BQU87WUFDUixJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNuUCxPQUFPO2dCQUNILFdBQVcsSUFBSSxXQUFXLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQzNFLFdBQVcsSUFBSSxXQUFXLElBQUksbUJBQW1CLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ3BHLENBQUE7WUFDRCxNQUFNO1FBQ1YsS0FBSyxjQUFjO1lBQ2YsSUFBSSxrQkFBa0IsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUN4USxPQUFPO2dCQUNILGtCQUFrQixJQUFJLGtCQUFrQixJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ3hHLGtCQUFrQixJQUFJLGtCQUFrQixJQUFJLHlCQUF5QixDQUFDLENBQUMsQ0FBQyx5QkFBeUIsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO2FBQ3JJLENBQUE7WUFDRCxNQUFNO0tBQ2I7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIEFic3RyYWN0Q29udHJvbFxyXG59IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5cclxuaW1wb3J0IHsgUmVnZXhWYWxpZGF0b3IgfSBmcm9tIFwiLi4vdXRpbC9yZWdleC12YWxpZGF0b3JcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQWxwaGFDb25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9hbHBoYS1jb25maWdcIjtcclxuaW1wb3J0IHsgVmFsaWRhdG9yVmFsdWVDaGVja2VyIH0gZnJvbSBcIi4uL3V0aWwvdmFsaWRhdG9yLXZhbHVlLWNoZWNrZXJcIjtcclxuaW1wb3J0IHsgZ2V0Q29uZmlnT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWwvY29uZmlnLXByb3ZpZGVyXCI7XHJcbmltcG9ydCB7IGFscGhhYmV0LCBhbHBoYVdpdGhXaGl0ZXNwYWNlLCBhbHBoYW51bWVyaWMsIGFscGhhbnVtZXJpY1dpdGhXaXRlc3BhY2UgfSBmcm9tIFwiLi4vdXRpbC9hbHBoYWJldC1yZWdleC5sb2NhbGVcIjtcclxuaW1wb3J0IHsgUmVhY3RpdmVGb3JtQ29uZmlnIH0gZnJvbSBcIi4uL3V0aWwvcmVhY3RpdmUtZm9ybS1jb25maWdcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbHBoYVZhbGlkYXRpb24oXHJcbiAgICBjb25maWdNb2RlbDogQWxwaGFDb25maWcsXHJcbiAgICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsXHJcbiAgICByZWdFeHBzOiBSZWdFeHBbXSxcclxuICAgIGtleTogc3RyaW5nXHJcbikge1xyXG4gICAgbGV0IGNvbmZpZyA9IGdldENvbmZpZ09iamVjdChjb25maWdNb2RlbCwgY29udHJvbCk7XHJcbiAgICBpZiAoVmFsaWRhdG9yVmFsdWVDaGVja2VyLnBhc3MoY29udHJvbCwgY29uZmlnKSkge1xyXG4gICAgICAgIHJlZ0V4cHMgPSBnZXRSZWdleChrZXksIHJlZ0V4cHMsIGNvbmZpZyk7XHJcbiAgICAgICAgdmFyIGlzVmFsaWQgPSAoIWNvbmZpZyB8fCAhY29uZmlnLmFsbG93V2hpdGVTcGFjZSkgP1xyXG4gICAgICAgICAgICBSZWdleFZhbGlkYXRvci5pc1ZhbGlkKGNvbnRyb2wudmFsdWUsIHJlZ0V4cHNbMF0pIDpcclxuICAgICAgICAgICAgUmVnZXhWYWxpZGF0b3IuaXNWYWxpZChjb250cm9sLnZhbHVlLCByZWdFeHBzWzFdKTtcclxuICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24oa2V5LCBjb25maWcsIFtjb250cm9sLnZhbHVlXSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRSZWdleChrZXk6IHN0cmluZywgcmVnRXhwczogUmVnRXhwW10sIGNvbmZpZzogYW55KSB7XHJcbiAgICBzd2l0Y2ggKGtleSkge1xyXG4gICAgICAgIGNhc2UgXCJhbHBoYVwiOlxyXG4gICAgICAgICAgICB2YXIgYWxwaGFMb2NhbGUgPSBjb25maWcubG9jYWxlID8gY29uZmlnLmxvY2FsZSA6IFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uICYmIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlICYmIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLmRlZmF1bHRWYWxpZGF0aW9uTG9jYWxlLmFscGhhID8gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uZGVmYXVsdFZhbGlkYXRpb25Mb2NhbGUuYWxwaGEgOiBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgYWxwaGFMb2NhbGUgJiYgYWxwaGFMb2NhbGUgaW4gYWxwaGFiZXQgPyBhbHBoYWJldFthbHBoYUxvY2FsZV0gOiByZWdFeHBzWzBdLFxyXG4gICAgICAgICAgICAgICAgYWxwaGFMb2NhbGUgJiYgYWxwaGFMb2NhbGUgaW4gYWxwaGFXaXRoV2hpdGVzcGFjZSA/IGFscGhhV2l0aFdoaXRlc3BhY2VbYWxwaGFMb2NhbGVdIDogcmVnRXhwc1sxXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgXCJhbHBoYU51bWVyaWNcIjpcclxuICAgICAgICAgICAgdmFyIGFscGhhTnVtZXJpY0xvY2FsZSA9IGNvbmZpZy5sb2NhbGUgPyBjb25maWcubG9jYWxlIDogUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24gJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uZGVmYXVsdFZhbGlkYXRpb25Mb2NhbGUgJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uZGVmYXVsdFZhbGlkYXRpb25Mb2NhbGUuYWxwaGFOdW1lcmljID8gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24uZGVmYXVsdFZhbGlkYXRpb25Mb2NhbGUuYWxwaGFOdW1lcmljIDogXCJcIjtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIGFscGhhTnVtZXJpY0xvY2FsZSAmJiBhbHBoYU51bWVyaWNMb2NhbGUgaW4gYWxwaGFudW1lcmljID8gYWxwaGFudW1lcmljW2FscGhhTnVtZXJpY0xvY2FsZV0gOiByZWdFeHBzWzBdLFxyXG4gICAgICAgICAgICAgICAgYWxwaGFOdW1lcmljTG9jYWxlICYmIGFscGhhTnVtZXJpY0xvY2FsZSBpbiBhbHBoYW51bWVyaWNXaXRoV2l0ZXNwYWNlID8gYWxwaGFudW1lcmljV2l0aFdpdGVzcGFjZVthbHBoYU51bWVyaWNMb2NhbGVdIDogcmVnRXhwc1sxXVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIl19