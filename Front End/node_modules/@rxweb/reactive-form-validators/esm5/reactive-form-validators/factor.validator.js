import { RegexValidator } from "../util/regex-validator";
import { RegExRule } from "../util/regex-rules";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { FormProvider } from '../util/form-provider';
import { ApplicationUtil } from '../util/app-util';
import { getConfigObject } from "../util/config-provider";
export function factorValidator(configModel) {
    function positiveFactors(dividend, value) {
        var isPositive = false;
        for (var index = 1; index <= Math.floor(Math.sqrt(dividend)); index += 1) {
            if (dividend % index === 0) {
                if (index == value)
                    isPositive = true;
                if (dividend / index !== index)
                    if ((dividend / index) == value)
                        isPositive = true;
                if (isPositive)
                    break;
            }
        }
        return isPositive;
    }
    return function (control) {
        var config = getConfigObject(configModel, control);
        var dividendField = (control.parent && config.fieldName) ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
        var dividend = (config.fieldName && dividendField) ? dividendField.value : config.dividend;
        if (FormProvider.ProcessRule(control, config)) {
            if (RegexValidator.isNotBlank(control.value) && dividend > 0) {
                if (!RegexValidator.isValid(control.value, RegExRule.onlyDigit) || !positiveFactors(dividend, parseInt(control.value)))
                    return ObjectMaker.toJson(AnnotationTypes.factor, config, [control.value]);
            }
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yLnZhbGlkYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJyZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvZmFjdG9yLnZhbGlkYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNuRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxXQUF5QjtJQUV2RCxTQUFTLGVBQWUsQ0FBQyxRQUFRLEVBQUUsS0FBSztRQUN0QyxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUM7UUFDdkIsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUU7WUFDeEUsSUFBSSxRQUFRLEdBQUcsS0FBSyxLQUFLLENBQUMsRUFBRTtnQkFDMUIsSUFBSSxLQUFLLElBQUksS0FBSztvQkFDaEIsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDcEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxLQUFLLEtBQUs7b0JBQzVCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksS0FBSzt3QkFDN0IsVUFBVSxHQUFHLElBQUksQ0FBQztnQkFDdEIsSUFBSSxVQUFVO29CQUNaLE1BQU07YUFDVDtTQUNGO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztJQUVELE9BQU8sVUFBQyxPQUFrQjtRQUN4QixJQUFJLE1BQU0sR0FBRyxlQUFlLENBQUMsV0FBVyxFQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELElBQU0sYUFBYSxHQUFRLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFBO1FBQ3ZJLElBQU0sUUFBUSxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUM3RixJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQzdDLElBQUksY0FBYyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRTtnQkFDNUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3BILE9BQU8sV0FBVyxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2FBQzlFO1NBQ0Y7UUFDRCxPQUFPLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDLENBQUE7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICBGb3JtR3JvdXAsXHJcbiAgVmFsaWRhdG9yRm4sXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcblxyXG5pbXBvcnQgeyBSZWdleFZhbGlkYXRvciB9IGZyb20gXCIuLi91dGlsL3JlZ2V4LXZhbGlkYXRvclwiO1xyXG5pbXBvcnQgeyBSZWdFeFJ1bGUgfSBmcm9tIFwiLi4vdXRpbC9yZWdleC1ydWxlc1wiO1xyXG5pbXBvcnQgeyBPYmplY3RNYWtlciB9IGZyb20gXCIuLi91dGlsL29iamVjdC1tYWtlclwiO1xyXG5pbXBvcnQgeyBGYWN0b3JDb25maWcgfSBmcm9tIFwiLi4vbW9kZWxzL2NvbmZpZy9mYWN0b3ItY29uZmlnXCI7XHJcbmltcG9ydCB7IEFubm90YXRpb25UeXBlcyB9IGZyb20gXCIuLi9jb3JlL3ZhbGlkYXRvci5zdGF0aWNcIjtcclxuaW1wb3J0IHsgRm9ybVByb3ZpZGVyIH0gZnJvbSAnLi4vdXRpbC9mb3JtLXByb3ZpZGVyJztcclxuaW1wb3J0IHsgQXBwbGljYXRpb25VdGlsIH0gZnJvbSAnLi4vdXRpbC9hcHAtdXRpbCc7XHJcbmltcG9ydCB7Z2V0Q29uZmlnT2JqZWN0fSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuZXhwb3J0IGZ1bmN0aW9uIGZhY3RvclZhbGlkYXRvcihjb25maWdNb2RlbDogRmFjdG9yQ29uZmlnKTogVmFsaWRhdG9yRm4ge1xyXG5cclxuICBmdW5jdGlvbiBwb3NpdGl2ZUZhY3RvcnMoZGl2aWRlbmQsIHZhbHVlKSB7XHJcbiAgICBsZXQgaXNQb3NpdGl2ZSA9IGZhbHNlO1xyXG4gICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8PSBNYXRoLmZsb29yKE1hdGguc3FydChkaXZpZGVuZCkpOyBpbmRleCArPSAxKSB7XHJcbiAgICAgIGlmIChkaXZpZGVuZCAlIGluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgaWYgKGluZGV4ID09IHZhbHVlKVxyXG4gICAgICAgICAgaXNQb3NpdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgaWYgKGRpdmlkZW5kIC8gaW5kZXggIT09IGluZGV4KVxyXG4gICAgICAgICAgaWYgKChkaXZpZGVuZCAvIGluZGV4KSA9PSB2YWx1ZSlcclxuICAgICAgICAgICAgaXNQb3NpdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgaWYgKGlzUG9zaXRpdmUpXHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlzUG9zaXRpdmU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKGNvbnRyb2w6IEZvcm1Hcm91cCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPT4ge1xyXG4gICAgbGV0IGNvbmZpZyA9IGdldENvbmZpZ09iamVjdChjb25maWdNb2RlbCxjb250cm9sKTtcclxuICAgIGNvbnN0IGRpdmlkZW5kRmllbGQ6IGFueSA9IChjb250cm9sLnBhcmVudCAmJiBjb25maWcuZmllbGROYW1lKSA/IEFwcGxpY2F0aW9uVXRpbC5nZXRGb3JtQ29udHJvbChjb25maWcuZmllbGROYW1lLCBjb250cm9sKSA6IHVuZGVmaW5lZFxyXG4gICAgY29uc3QgZGl2aWRlbmQgPSAoY29uZmlnLmZpZWxkTmFtZSAmJiBkaXZpZGVuZEZpZWxkKSA/IGRpdmlkZW5kRmllbGQudmFsdWUgOiBjb25maWcuZGl2aWRlbmQ7XHJcbiAgICBpZiAoRm9ybVByb3ZpZGVyLlByb2Nlc3NSdWxlKGNvbnRyb2wsIGNvbmZpZykpIHtcclxuICAgICAgaWYgKFJlZ2V4VmFsaWRhdG9yLmlzTm90QmxhbmsoY29udHJvbC52YWx1ZSkgJiYgZGl2aWRlbmQgPiAwKSB7XHJcbiAgICAgICAgaWYgKCFSZWdleFZhbGlkYXRvci5pc1ZhbGlkKGNvbnRyb2wudmFsdWUsIFJlZ0V4UnVsZS5vbmx5RGlnaXQpIHx8ICFwb3NpdGl2ZUZhY3RvcnMoZGl2aWRlbmQsIHBhcnNlSW50KGNvbnRyb2wudmFsdWUpKSlcclxuICAgICAgICAgIHJldHVybiBPYmplY3RNYWtlci50b0pzb24oQW5ub3RhdGlvblR5cGVzLmZhY3RvciwgY29uZmlnLCBbY29udHJvbC52YWx1ZV0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0TWFrZXIubnVsbCgpO1xyXG4gIH1cclxufVxyXG4iXX0=