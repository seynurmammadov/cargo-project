var _a;
import { ApplicationUtil } from "./app-util";
import { FormProvider } from "./form-provider";
import { RegexValidator } from "./regex-validator";
import { AnnotationTypes } from "../core/validator.static";
import { ObjectMaker } from "./object-maker";
import { getConfigObject } from "../util/config-provider";
var operatorOpposite = (_a = {},
    _a[AnnotationTypes.greaterThan] = AnnotationTypes.lessThan,
    _a[AnnotationTypes.lessThan] = AnnotationTypes.greaterThan,
    _a[AnnotationTypes.greaterThanEqualTo] = AnnotationTypes.lessThanEqualTo,
    _a[AnnotationTypes.lessThanEqualTo] = AnnotationTypes.greaterThanEqualTo,
    _a);
export function relationalCheck(control, config, relationalOperatorName) {
    config = getConfigObject(config, control);
    var matchControl = config.fieldName ? ApplicationUtil.getFormControl(config.fieldName, control) : undefined;
    var matchControlValue = (matchControl) ? matchControl.value : config.value !== undefined ? config.value : '';
    if (FormProvider.ProcessRule(control, config)) {
        if (config.isArrayControl)
            return arrayControlValidation(control, config, relationalOperatorName);
        if (isValid(control, matchControlValue, relationalOperatorName) === false)
            return ObjectMaker.toJson(relationalOperatorName, config, [control.value, matchControlValue]);
    }
    return ObjectMaker.null();
}
function isValid(control, matchControlValue, relationalOperatorName) {
    if (RegexValidator.isNotBlank(control.value) && RegexValidator.isNotBlank(matchControlValue)) {
        var isValid_1 = false;
        switch (relationalOperatorName) {
            case AnnotationTypes.greaterThan:
                isValid_1 = parseFloat(control.value) > parseFloat(matchControlValue);
                break;
            case AnnotationTypes.lessThan:
                isValid_1 = parseFloat(control.value) < parseFloat(matchControlValue);
                break;
            case AnnotationTypes.greaterThanEqualTo:
                isValid_1 = parseFloat(control.value) >= parseFloat(matchControlValue);
                break;
            case AnnotationTypes.lessThanEqualTo:
                isValid_1 = parseFloat(control.value) <= parseFloat(matchControlValue);
                break;
        }
        return isValid_1;
    }
    return null;
}
function setTimeFunc(invalidateControls) {
    var timeOut = setTimeout(function () {
        invalidateControls.forEach(function (t) {
            t.updateValueAndValidity();
        });
        clearTimeout(timeOut);
    }, 200);
}
function arrayControlValidation(control, config, relationalOperatorName) {
    var formArray = ApplicationUtil.getParentFormArray(control);
    var parentFormGroup = control.parent ? control.parent : undefined;
    var oppositeOperator = operatorOpposite[relationalOperatorName];
    var updateValidityControls = [];
    if (formArray && parentFormGroup && formArray.controls.length > 1) {
        var indexOf = formArray.controls.indexOf(parentFormGroup);
        var fieldName = ApplicationUtil.getFormControlName(control);
        var valid = true;
        if (indexOf > 0)
            valid = validateControl(formArray, control, indexOf - 1, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls);
        if (valid && formArray.controls.length > indexOf + 1)
            valid = validateControl(formArray, control, indexOf + 1, fieldName, relationalOperatorName, relationalOperatorName, updateValidityControls);
        if (updateValidityControls.length > 0)
            setTimeFunc(updateValidityControls);
        if (valid === false)
            return ObjectMaker.toJson(relationalOperatorName, config, [control.value]);
    }
    return ObjectMaker.null();
}
function validateControl(formArray, control, indexOf, fieldName, oppositeOperator, relationalOperatorName, updateValidityControls) {
    var valid = false;
    var formGroup = formArray.controls[indexOf];
    if (formGroup && formGroup.controls) {
        var formControl = formGroup.controls[fieldName];
        valid = isValid(control, formControl.value, oppositeOperator);
        if (valid && formControl.errors && formControl.errors[relationalOperatorName])
            updateValidityControls.push(formControl);
    }
    return valid;
}
//# sourceMappingURL=data:application/json;base64,