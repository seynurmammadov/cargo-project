import { RegexValidator } from "../util/regex-validator";
import { getConfigObject } from "../util/config-provider";
import { ObjectMaker } from "../util/object-maker";
import { AnnotationTypes } from "../core/validator.static";
import { PASSWORD_CONFIG } from "../const/config-names.const";
import { ApplicationUtil } from '../util/app-util';
export function passwordValidator(configModel) {
    function getMessageObject(jObject, keyName) {
        if (!jObject.message && !jObject.messageKey) {
            var message = ObjectMaker.getPasswordMessage();
            jObject.message = message && typeof message == "string" ? message : ApplicationUtil.isObject(message) ? message[keyName] : "";
            if (!jObject.message)
                jObject.message = message["password"];
            jObject.messageKey = "";
        }
        return jObject;
    }
    return function (control) {
        var config = getConfigObject(configModel, control, PASSWORD_CONFIG);
        var controlValue = control.value;
        if (RegexValidator.isNotBlank(controlValue)) {
            var validation = RegexValidator.isValidPassword(config.validation, controlValue);
            var jObject = {};
            jObject.message = (config.message && config.message[validation.keyName]) ? config.message[validation.keyName] : typeof config.message == "string" ? config.message : '';
            jObject.messageKey = (config.messageKey && config.messageKey[validation.keyName]) ? config.messageKey[validation.keyName] : typeof config.messageKey == "string" ? config.messageKey : "";
            jObject = getMessageObject(jObject, validation.keyName);
            if (!validation.isValid)
                return ObjectMaker.toJson(AnnotationTypes.password, jObject, [controlValue]);
        }
        return ObjectMaker.null();
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFzc3dvcmQudmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInJlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy9wYXNzd29yZC52YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXpELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sa0JBQWtCLENBQUE7QUFDbEQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLFdBQTJCO0lBQ3pELFNBQVMsZ0JBQWdCLENBQUMsT0FBK0IsRUFBRSxPQUFlO1FBQ3RFLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRTtZQUN6QyxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztZQUMvQyxPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sSUFBSSxPQUFPLE9BQU8sSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDOUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPO2dCQUNoQixPQUFPLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUMxQyxPQUFPLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztTQUMzQjtRQUNELE9BQU8sT0FBTyxDQUFBO0lBQ2xCLENBQUM7SUFDSCxPQUFPLFVBQUMsT0FBd0I7UUFDNUIsSUFBSSxNQUFNLEdBQUcsZUFBZSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDdEUsSUFBSSxZQUFZLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUNqQyxJQUFJLGNBQWMsQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDekMsSUFBSSxVQUFVLEdBQUcsY0FBYyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxDQUFDO1lBQ2pGLElBQUksT0FBTyxHQUFPLEVBQUUsQ0FBQztZQUNyQixPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsT0FBTyxJQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFFO1lBQ3hLLE9BQU8sQ0FBQyxVQUFVLEdBQUcsQ0FBQyxNQUFNLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDMUwsT0FBTyxHQUFHLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDMUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPO2dCQUNyQixPQUFPLFdBQVcsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1NBQy9FO1FBQ0QsT0FBTyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFNUIsQ0FBQyxDQUFBO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgVmFsaWRhdG9yRm4sXHJcbiAgQWJzdHJhY3RDb250cm9sXHJcbn0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IFJlZ2V4VmFsaWRhdG9yIH0gZnJvbSBcIi4uL3V0aWwvcmVnZXgtdmFsaWRhdG9yXCI7XHJcbmltcG9ydCB7IFBhc3N3b3JkQ29uZmlnIH0gZnJvbSBcIi4uL21vZGVscy9jb25maWcvcGFzc3dvcmQtY29uZmlnXCI7XHJcbmltcG9ydCB7Z2V0Q29uZmlnT2JqZWN0fSBmcm9tIFwiLi4vdXRpbC9jb25maWctcHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgT2JqZWN0TWFrZXIgfSBmcm9tIFwiLi4vdXRpbC9vYmplY3QtbWFrZXJcIjtcclxuaW1wb3J0IHsgQW5ub3RhdGlvblR5cGVzIH0gZnJvbSBcIi4uL2NvcmUvdmFsaWRhdG9yLnN0YXRpY1wiO1xyXG5pbXBvcnQgeyBQQVNTV09SRF9DT05GSUcgfSBmcm9tIFwiLi4vY29uc3QvY29uZmlnLW5hbWVzLmNvbnN0XCI7XHJcbmltcG9ydCB7IEFwcGxpY2F0aW9uVXRpbCB9IGZyb20gJy4uL3V0aWwvYXBwLXV0aWwnXHJcbmV4cG9ydCBmdW5jdGlvbiBwYXNzd29yZFZhbGlkYXRvcihjb25maWdNb2RlbDogUGFzc3dvcmRDb25maWcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICBmdW5jdGlvbiBnZXRNZXNzYWdlT2JqZWN0KGpPYmplY3Q6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGtleU5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGlmICghak9iamVjdC5tZXNzYWdlICYmICFqT2JqZWN0Lm1lc3NhZ2VLZXkpIHtcclxuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBPYmplY3RNYWtlci5nZXRQYXNzd29yZE1lc3NhZ2UoKTtcclxuICAgICAgICAgICAgak9iamVjdC5tZXNzYWdlID0gbWVzc2FnZSAmJiB0eXBlb2YgbWVzc2FnZSA9PSBcInN0cmluZ1wiID8gbWVzc2FnZSA6IEFwcGxpY2F0aW9uVXRpbC5pc09iamVjdChtZXNzYWdlKSA/IG1lc3NhZ2Vba2V5TmFtZV0gOiBcIlwiO1xyXG4gICAgICAgICAgICBpZiAoIWpPYmplY3QubWVzc2FnZSlcclxuICAgICAgICAgICAgICAgIGpPYmplY3QubWVzc2FnZSA9IG1lc3NhZ2VbXCJwYXNzd29yZFwiXTtcclxuICAgICAgICAgICAgak9iamVjdC5tZXNzYWdlS2V5ID0gXCJcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGpPYmplY3RcclxuICAgIH1cclxuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPT4ge1xyXG4gICAgICBsZXQgY29uZmlnID0gZ2V0Q29uZmlnT2JqZWN0KGNvbmZpZ01vZGVsLCBjb250cm9sLCBQQVNTV09SRF9DT05GSUcpO1xyXG4gICAgbGV0IGNvbnRyb2xWYWx1ZSA9IGNvbnRyb2wudmFsdWU7XHJcbiAgICBpZiAoUmVnZXhWYWxpZGF0b3IuaXNOb3RCbGFuayhjb250cm9sVmFsdWUpKSB7XHJcbiAgICAgICAgbGV0IHZhbGlkYXRpb24gPSBSZWdleFZhbGlkYXRvci5pc1ZhbGlkUGFzc3dvcmQoY29uZmlnLnZhbGlkYXRpb24sIGNvbnRyb2xWYWx1ZSk7XHJcbiAgICAgICAgbGV0IGpPYmplY3Q6YW55ID0ge307XHJcbiAgICAgICAgak9iamVjdC5tZXNzYWdlID0gKGNvbmZpZy5tZXNzYWdlICYmIGNvbmZpZy5tZXNzYWdlW3ZhbGlkYXRpb24ua2V5TmFtZV0pID8gY29uZmlnLm1lc3NhZ2VbdmFsaWRhdGlvbi5rZXlOYW1lXSA6IHR5cGVvZiBjb25maWcubWVzc2FnZSA9PVwic3RyaW5nXCIgPyBjb25maWcubWVzc2FnZSA6ICcnIDtcclxuICAgICAgICBqT2JqZWN0Lm1lc3NhZ2VLZXkgPSAoY29uZmlnLm1lc3NhZ2VLZXkgJiYgY29uZmlnLm1lc3NhZ2VLZXlbdmFsaWRhdGlvbi5rZXlOYW1lXSkgPyBjb25maWcubWVzc2FnZUtleVt2YWxpZGF0aW9uLmtleU5hbWVdIDogdHlwZW9mIGNvbmZpZy5tZXNzYWdlS2V5ID09IFwic3RyaW5nXCIgPyBjb25maWcubWVzc2FnZUtleSA6IFwiXCI7XHJcbiAgICAgICAgak9iamVjdCA9IGdldE1lc3NhZ2VPYmplY3Qoak9iamVjdCwgdmFsaWRhdGlvbi5rZXlOYW1lKTtcclxuICAgICAgaWYgKCF2YWxpZGF0aW9uLmlzVmFsaWQpXHJcbiAgICAgICAgcmV0dXJuIE9iamVjdE1ha2VyLnRvSnNvbihBbm5vdGF0aW9uVHlwZXMucGFzc3dvcmQsIGpPYmplY3QsIFtjb250cm9sVmFsdWVdKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdE1ha2VyLm51bGwoKTtcclxuXHJcbiAgfVxyXG59XHJcbiJdfQ==