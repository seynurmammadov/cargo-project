var ImageFileControlDirective_1;
import * as tslib_1 from "tslib";
import { Input, Directive, forwardRef, ElementRef } from '@angular/core';
import { NG_ASYNC_VALIDATORS } from '@angular/forms';
import { APP_VALIDATORS } from "../../const/app-validators.const";
import { of } from 'rxjs';
const VALIDATOR_CONFIG = "validatorConfig";
let ImageFileControlDirective = ImageFileControlDirective_1 = class ImageFileControlDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isProcessed = false;
        this.element = elementRef.nativeElement;
    }
    set image(config) {
        this.imageValidation = APP_VALIDATORS.image(config);
    }
    setConfig(control) {
        let image = "image";
        if (!this[image] && control[VALIDATOR_CONFIG] && control[VALIDATOR_CONFIG][image])
            this[image] = control[VALIDATOR_CONFIG][image];
        this.isProcessed = true;
    }
    validate(control) {
        if (!this.isProcessed)
            this.setConfig(control);
        if (this.imageValidation) {
            return this.imageValidation(control, this.element.files);
        }
        return of(null);
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], ImageFileControlDirective.prototype, "image", null);
ImageFileControlDirective = ImageFileControlDirective_1 = tslib_1.__decorate([
    Directive({
        selector: "input[type=file]",
        providers: [{
                provide: NG_ASYNC_VALIDATORS,
                useExisting: forwardRef(() => ImageFileControlDirective_1),
                multi: true
            }]
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef])
], ImageFileControlDirective);
export { ImageFileControlDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZmlsZS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3RlbXBsYXRlLXZhbGlkYXRpb25zL2ltYWdlLWZpbGUtY29udHJvbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBb0MsbUJBQW1CLEVBQWlCLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2xFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsTUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztBQVMzQyxJQUFhLHlCQUF5QixpQ0FBdEMsTUFBYSx5QkFBeUI7SUFVbEMsWUFBb0IsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQVIxQyxnQkFBVyxHQUFXLEtBQUssQ0FBQztRQVN4QixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQyxhQUFxQixDQUFDO0lBQ3BELENBQUM7SUFOUSxJQUFJLEtBQUssQ0FBQyxNQUFrQjtRQUNuQyxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQU1ELFNBQVMsQ0FBQyxPQUF1QjtRQUM3QixJQUFJLEtBQUssR0FBRyxPQUFPLENBQUM7UUFDcEIsSUFBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDOUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFRCxRQUFRLENBQUMsT0FBd0I7UUFDL0IsSUFBRyxDQUFDLElBQUksQ0FBQyxXQUFXO1lBQ2xCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUIsSUFBRyxJQUFJLENBQUMsZUFBZSxFQUFDO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzRDtRQUNDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Q0FDSixDQUFBO0FBdkJZO0lBQVIsS0FBSyxFQUFFOzs7c0RBRVA7QUFSUSx5QkFBeUI7SUFSckMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLGtCQUFrQjtRQUM1QixTQUFTLEVBQUUsQ0FBQztnQkFDUixPQUFPLEVBQUUsbUJBQW1CO2dCQUM1QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLDJCQUF5QixDQUFDO2dCQUN4RCxLQUFLLEVBQUUsSUFBSTthQUNkLENBQUM7S0FDTCxDQUFDOzZDQVdrQyxVQUFVO0dBVmpDLHlCQUF5QixDQTZCckM7U0E3QlkseUJBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbnB1dCwgRGlyZWN0aXZlICxmb3J3YXJkUmVmLEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1ZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCwgTkdfQVNZTkNfVkFMSURBVE9SUyxBc3luY1ZhbGlkYXRvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHtJbWFnZUNvbmZpZ30gZnJvbSAnLi4vLi4vbW9kZWxzL2NvbmZpZydcclxuaW1wb3J0IHsgQVBQX1ZBTElEQVRPUlMgfSBmcm9tIFwiLi4vLi4vY29uc3QvYXBwLXZhbGlkYXRvcnMuY29uc3RcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuY29uc3QgVkFMSURBVE9SX0NPTkZJRyA9IFwidmFsaWRhdG9yQ29uZmlnXCI7XHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6IFwiaW5wdXRbdHlwZT1maWxlXVwiLFxyXG4gICAgcHJvdmlkZXJzOiBbe1xyXG4gICAgICAgIHByb3ZpZGU6IE5HX0FTWU5DX1ZBTElEQVRPUlMsXHJcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gSW1hZ2VGaWxlQ29udHJvbERpcmVjdGl2ZSksXHJcbiAgICAgICAgbXVsdGk6IHRydWVcclxuICAgIH1dXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbWFnZUZpbGVDb250cm9sRGlyZWN0aXZlIGltcGxlbWVudHMgQXN5bmNWYWxpZGF0b3IgIHtcclxuICAgIGVsZW1lbnQ6YW55XHJcbiAgICBpc1Byb2Nlc3NlZDpib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBpbWFnZVZhbGlkYXRpb246RnVuY3Rpb247XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGltYWdlKGNvbmZpZzpJbWFnZUNvbmZpZyl7XHJcbiAgICAgIHRoaXMuaW1hZ2VWYWxpZGF0aW9uID0gQVBQX1ZBTElEQVRPUlMuaW1hZ2UoY29uZmlnKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpe1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBOb2RlO1xyXG4gICAgfVxyXG5cclxuICAgIHNldENvbmZpZyhjb250cm9sOkFic3RyYWN0Q29udHJvbCl7XHJcbiAgICAgICAgbGV0IGltYWdlID0gXCJpbWFnZVwiO1xyXG4gICAgICAgIGlmKCF0aGlzW2ltYWdlXSAmJiBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddICYmIGNvbnRyb2xbVkFMSURBVE9SX0NPTkZJR11baW1hZ2VdKVxyXG4gICAgICAgICAgdGhpc1tpbWFnZV0gPSBjb250cm9sW1ZBTElEQVRPUl9DT05GSUddW2ltYWdlXTtcclxuICAgICAgdGhpcy5pc1Byb2Nlc3NlZCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdmFsaWRhdGUoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogUHJvbWlzZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4gfCBPYnNlcnZhYmxlPFZhbGlkYXRpb25FcnJvcnMgfCBudWxsPiB7XHJcbiAgICAgIGlmKCF0aGlzLmlzUHJvY2Vzc2VkKVxyXG4gICAgICAgIHRoaXMuc2V0Q29uZmlnKGNvbnRyb2wpO1xyXG4gICAgICBpZih0aGlzLmltYWdlVmFsaWRhdGlvbil7XHJcbiAgICAgICAgICByZXR1cm4gdGhpcy5pbWFnZVZhbGlkYXRpb24oY29udHJvbCx0aGlzLmVsZW1lbnQuZmlsZXMpO1xyXG4gICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfSAgICBcclxufVxyXG4iXX0=