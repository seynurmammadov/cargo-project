import { ReactiveFormConfig } from "./reactive-form-config";
var ObjectMaker = /** @class */ (function () {
    function ObjectMaker() {
    }
    ObjectMaker.toJson = function (key, config, values) {
        ObjectMaker.setMessage();
        var message = config ? config.message : null;
        var messageKey = undefined;
        if (!message && config && config.messageKey)
            messageKey = config.messageKey;
        var messageText = (message) ? message : (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey || key]) ? ReactiveFormConfig.json.validationMessage[messageKey || key] : '';
        values.forEach(function (t, index) {
            messageText = messageText.replace("{{" + index + "}}", t);
        });
        var jObject = {};
        jObject[key] = {
            message: messageText, refValues: values
        };
        if (config && config.isAddMessageKey)
            jObject["messageKey"] = messageKey;
        return jObject;
    };
    ObjectMaker.null = function () {
        return null;
    };
    ObjectMaker.getPasswordMessage = function () {
        var messageKey = "password";
        return (ReactiveFormConfig && ReactiveFormConfig.json && ReactiveFormConfig.json.validationMessage && ReactiveFormConfig.json.validationMessage[messageKey]) ? ReactiveFormConfig.json.validationMessage[messageKey] : '';
    };
    ObjectMaker.setMessage = function () {
        if (ReactiveFormConfig.i18n && ReactiveFormConfig.i18n.validationMessage && ObjectMaker.language !== ReactiveFormConfig.i18n.language) {
            if (!ReactiveFormConfig.json)
                ReactiveFormConfig.json = {};
            ReactiveFormConfig.json.validationMessage = ReactiveFormConfig.i18n.validationMessage();
            ObjectMaker.language = ReactiveFormConfig.i18n.language;
        }
    };
    ObjectMaker.language = "";
    return ObjectMaker;
}());
export { ObjectMaker };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LW1ha2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9ycy8iLCJzb3VyY2VzIjpbInV0aWwvb2JqZWN0LW1ha2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRTVEO0lBQUE7SUFxQ0EsQ0FBQztJQW5DVSxrQkFBTSxHQUFiLFVBQWMsR0FBVyxFQUFFLE1BQVcsRUFBRSxNQUFXO1FBQy9DLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN6QixJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUM3QyxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBRyxDQUFDLE9BQU8sSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLFVBQVU7WUFDdEMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDbkMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDeFEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLENBQUMsRUFBRSxLQUFLO1lBQ3BCLFdBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQUssS0FBSyxPQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLE9BQU8sR0FBRyxFQUFFLENBQUM7UUFDakIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQ1gsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsTUFBTTtTQUMxQyxDQUFDO1FBQ0YsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLGVBQWU7WUFDaEMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUN2QyxPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBQ00sZ0JBQUksR0FBWDtRQUNJLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSw4QkFBa0IsR0FBekI7UUFDSSxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDNUIsT0FBTyxDQUFDLGtCQUFrQixJQUFJLGtCQUFrQixDQUFDLElBQUksSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBO0lBQzdOLENBQUM7SUFFTSxzQkFBVSxHQUFqQjtRQUNJLElBQUksa0JBQWtCLENBQUMsSUFBSSxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxXQUFXLENBQUMsUUFBUSxLQUFLLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDbkksSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUk7Z0JBQ3hCLGtCQUFrQixDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7WUFDakMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3hGLFdBQVcsQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztTQUMzRDtJQUNMLENBQUM7SUFuQ00sb0JBQVEsR0FBVyxFQUFFLENBQUM7SUFvQ2pDLGtCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FyQ1ksV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0aXZlRm9ybUNvbmZpZyB9IGZyb20gXCIuL3JlYWN0aXZlLWZvcm0tY29uZmlnXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0TWFrZXJ7XHJcbiAgICBzdGF0aWMgbGFuZ3VhZ2U6IHN0cmluZyA9IFwiXCI7XHJcbiAgICBzdGF0aWMgdG9Kc29uKGtleTogc3RyaW5nLCBjb25maWc6IGFueSwgdmFsdWVzOiBhbnkpIHtcclxuICAgICAgICBPYmplY3RNYWtlci5zZXRNZXNzYWdlKCk7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSBjb25maWcgPyBjb25maWcubWVzc2FnZSA6IG51bGw7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2VLZXkgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYoIW1lc3NhZ2UgJiYgY29uZmlnICYmIGNvbmZpZy5tZXNzYWdlS2V5KVxyXG4gICAgICAgICAgICBtZXNzYWdlS2V5ID0gY29uZmlnLm1lc3NhZ2VLZXk7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2VUZXh0ID0gKG1lc3NhZ2UpID8gbWVzc2FnZSA6IChSZWFjdGl2ZUZvcm1Db25maWcgJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24gJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24udmFsaWRhdGlvbk1lc3NhZ2UgJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24udmFsaWRhdGlvbk1lc3NhZ2VbbWVzc2FnZUtleSB8fCBrZXldKT8gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24udmFsaWRhdGlvbk1lc3NhZ2VbbWVzc2FnZUtleSB8fCBrZXldIDogJyc7XHJcbiAgICAgICAgdmFsdWVzLmZvckVhY2goKHQgLGluZGV4KT0+IHtcclxuICAgICAgICAgICAgbWVzc2FnZVRleHQgPSBtZXNzYWdlVGV4dC5yZXBsYWNlKGB7eyR7aW5kZXh9fX1gLCB0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsZXQgak9iamVjdCA9IHt9O1xyXG4gICAgICAgIGpPYmplY3Rba2V5XSA9IHtcclxuICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZVRleHQsIHJlZlZhbHVlczogdmFsdWVzXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5pc0FkZE1lc3NhZ2VLZXkpXHJcbiAgICAgICAgICAgIGpPYmplY3RbXCJtZXNzYWdlS2V5XCJdID0gbWVzc2FnZUtleTtcclxuICAgICAgICByZXR1cm4gak9iamVjdDtcclxuICAgIH1cclxuICAgIHN0YXRpYyBudWxsKCkge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQYXNzd29yZE1lc3NhZ2UoKSB7XHJcbiAgICAgICAgbGV0IG1lc3NhZ2VLZXkgPSBcInBhc3N3b3JkXCI7XHJcbiAgICAgICAgcmV0dXJuIChSZWFjdGl2ZUZvcm1Db25maWcgJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24gJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24udmFsaWRhdGlvbk1lc3NhZ2UgJiYgUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24udmFsaWRhdGlvbk1lc3NhZ2VbbWVzc2FnZUtleV0pID8gUmVhY3RpdmVGb3JtQ29uZmlnLmpzb24udmFsaWRhdGlvbk1lc3NhZ2VbbWVzc2FnZUtleV0gOiAnJ1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXRNZXNzYWdlKCkge1xyXG4gICAgICAgIGlmIChSZWFjdGl2ZUZvcm1Db25maWcuaTE4biAmJiBSZWFjdGl2ZUZvcm1Db25maWcuaTE4bi52YWxpZGF0aW9uTWVzc2FnZSAmJiBPYmplY3RNYWtlci5sYW5ndWFnZSAhPT0gUmVhY3RpdmVGb3JtQ29uZmlnLmkxOG4ubGFuZ3VhZ2UpIHtcclxuICAgICAgICAgICAgaWYgKCFSZWFjdGl2ZUZvcm1Db25maWcuanNvbilcclxuICAgICAgICAgICAgICAgIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uID0ge307XHJcbiAgICAgICAgICAgIFJlYWN0aXZlRm9ybUNvbmZpZy5qc29uLnZhbGlkYXRpb25NZXNzYWdlID0gUmVhY3RpdmVGb3JtQ29uZmlnLmkxOG4udmFsaWRhdGlvbk1lc3NhZ2UoKTtcclxuICAgICAgICAgICAgT2JqZWN0TWFrZXIubGFuZ3VhZ2UgPSBSZWFjdGl2ZUZvcm1Db25maWcuaTE4bi5sYW5ndWFnZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19