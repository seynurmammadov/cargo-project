import { FormControl, FormGroup, FormArray } from "@angular/forms";
import { ResetFormType } from "../enums/reset-type";
export function isResetControl(controlName, control, options) {
    let isReset = true;
    if (options) {
        isReset = false;
        if (options.resetType)
            switch (options.resetType) {
                case ResetFormType.ControlsOnly:
                    isReset = control instanceof FormControl;
                    break;
                case ResetFormType.ControlsAndFormGroupsOnly:
                    isReset = control instanceof FormControl || control instanceof FormGroup;
                    break;
                case ResetFormType.FormGroupsOnly:
                    isReset = control instanceof FormGroup;
                    break;
                case ResetFormType.FormArraysOnly:
                    isReset = control instanceof FormArray;
                    break;
                case ResetFormType.DefinedPropsOnly:
                    isReset = options.value ? Object.keys(options.value).indexOf(controlName) != -1 : false;
                    break;
                default:
                    isReset = true;
                    break;
            }
        if (!isReset && options.with)
            isReset = options.with.filter(x => x.split('.')[0] == controlName.split('.')[0])[0] !== undefined;
        if (!isReset && options.value && (options.resetType === undefined || options.resetType !== ResetFormType.DefinedPropsOnly))
            isReset = true;
    }
    return isReset;
}
export function getNestedOptions(controlName, options) {
    if (options) {
        let jObjectOptions = {};
        if (options.resetType)
            jObjectOptions.resetType = (options.resetType == ResetFormType.FormGroupsOnly || options.resetType == ResetFormType.FormArraysOnly) ? ResetFormType.ControlsOnly : options.resetType;
        if (options.with) {
            let nestedControls = options.with.filter(t => t.split('.')[0] == controlName);
            let controlNames = nestedControls.map(x => {
                let splitControls = x.split('.');
                splitControls.splice(0, 1);
                return splitControls.join('.');
            });
            jObjectOptions.with = controlNames;
        }
        if (options.value && options.value[controlName])
            jObjectOptions.value = options.value[controlName];
        jObjectOptions = Object.keys(jObjectOptions).length > 0 ? jObjectOptions : undefined;
        return jObjectOptions;
    }
    return undefined;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzZXQtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnMvIiwic291cmNlcyI6WyJ1dGlsL3Jlc2V0LWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDbEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXBELE1BQU0sVUFBVSxjQUFjLENBQUMsV0FBa0IsRUFBQyxPQUFZLEVBQUUsT0FJL0Q7SUFDRyxJQUFJLE9BQU8sR0FBWSxJQUFJLENBQUM7SUFDNUIsSUFBSSxPQUFPLEVBQUU7UUFDVCxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLElBQUksT0FBTyxDQUFDLFNBQVM7WUFDckIsUUFBUSxPQUFPLENBQUMsU0FBUyxFQUFFO2dCQUN2QixLQUFLLGFBQWEsQ0FBQyxZQUFZO29CQUMzQixPQUFPLEdBQUcsT0FBTyxZQUFZLFdBQVcsQ0FBQztvQkFDekMsTUFBTTtnQkFDVixLQUFLLGFBQWEsQ0FBQyx5QkFBeUI7b0JBQ3hDLE9BQU8sR0FBRyxPQUFPLFlBQVksV0FBVyxJQUFJLE9BQU8sWUFBWSxTQUFTLENBQUM7b0JBQ3pFLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsY0FBYztvQkFDN0IsT0FBTyxHQUFHLE9BQU8sWUFBWSxTQUFTLENBQUM7b0JBQ3ZDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsY0FBYztvQkFDN0IsT0FBTyxHQUFHLE9BQU8sWUFBWSxTQUFTLENBQUM7b0JBQ3ZDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsZ0JBQWdCO29CQUMvQixPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7b0JBQ3hGLE1BQU07Z0JBQ1Y7b0JBQ0ksT0FBTyxHQUFHLElBQUksQ0FBQztvQkFDZixNQUFNO2FBQ1Q7UUFDTCxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJO1lBQ3hCLE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksV0FBVyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztRQUN0RyxJQUFJLENBQUMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxLQUFLLFNBQVMsSUFBSSxPQUFPLENBQUMsU0FBUyxLQUFLLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQztZQUN0SCxPQUFPLEdBQUcsSUFBSSxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDbkIsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxXQUFtQixFQUFFLE9BSXJEO0lBQ0csSUFBSSxPQUFPLEVBQUU7UUFDVCxJQUFJLGNBQWMsR0FJZCxFQUFFLENBQUM7UUFDUCxJQUFJLE9BQU8sQ0FBQyxTQUFTO1lBQ2pCLGNBQWMsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxjQUFjLElBQUksT0FBTyxDQUFDLFNBQVMsSUFBSSxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDekwsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFO1lBQ2QsSUFBSSxjQUFjLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDO1lBQzlFLElBQUksWUFBWSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RDLElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2pDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7WUFDSCxjQUFjLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQztTQUN0QztRQUNELElBQUksT0FBTyxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUMzQyxjQUFjLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEQsY0FBYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7UUFDckYsT0FBTyxjQUFjLENBQUM7S0FDekI7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUNvbnRyb2wsIEZvcm1Hcm91cCwgRm9ybUFycmF5IH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCJcclxuaW1wb3J0IHsgUmVzZXRGb3JtVHlwZSB9IGZyb20gXCIuLi9lbnVtcy9yZXNldC10eXBlXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNSZXNldENvbnRyb2woY29udHJvbE5hbWU6c3RyaW5nLGNvbnRyb2w6IGFueSwgb3B0aW9ucz86IHtcclxuICAgIHJlc2V0VHlwZT86IFJlc2V0Rm9ybVR5cGUsXHJcbiAgICB3aXRoPzogc3RyaW5nW10sXHJcbiAgICB2YWx1ZT86IHsgW2tleTogc3RyaW5nXTogYW55IH1cclxufSkge1xyXG4gICAgbGV0IGlzUmVzZXQ6IGJvb2xlYW4gPSB0cnVlO1xyXG4gICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBpc1Jlc2V0ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucmVzZXRUeXBlKVxyXG4gICAgICAgIHN3aXRjaCAob3B0aW9ucy5yZXNldFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBSZXNldEZvcm1UeXBlLkNvbnRyb2xzT25seTpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSBjb250cm9sIGluc3RhbmNlb2YgRm9ybUNvbnRyb2w7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBSZXNldEZvcm1UeXBlLkNvbnRyb2xzQW5kRm9ybUdyb3Vwc09ubHk6XHJcbiAgICAgICAgICAgICAgICBpc1Jlc2V0ID0gY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Db250cm9sIHx8IGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtR3JvdXA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBSZXNldEZvcm1UeXBlLkZvcm1Hcm91cHNPbmx5OlxyXG4gICAgICAgICAgICAgICAgaXNSZXNldCA9IGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtR3JvdXA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBSZXNldEZvcm1UeXBlLkZvcm1BcnJheXNPbmx5OlxyXG4gICAgICAgICAgICAgICAgaXNSZXNldCA9IGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQXJyYXk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBSZXNldEZvcm1UeXBlLkRlZmluZWRQcm9wc09ubHk6XHJcbiAgICAgICAgICAgICAgICBpc1Jlc2V0ID0gb3B0aW9ucy52YWx1ZSA/IE9iamVjdC5rZXlzKG9wdGlvbnMudmFsdWUpLmluZGV4T2YoY29udHJvbE5hbWUpICE9IC0xIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGlzUmVzZXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBpZiAoIWlzUmVzZXQgJiYgb3B0aW9ucy53aXRoKSBcclxuICAgICAgICAgICAgaXNSZXNldCA9IG9wdGlvbnMud2l0aC5maWx0ZXIoeCA9PiB4LnNwbGl0KCcuJylbMF0gPT0gY29udHJvbE5hbWUuc3BsaXQoJy4nKVswXSlbMF0gIT09IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoIWlzUmVzZXQgJiYgb3B0aW9ucy52YWx1ZSAmJiAob3B0aW9ucy5yZXNldFR5cGUgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnJlc2V0VHlwZSAhPT0gUmVzZXRGb3JtVHlwZS5EZWZpbmVkUHJvcHNPbmx5KSlcclxuICAgICAgICAgICAgaXNSZXNldCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaXNSZXNldDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE5lc3RlZE9wdGlvbnMoY29udHJvbE5hbWU6IHN0cmluZywgb3B0aW9ucz86IHtcclxuICAgIHJlc2V0VHlwZT86IFJlc2V0Rm9ybVR5cGUsXHJcbiAgICB3aXRoPzogc3RyaW5nW10sXHJcbiAgICB2YWx1ZT86IHsgW2tleTogc3RyaW5nXTogYW55IH1cclxufSkge1xyXG4gICAgaWYgKG9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgak9iamVjdE9wdGlvbnM6IHtcclxuICAgICAgICAgICAgcmVzZXRUeXBlPzogUmVzZXRGb3JtVHlwZSxcclxuICAgICAgICAgICAgd2l0aD86IHN0cmluZ1tdLFxyXG4gICAgICAgICAgICB2YWx1ZT86IHsgW2tleTogc3RyaW5nXTogYW55IH1cclxuICAgICAgICB9ID0ge307XHJcbiAgICAgICAgaWYgKG9wdGlvbnMucmVzZXRUeXBlKVxyXG4gICAgICAgICAgICBqT2JqZWN0T3B0aW9ucy5yZXNldFR5cGUgPSAob3B0aW9ucy5yZXNldFR5cGUgPT0gUmVzZXRGb3JtVHlwZS5Gb3JtR3JvdXBzT25seSB8fCBvcHRpb25zLnJlc2V0VHlwZSA9PSBSZXNldEZvcm1UeXBlLkZvcm1BcnJheXNPbmx5KSA/IFJlc2V0Rm9ybVR5cGUuQ29udHJvbHNPbmx5IDogb3B0aW9ucy5yZXNldFR5cGU7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMud2l0aCkge1xyXG4gICAgICAgICAgICBsZXQgbmVzdGVkQ29udHJvbHMgPSBvcHRpb25zLndpdGguZmlsdGVyKHQgPT4gdC5zcGxpdCgnLicpWzBdID09IGNvbnRyb2xOYW1lKTtcclxuICAgICAgICAgICAgbGV0IGNvbnRyb2xOYW1lcyA9IG5lc3RlZENvbnRyb2xzLm1hcCh4ID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBzcGxpdENvbnRyb2xzID0geC5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICAgICAgc3BsaXRDb250cm9scy5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3BsaXRDb250cm9scy5qb2luKCcuJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBqT2JqZWN0T3B0aW9ucy53aXRoID0gY29udHJvbE5hbWVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy52YWx1ZSAmJiBvcHRpb25zLnZhbHVlW2NvbnRyb2xOYW1lXSlcclxuICAgICAgICAgICAgak9iamVjdE9wdGlvbnMudmFsdWUgPSBvcHRpb25zLnZhbHVlW2NvbnRyb2xOYW1lXTtcclxuICAgICAgICBqT2JqZWN0T3B0aW9ucyA9IE9iamVjdC5rZXlzKGpPYmplY3RPcHRpb25zKS5sZW5ndGggPiAwID8gak9iamVjdE9wdGlvbnMgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIGpPYmplY3RPcHRpb25zO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcclxufSJdfQ==